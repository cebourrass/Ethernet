
EthPacket.elf:     file format elf32-littlenios2
EthPacket.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000d7d8 memsz 0x0000d7d8 flags r-x
    LOAD off    0x0000e7f8 vaddr 0x0004d7f8 paddr 0x0004f254 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010cb0 vaddr 0x00050cb0 paddr 0x00050cb0 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d21c  000401b4  000401b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000428  0004d3d0  0004d3d0  0000e3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0004d7f8  0004f254  0000e7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00050cb0  00050cb0  00010cb0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  00010278  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013e9  00000000  00000000  00010f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000235fb  00000000  00000000  00012319  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007bde  00000000  00000000  00035914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013ba9  00000000  00000000  0003d4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001970  00000000  00000000  0005109c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022a6  00000000  00000000  00052a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf22  00000000  00000000  00054cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00060bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00060be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000645b3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000645b6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000645c2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000645c3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000645c4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000645c8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000645cc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000645d0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000645db  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000645e6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000645f1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  000645fc  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00048fa9  00000000  00000000  0006462a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401b4 l    d  .text	00000000 .text
0004d3d0 l    d  .rodata	00000000 .rodata
0004d7f8 l    d  .rwdata	00000000 .rwdata
00050cb0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000401ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 IP.c
00000000 l    df *ABS*	00000000 hello_world.c
000409dc l     F .text	00000104 receiveUDP_interrupt
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00040f04 l     F .text	00000058 __sprint_r
0004d528 l     O .rodata	00000010 blanks.3452
0004d518 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00042f80 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000449a8 l     F .text	00000058 std
00044ab4 l     F .text	00000008 __fp_lock
00044abc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004d7f8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0004f220 l     O .rwdata	00000004 charset
0004d55c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004d6a4 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00048e68 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00049f94 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0004a8d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004a930 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004aa34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0004ad18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004adf8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004af58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004b188 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004f248 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004b440 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004e1b4 l     O .rwdata	00001060 jtag_uart_0
0004b530 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004b770 l     F .text	00000228 altera_avalon_jtag_uart_irq
0004b998 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004c014 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0004c338 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004c748 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0004c898 l     F .text	000000f8 alt_file_locked
0004cb1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0004d1b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0004d36c l     F .text	00000040 alt_sim_halt
00046798 g     F .text	00000094 _mprec_log10
00046884 g     F .text	00000088 __any_on
0004803c g     F .text	00000070 _isatty_r
0004d67c g     O .rodata	00000028 __mprec_tinytens
0004afb8 g     F .text	0000006c alt_main
00040ddc g     F .text	000000a0 _puts_r
00050d0c g     O .bss	00000100 alt_irq
000480ac g     F .text	00000078 _lseek_r
0004f254 g       *ABS*	00000000 __flash_rwdata_start
00049988 g     F .text	00000088 __eqdf2
00050f9c g       *ABS*	00000000 __alt_heap_start
00040d64 g     F .text	00000044 printf
00047af4 g     F .text	00000068 __sseek
00044a10 g     F .text	000000a4 __sinit
0004571c g     F .text	00000084 _setlocale_r
00044b10 g     F .text	0000009c __sfmoreglue
0004b044 g     F .text	00000020 __malloc_unlock
00040870 g     F .text	0000010c SendPacketFifo
00040604 g     F .text	00000150 SendCommandPacket
00046214 g     F .text	000000e0 memmove
00044b00 g     F .text	00000010 _cleanup
0004690c g     F .text	000000bc _Balloc
00049a98 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040578 g     F .text	0000008c CalcCheck
00040020 g       *ABS*	00000000 __flash_exceptions_start
00047fc8 g     F .text	00000074 _fstat_r
00050cc8 g     O .bss	00000004 errno
00050cd4 g     O .bss	00000004 alt_argv
00057214 g       *ABS*	00000000 _gp
0004e034 g     O .rwdata	00000180 alt_fd_list
0004cd40 g     F .text	00000094 alt_find_dev
00046174 g     F .text	000000a0 memcpy
00044af4 g     F .text	0000000c _cleanup_r
00049c30 g     F .text	000000f8 __floatsidf
0004c820 g     F .text	00000078 alt_io_redirect
00049ba8 g     F .text	00000088 __ltdf2
0004d3d0 g       *ABS*	00000000 __DTOR_END__
00040e7c g     F .text	00000014 puts
000466e8 g     F .text	000000b0 __ratio
0004bbb0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00040da8 g     F .text	00000034 _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004a0d0 g     F .text	00000008 __udivsi3
0004ac54 g     F .text	000000c4 isatty
0004d58c g     O .rodata	000000c8 __mprec_tens
000456f8 g     F .text	00000008 __locale_charset
00050cbc g     O .bss	00000004 __malloc_top_pad
0004f21c g     O .rwdata	00000004 __mb_cur_max
00045700 g     F .text	0000000c _localeconv_r
00047070 g     F .text	0000003c __i2b
000450dc g     F .text	0000049c __sfvwrite_r
00047a7c g     F .text	00000070 _sbrk_r
00048124 g     F .text	00000078 _read_r
0004dbf8 g     O .rwdata	0000000c __lc_ctype
0004f23c g     O .rwdata	00000004 alt_max_fd
0004a5d0 g     F .text	00000138 __unpack_d
00047ea4 g     F .text	00000110 _fclose_r
00044974 g     F .text	00000034 fflush
00050cc0 g     O .bss	00000004 __malloc_max_sbrked_mem
0004aa94 g     F .text	000001c0 alt_irq_register
000492f8 g     F .text	00000074 __adddf3
000465c8 g     F .text	00000120 __b2d
00048808 g     F .text	00000660 __umoddi3
0004ae64 g     F .text	000000f4 lseek
0004f218 g     O .rwdata	00000004 _global_impure_ptr
00047418 g     F .text	000005f4 _realloc_r
00050f9c g       *ABS*	00000000 __bss_end
0004c650 g     F .text	000000f8 alt_iic_isr_register
0004cc14 g     F .text	0000010c alt_tick
0004819c g     F .text	0000066c __udivdi3
0004d654 g     O .rodata	00000028 __mprec_bigtens
000472f8 g     F .text	00000120 __s2b
00049e00 g     F .text	00000194 __floatunsidf
000464e8 g     F .text	00000060 __mcmp
00044adc g     F .text	00000018 __fp_lock_all
0004c608 g     F .text	00000048 alt_ic_irq_enabled
0004cb7c g     F .text	00000098 alt_alarm_stop
00050ccc g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000c8 alt_irq_handler
0004e00c g     O .rwdata	00000028 alt_dev_null
0004c268 g     F .text	0000001c alt_dcache_flush_all
000463b4 g     F .text	00000070 __hi0bits
00049d28 g     F .text	000000d8 __fixdfsi
0004f254 g       *ABS*	00000000 __ram_rwdata_end
0004f234 g     O .rwdata	00000008 alt_dev_list
0004b31c g     F .text	00000124 write
00040450 g     F .text	00000128 WriteIPConf
0004d7f8 g       *ABS*	00000000 __ram_rodata_end
0004a95c g     F .text	000000d8 fstat
000471d8 g     F .text	00000120 __pow5mult
00050cb0 g     O .bss	00000004 __nlocale_changed
0004a0d8 g     F .text	00000008 __umodsi3
00050f9c g       *ABS*	00000000 end
0004b6b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0004d3cc g       *ABS*	00000000 __CTOR_LIST__
00070d40 g       *ABS*	00000000 __alt_stack_pointer
0004c084 g     F .text	00000090 alt_avalon_timer_sc_init
0004a23c g     F .text	00000080 __clzsi2
0004bdd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00044a00 g     F .text	00000004 __sfp_lock_acquire
00046090 g     F .text	000000e4 memchr
00040f5c g     F .text	00001ec4 ___vfprintf_internal_r
00044dc8 g     F .text	00000314 _free_r
0004d1bc g     F .text	000001b0 __call_exitprocs
00050cb4 g     O .bss	00000004 __mlocale_changed
0004f228 g     O .rwdata	00000004 __malloc_sbrk_base
000401b4 g     F .text	0000003c _start
00050cdc g     O .bss	00000004 _alt_tick_rate
00046cd0 g     F .text	0000014c __lshift
00050ce0 g     O .bss	00000004 _alt_nticks
0004b064 g     F .text	00000124 read
0004b4d4 g     F .text	0000005c alt_sys_init
0004d084 g     F .text	00000134 __register_exitproc
00046e1c g     F .text	00000254 __multiply
0004ba48 g     F .text	00000074 altera_avalon_jtag_uart_close
0004a0e0 g     F .text	00000038 __mulsi3
0004d7f8 g       *ABS*	00000000 __ram_rwdata_start
0004d3d0 g       *ABS*	00000000 __ram_rodata_start
00050ce4 g     O .bss	00000028 __malloc_current_mallinfo
000469c8 g     F .text	0000017c __d2b
0004b568 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0004cef4 g     F .text	000000d0 alt_get_fd
0004a708 g     F .text	000000c8 __fpcmp_parts_d
00047e34 g     F .text	00000070 _close_r
0004d010 g     F .text	00000074 memcmp
0004b618 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00050f9c g       *ABS*	00000000 __alt_stack_base
0004b660 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00042e44 g     F .text	0000013c __swsetup_r
000401f0 g     F .text	000000f0 PrintIPConf
00049730 g     F .text	00000258 __divdf3
00044bac g     F .text	000000f0 __sfp
0004682c g     F .text	00000058 __copybits
0004dc04 g     O .rwdata	00000408 __malloc_av_
00044a0c g     F .text	00000004 __sinit_lock_release
0004936c g     F .text	000003c4 __muldf3
00047bd8 g     F .text	00000060 __sread
0004cdd4 g     F .text	00000120 alt_find_file
0004c284 g     F .text	000000b4 alt_dev_llist_insert
0004b024 g     F .text	00000020 __malloc_lock
0004b260 g     F .text	000000bc sbrk
00044778 g     F .text	000001fc _fflush_r
00047d6c g     F .text	000000c8 _calloc_r
00050cb0 g       *ABS*	00000000 __bss_start
000462f4 g     F .text	00000098 memset
00040ae0 g     F .text	00000284 main
0004097c g     F .text	00000060 delay_ms
00050cd8 g     O .bss	00000004 alt_envp
00050cc4 g     O .bss	00000004 __malloc_max_total_mem
0004b5c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00047aec g     F .text	00000008 __sclose
00070d40 g       *ABS*	00000000 __alt_heap_limit
00047fb4 g     F .text	00000014 fclose
00050e0c g     O .bss	00000190 _atexit0
000431c4 g     F .text	000015b4 _dtoa_r
00045950 g     F .text	00000740 _malloc_r
0004f240 g     O .rwdata	00000004 alt_errno
00045640 g     F .text	000000b8 _fwalk
0004a010 g     F .text	00000060 __divsi3
0004d6b0 g     O .rodata	00000014 __thenan_df
00044c9c g     F .text	0000012c _malloc_trim_r
0004d3d0 g       *ABS*	00000000 __CTOR_END__
00047c38 g     F .text	000000bc strcmp
0004d3d0 g       *ABS*	00000000 __flash_rodata_start
0004d3d0 g       *ABS*	00000000 __DTOR_LIST__
00049a10 g     F .text	00000088 __nedf2
0004b4a0 g     F .text	00000034 alt_irq_init
0004b1e8 g     F .text	00000078 alt_release_fd
0004d6c4 g     O .rodata	00000100 __clz_tab
00050cb8 g     O .bss	00000004 _PathLocale
0004cfc4 g     F .text	00000014 atexit
00047cf4 g     F .text	00000078 _write_r
000457a0 g     F .text	0000001c setlocale
0004f214 g     O .rwdata	00000004 _impure_ptr
00050cd0 g     O .bss	00000004 alt_argc
0004c3fc g     F .text	00000064 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00046548 g     F .text	00000080 __ulp
00047a0c g     F .text	00000040 __isinfd
00044ac4 g     F .text	00000018 __fp_unlock_all
0004f22c g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
0004570c g     F .text	00000010 localeconv
0004c47c g     F .text	00000050 alt_ic_isr_register
0004f254 g       *ABS*	00000000 _edata
00050f9c g       *ABS*	00000000 _end
000401b4 g       *ABS*	00000000 __ram_exceptions_end
00040754 g     F .text	0000011c sendCommandPacket_UDP
0004babc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0004c568 g     F .text	000000a0 alt_ic_irq_disable
00047b5c g     F .text	0000007c __swrite
0004f224 g     O .rwdata	00000004 __malloc_trim_threshold
0004cd20 g     F .text	00000020 altera_nios2_qsys_irq_init
0004cfd8 g     F .text	00000038 exit
00045578 g     F .text	000000c8 _fwalk_reent
000402e0 g     F .text	00000170 ReadIPConf
00046b44 g     F .text	0000018c __mdiff
0004a070 g     F .text	00000060 __modsi3
00070d40 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00044a04 g     F .text	00000004 __sfp_lock_release
0004d3ac g     F .text	00000020 _exit
00047a4c g     F .text	00000030 __isnand
0004c114 g     F .text	00000154 alt_alarm_start
0004a118 g     F .text	00000124 __muldi3
000457bc g     F .text	00000194 __smakebuf_r
00040e90 g     F .text	00000074 strlen
0004c990 g     F .text	0000018c open
00049b20 g     F .text	00000088 __gedf2
0004c460 g     F .text	0000001c alt_icache_flush_all
0004f244 g     O .rwdata	00000004 alt_priority_mask
0004c4cc g     F .text	0000009c alt_ic_irq_enable
00042e20 g     F .text	00000024 __vfprintf_internal
00049278 g     F .text	00000080 __subdf3
00046424 g     F .text	000000c4 __lo0bits
0004f24c g     O .rwdata	00000008 alt_alarm_list
0004c398 g     F .text	00000064 _do_ctors
0004a7d0 g     F .text	00000100 close
0004ad78 g     F .text	00000080 alt_load
0004a2bc g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00044a08 g     F .text	00000004 __sinit_lock_acquire
000470ac g     F .text	0000012c __multadd
0004638c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406d14 	ori	at,at,436
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   40044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   400fc:	0005313a 	rdctl	r2,ipending
   40100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   40104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   40108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   4010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40110:	00800044 	movi	r2,1
   40114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40118:	e0ffff17 	ldw	r3,-4(fp)
   4011c:	e0bffe17 	ldw	r2,-8(fp)
   40120:	1884703a 	and	r2,r3,r2
   40124:	1005003a 	cmpeq	r2,r2,zero
   40128:	1000161e 	bne	r2,zero,40184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	e0bffd17 	ldw	r2,-12(fp)
   40130:	00c00174 	movhi	r3,5
   40134:	18c34304 	addi	r3,r3,3340
   40138:	100490fa 	slli	r2,r2,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	11400017 	ldw	r5,0(r2)
   40144:	e0bffd17 	ldw	r2,-12(fp)
   40148:	00c00174 	movhi	r3,5
   4014c:	18c34304 	addi	r3,r3,3340
   40150:	100490fa 	slli	r2,r2,3
   40154:	10c5883a 	add	r2,r2,r3
   40158:	10800104 	addi	r2,r2,4
   4015c:	11000017 	ldw	r4,0(r2)
   40160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40164:	0005313a 	rdctl	r2,ipending
   40168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   4016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   40170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	1004c03a 	cmpne	r2,r2,zero
   4017c:	103fe31e 	bne	r2,zero,4010c <alt_irq_handler+0x20>
   40180:	00000706 	br	401a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40184:	e0bffe17 	ldw	r2,-8(fp)
   40188:	1085883a 	add	r2,r2,r2
   4018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   40190:	e0bffd17 	ldw	r2,-12(fp)
   40194:	10800044 	addi	r2,r2,1
   40198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   4019c:	003fde06 	br	40118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   401a0:	e037883a 	mov	sp,fp
   401a4:	dfc00117 	ldw	ra,4(sp)
   401a8:	df000017 	ldw	fp,0(sp)
   401ac:	dec00204 	addi	sp,sp,8
   401b0:	f800283a 	ret

Disassembly of section .text:

000401b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401b4:	06c001f4 	movhi	sp,7
    ori sp, sp, %lo(__alt_stack_pointer)
   401b8:	dec35014 	ori	sp,sp,3392

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   401bc:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c0:	d69c8514 	ori	gp,gp,29204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401c4:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401c8:	10832c14 	ori	r2,r2,3248

    movhi r3, %hi(__bss_end)
   401cc:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d0:	18c3e714 	ori	r3,r3,3996

    beq r2, r3, 1f
   401d4:	10c00326 	beq	r2,r3,401e4 <_start+0x30>

0:
    stw zero, (r2)
   401d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e0:	10fffd36 	bltu	r2,r3,401d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401e4:	004ad780 	call	4ad78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401e8:	004afb80 	call	4afb8 <alt_main>

000401ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401ec:	003fff06 	br	401ec <alt_after_alt_main>

000401f0 <PrintIPConf>:
#include <stdint.h>
#include <system.h>
#include "IP.h"
//#define DEBUG_SND_PKT

void PrintIPConf(struct ETH_struct* conf){
   401f0:	defffd04 	addi	sp,sp,-12
   401f4:	dfc00215 	stw	ra,8(sp)
   401f8:	df000115 	stw	fp,4(sp)
   401fc:	df000104 	addi	fp,sp,4
   40200:	e13fff15 	stw	r4,-4(fp)

		printf("========= IP config ============\n");
   40204:	01000174 	movhi	r4,5
   40208:	2134f404 	addi	r4,r4,-11312
   4020c:	0040e7c0 	call	40e7c <puts>
		printf("Checksum: %x\n",conf->Checksum);
   40210:	e0bfff17 	ldw	r2,-4(fp)
   40214:	1080000b 	ldhu	r2,0(r2)
   40218:	117fffcc 	andi	r5,r2,65535
   4021c:	01000174 	movhi	r4,5
   40220:	2134fd04 	addi	r4,r4,-11276
   40224:	0040d640 	call	40d64 <printf>
		printf("Local Port: %x\n",conf->LocalPort);
   40228:	e0bfff17 	ldw	r2,-4(fp)
   4022c:	1080008b 	ldhu	r2,2(r2)
   40230:	117fffcc 	andi	r5,r2,65535
   40234:	01000174 	movhi	r4,5
   40238:	21350104 	addi	r4,r4,-11260
   4023c:	0040d640 	call	40d64 <printf>
		printf("Remote Port: %x\n",conf->RemotePort);
   40240:	e0bfff17 	ldw	r2,-4(fp)
   40244:	1080010b 	ldhu	r2,4(r2)
   40248:	117fffcc 	andi	r5,r2,65535
   4024c:	01000174 	movhi	r4,5
   40250:	21350504 	addi	r4,r4,-11244
   40254:	0040d640 	call	40d64 <printf>
		printf("Local  IP: %lx\n",conf->LocalIP);
   40258:	e0bfff17 	ldw	r2,-4(fp)
   4025c:	11400217 	ldw	r5,8(r2)
   40260:	01000174 	movhi	r4,5
   40264:	21350a04 	addi	r4,r4,-11224
   40268:	0040d640 	call	40d64 <printf>
		printf("Remote IP: %lx\n",conf->RemoteIP);
   4026c:	e0bfff17 	ldw	r2,-4(fp)
   40270:	11400317 	ldw	r5,12(r2)
   40274:	01000174 	movhi	r4,5
   40278:	21350e04 	addi	r4,r4,-11208
   4027c:	0040d640 	call	40d64 <printf>
		printf("Local_MAC_ADDRESS: %llx\n",conf->LocalMACAddr);
   40280:	e13fff17 	ldw	r4,-4(fp)
   40284:	20800417 	ldw	r2,16(r4)
   40288:	20c00517 	ldw	r3,20(r4)
   4028c:	01000174 	movhi	r4,5
   40290:	21351204 	addi	r4,r4,-11192
   40294:	100b883a 	mov	r5,r2
   40298:	180d883a 	mov	r6,r3
   4029c:	0040d640 	call	40d64 <printf>
		printf("Remote_MAC_ADDRESS: %llx\n",conf->RemoteMACAddr);
   402a0:	e13fff17 	ldw	r4,-4(fp)
   402a4:	20800617 	ldw	r2,24(r4)
   402a8:	20c00717 	ldw	r3,28(r4)
   402ac:	01000174 	movhi	r4,5
   402b0:	21351904 	addi	r4,r4,-11164
   402b4:	100b883a 	mov	r5,r2
   402b8:	180d883a 	mov	r6,r3
   402bc:	0040d640 	call	40d64 <printf>
		printf("==============================\n");
   402c0:	01000174 	movhi	r4,5
   402c4:	21352004 	addi	r4,r4,-11136
   402c8:	0040e7c0 	call	40e7c <puts>

}
   402cc:	e037883a 	mov	sp,fp
   402d0:	dfc00117 	ldw	ra,4(sp)
   402d4:	df000017 	ldw	fp,0(sp)
   402d8:	dec00204 	addi	sp,sp,8
   402dc:	f800283a 	ret

000402e0 <ReadIPConf>:



void ReadIPConf(struct ETH_struct* conf)
{
   402e0:	defff604 	addi	sp,sp,-40
   402e4:	df000915 	stw	fp,36(sp)
   402e8:	df000904 	addi	fp,sp,36
   402ec:	e13fff15 	stw	r4,-4(fp)
	uint64_t LocalMACAddrLSB;
	uint64_t LocalMACAddrMSB;
	uint64_t RemoteMACAddrLSB;
	uint64_t RemoteMACAddrMSB;

	conf-> Checksum  = IORD(AV_ETH_CONFIG_0_BASE, 0x00);
   402f0:	00800234 	movhi	r2,8
   402f4:	10842004 	addi	r2,r2,4224
   402f8:	10800037 	ldwio	r2,0(r2)
   402fc:	1007883a 	mov	r3,r2
   40300:	e0bfff17 	ldw	r2,-4(fp)
   40304:	10c0000d 	sth	r3,0(r2)
	conf-> LocalPort = IORD(AV_ETH_CONFIG_0_BASE, 0x01);
   40308:	00800234 	movhi	r2,8
   4030c:	10842104 	addi	r2,r2,4228
   40310:	10800037 	ldwio	r2,0(r2)
   40314:	1007883a 	mov	r3,r2
   40318:	e0bfff17 	ldw	r2,-4(fp)
   4031c:	10c0008d 	sth	r3,2(r2)
	conf-> RemotePort = IORD(AV_ETH_CONFIG_0_BASE, 0x02);
   40320:	00800234 	movhi	r2,8
   40324:	10842204 	addi	r2,r2,4232
   40328:	10800037 	ldwio	r2,0(r2)
   4032c:	1007883a 	mov	r3,r2
   40330:	e0bfff17 	ldw	r2,-4(fp)
   40334:	10c0010d 	sth	r3,4(r2)
	conf-> LocalIP = IORD(AV_ETH_CONFIG_0_BASE, 0x03);
   40338:	00800234 	movhi	r2,8
   4033c:	10842304 	addi	r2,r2,4236
   40340:	10800037 	ldwio	r2,0(r2)
   40344:	1007883a 	mov	r3,r2
   40348:	e0bfff17 	ldw	r2,-4(fp)
   4034c:	10c00215 	stw	r3,8(r2)
	conf-> RemoteIP = IORD(AV_ETH_CONFIG_0_BASE, 0x04);
   40350:	00800234 	movhi	r2,8
   40354:	10842404 	addi	r2,r2,4240
   40358:	10800037 	ldwio	r2,0(r2)
   4035c:	1007883a 	mov	r3,r2
   40360:	e0bfff17 	ldw	r2,-4(fp)
   40364:	10c00315 	stw	r3,12(r2)

	LocalMACAddrLSB = IORD(AV_ETH_CONFIG_0_BASE, 0x05);
   40368:	00800234 	movhi	r2,8
   4036c:	10842504 	addi	r2,r2,4244
   40370:	10800037 	ldwio	r2,0(r2)
   40374:	e0bffd15 	stw	r2,-12(fp)
   40378:	1005d7fa 	srai	r2,r2,31
   4037c:	e0bffe15 	stw	r2,-8(fp)
	LocalMACAddrMSB = IORD(AV_ETH_CONFIG_0_BASE, 0x06);
   40380:	00800234 	movhi	r2,8
   40384:	10842604 	addi	r2,r2,4248
   40388:	10800037 	ldwio	r2,0(r2)
   4038c:	e0bffb15 	stw	r2,-20(fp)
   40390:	1005d7fa 	srai	r2,r2,31
   40394:	e0bffc15 	stw	r2,-16(fp)

	conf->LocalMACAddr = (LocalMACAddrMSB << 32) + LocalMACAddrLSB;
   40398:	e0bffb17 	ldw	r2,-20(fp)
   4039c:	100a983a 	sll	r5,r2,zero
   403a0:	0009883a 	mov	r4,zero
   403a4:	e1bffd17 	ldw	r6,-12(fp)
   403a8:	e1fffe17 	ldw	r7,-8(fp)
   403ac:	2185883a 	add	r2,r4,r6
   403b0:	1111803a 	cmpltu	r8,r2,r4
   403b4:	29c7883a 	add	r3,r5,r7
   403b8:	40c9883a 	add	r4,r8,r3
   403bc:	2007883a 	mov	r3,r4
   403c0:	1009883a 	mov	r4,r2
   403c4:	180b883a 	mov	r5,r3
   403c8:	e0bfff17 	ldw	r2,-4(fp)
   403cc:	11000415 	stw	r4,16(r2)
   403d0:	11400515 	stw	r5,20(r2)
		printf("LocalMACAddrMSB Register: %llx\n",LocalMACAddrMSB);
	#endif

	#endif

	RemoteMACAddrLSB = IORD(AV_ETH_CONFIG_0_BASE, 0x07);
   403d4:	00800234 	movhi	r2,8
   403d8:	10842704 	addi	r2,r2,4252
   403dc:	10800037 	ldwio	r2,0(r2)
   403e0:	e0bff915 	stw	r2,-28(fp)
   403e4:	1005d7fa 	srai	r2,r2,31
   403e8:	e0bffa15 	stw	r2,-24(fp)
	RemoteMACAddrMSB = IORD(AV_ETH_CONFIG_0_BASE, 0x08);
   403ec:	00800234 	movhi	r2,8
   403f0:	10842804 	addi	r2,r2,4256
   403f4:	10800037 	ldwio	r2,0(r2)
   403f8:	e0bff715 	stw	r2,-36(fp)
   403fc:	1005d7fa 	srai	r2,r2,31
   40400:	e0bff815 	stw	r2,-32(fp)

	conf-> RemoteMACAddr = (RemoteMACAddrMSB << 32) +RemoteMACAddrLSB;
   40404:	e0bff717 	ldw	r2,-36(fp)
   40408:	100a983a 	sll	r5,r2,zero
   4040c:	0009883a 	mov	r4,zero
   40410:	e1bff917 	ldw	r6,-28(fp)
   40414:	e1fffa17 	ldw	r7,-24(fp)
   40418:	2185883a 	add	r2,r4,r6
   4041c:	1111803a 	cmpltu	r8,r2,r4
   40420:	29c7883a 	add	r3,r5,r7
   40424:	40c9883a 	add	r4,r8,r3
   40428:	2007883a 	mov	r3,r4
   4042c:	1009883a 	mov	r4,r2
   40430:	180b883a 	mov	r5,r3
   40434:	e0bfff17 	ldw	r2,-4(fp)
   40438:	11000615 	stw	r4,24(r2)
   4043c:	11400715 	stw	r5,28(r2)
			printf("RemoteMACAddrLSB Register: %llx\n",RemoteMACAddrLSB);
			printf("RemoteMACAddrMSB Register: %llx\n",RemoteMACAddrMSB);
		#endif
	#endif

}
   40440:	e037883a 	mov	sp,fp
   40444:	df000017 	ldw	fp,0(sp)
   40448:	dec00104 	addi	sp,sp,4
   4044c:	f800283a 	ret

00040450 <WriteIPConf>:

void WriteIPConf(struct ETH_struct * conf)
{
   40450:	defffa04 	addi	sp,sp,-24
   40454:	df000515 	stw	fp,20(sp)
   40458:	df000504 	addi	fp,sp,20
   4045c:	e13fff15 	stw	r4,-4(fp)
	uint32_t RemoteMACAddrLSB;
	uint32_t RemoteMACAddrMSB;



	 IOWR(AV_ETH_CONFIG_0_BASE, 0x00,conf-> Checksum);
   40460:	e0bfff17 	ldw	r2,-4(fp)
   40464:	1080000b 	ldhu	r2,0(r2)
   40468:	10ffffcc 	andi	r3,r2,65535
   4046c:	00800234 	movhi	r2,8
   40470:	10842004 	addi	r2,r2,4224
   40474:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x01,conf-> LocalPort);
   40478:	e0bfff17 	ldw	r2,-4(fp)
   4047c:	1080008b 	ldhu	r2,2(r2)
   40480:	10ffffcc 	andi	r3,r2,65535
   40484:	00800234 	movhi	r2,8
   40488:	10842104 	addi	r2,r2,4228
   4048c:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x02,conf-> RemotePort);
   40490:	e0bfff17 	ldw	r2,-4(fp)
   40494:	1080010b 	ldhu	r2,4(r2)
   40498:	10ffffcc 	andi	r3,r2,65535
   4049c:	00800234 	movhi	r2,8
   404a0:	10842204 	addi	r2,r2,4232
   404a4:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x03,conf-> LocalIP);
   404a8:	e0bfff17 	ldw	r2,-4(fp)
   404ac:	10800217 	ldw	r2,8(r2)
   404b0:	1007883a 	mov	r3,r2
   404b4:	00800234 	movhi	r2,8
   404b8:	10842304 	addi	r2,r2,4236
   404bc:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x04,conf-> RemoteIP);
   404c0:	e0bfff17 	ldw	r2,-4(fp)
   404c4:	10800317 	ldw	r2,12(r2)
   404c8:	1007883a 	mov	r3,r2
   404cc:	00800234 	movhi	r2,8
   404d0:	10842404 	addi	r2,r2,4240
   404d4:	10c00035 	stwio	r3,0(r2)

	 LocalMACAddrLSB = (uint32_t)(conf->LocalMACAddr & 0x00000000FFFFFFFF);
   404d8:	e13fff17 	ldw	r4,-4(fp)
   404dc:	20800417 	ldw	r2,16(r4)
   404e0:	20c00517 	ldw	r3,20(r4)
   404e4:	e0bffe15 	stw	r2,-8(fp)
	 #ifdef DEBUG_IPCONF
	 printf("\nWriteIPConf Function\n");
	 printf("LocalMACAddrLSB :%llx\n",LocalMACAddrLSB);
	 #endif

	 LocalMACAddrMSB = conf->LocalMACAddr>> 32;
   404e8:	e0bfff17 	ldw	r2,-4(fp)
   404ec:	11000417 	ldw	r4,16(r2)
   404f0:	11400517 	ldw	r5,20(r2)
   404f4:	2804d83a 	srl	r2,r5,zero
   404f8:	0007883a 	mov	r3,zero
   404fc:	e0bffd15 	stw	r2,-12(fp)

	 #ifdef DEBUG_IPCONF
	 printf("LocalMACAddrMSB :%llx\n",LocalMACAddrMSB);
	 #endif

	 IOWR(AV_ETH_CONFIG_0_BASE, 0x05, LocalMACAddrLSB);
   40500:	e0fffe17 	ldw	r3,-8(fp)
   40504:	00800234 	movhi	r2,8
   40508:	10842504 	addi	r2,r2,4244
   4050c:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x06, LocalMACAddrMSB);
   40510:	e0fffd17 	ldw	r3,-12(fp)
   40514:	00800234 	movhi	r2,8
   40518:	10842604 	addi	r2,r2,4248
   4051c:	10c00035 	stwio	r3,0(r2)

	 RemoteMACAddrLSB = (uint32_t)(conf->RemoteMACAddr & 0x00000000FFFFFFFF);
   40520:	e13fff17 	ldw	r4,-4(fp)
   40524:	20800617 	ldw	r2,24(r4)
   40528:	20c00717 	ldw	r3,28(r4)
   4052c:	e0bffc15 	stw	r2,-16(fp)

	 #ifdef DEBUG_IPCONF
	 printf("RemoteMACAddrLSB :%llx\n",RemoteMACAddrLSB);
	 #endif

	 RemoteMACAddrMSB = conf->RemoteMACAddr>> 32;
   40530:	e0bfff17 	ldw	r2,-4(fp)
   40534:	11000617 	ldw	r4,24(r2)
   40538:	11400717 	ldw	r5,28(r2)
   4053c:	2804d83a 	srl	r2,r5,zero
   40540:	0007883a 	mov	r3,zero
   40544:	e0bffb15 	stw	r2,-20(fp)

	 #ifdef DEBUG_IPCONF
	 printf("RemoteMACAddrMSB :%llx\n",RemoteMACAddrMSB);
	 #endif

	 IOWR(AV_ETH_CONFIG_0_BASE, 0x07, RemoteMACAddrLSB);
   40548:	e0fffc17 	ldw	r3,-16(fp)
   4054c:	00800234 	movhi	r2,8
   40550:	10842704 	addi	r2,r2,4252
   40554:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_ETH_CONFIG_0_BASE, 0x08, RemoteMACAddrMSB);
   40558:	e0fffb17 	ldw	r3,-20(fp)
   4055c:	00800234 	movhi	r2,8
   40560:	10842804 	addi	r2,r2,4256
   40564:	10c00035 	stwio	r3,0(r2)

}
   40568:	e037883a 	mov	sp,fp
   4056c:	df000017 	ldw	fp,0(sp)
   40570:	dec00104 	addi	sp,sp,4
   40574:	f800283a 	ret

00040578 <CalcCheck>:


uint16_t CalcCheck(uint32_t length, uint32_t IPsrc, uint32_t IPdst)
{
   40578:	defffb04 	addi	sp,sp,-20
   4057c:	df000415 	stw	fp,16(sp)
   40580:	df000404 	addi	fp,sp,16
   40584:	e13ffd15 	stw	r4,-12(fp)
   40588:	e17ffe15 	stw	r5,-8(fp)
   4058c:	e1bfff15 	stw	r6,-4(fp)


	uint32_t ipv4_header_precomputed_sum;

	ipv4_header_precomputed_sum = (IPV4_CHECKSUM_FIRSTHALFWORD)\
   40590:	e0bffe17 	ldw	r2,-8(fp)
   40594:	1004d43a 	srli	r2,r2,16
   40598:	10ffffcc 	andi	r3,r2,65535
   4059c:	e0bffd17 	ldw	r2,-12(fp)
   405a0:	1887883a 	add	r3,r3,r2
   405a4:	e0bffe17 	ldw	r2,-8(fp)
   405a8:	10bfffcc 	andi	r2,r2,65535
   405ac:	1887883a 	add	r3,r3,r2
   405b0:	e0bfff17 	ldw	r2,-4(fp)
   405b4:	1004d43a 	srli	r2,r2,16
   405b8:	10bfffcc 	andi	r2,r2,65535
   405bc:	1887883a 	add	r3,r3,r2
   405c0:	e0bfff17 	ldw	r2,-4(fp)
   405c4:	10bfffcc 	andi	r2,r2,65535
   405c8:	1887883a 	add	r3,r3,r2
   405cc:	00a14b54 	movui	r2,34093
   405d0:	1885883a 	add	r2,r3,r2
   405d4:	e0bffc15 	stw	r2,-16(fp)
								 + ((IPsrc >> 16) & 0xFFFF)\
								 + (IPsrc & 0x0000FFFF)\
								 + ((IPdst >> 16) & 0xFFFF)\
								 + (IPdst & 0x0000FFFF);

	return (uint16_t) ~((ipv4_header_precomputed_sum & 0xFFFF) + ((ipv4_header_precomputed_sum >>16) & 0xFFFF));
   405d8:	e0bffc17 	ldw	r2,-16(fp)
   405dc:	1007883a 	mov	r3,r2
   405e0:	e0bffc17 	ldw	r2,-16(fp)
   405e4:	1004d43a 	srli	r2,r2,16
   405e8:	1885883a 	add	r2,r3,r2
   405ec:	0084303a 	nor	r2,zero,r2
   405f0:	10bfffcc 	andi	r2,r2,65535
}
   405f4:	e037883a 	mov	sp,fp
   405f8:	df000017 	ldw	fp,0(sp)
   405fc:	dec00104 	addi	sp,sp,4
   40600:	f800283a 	ret

00040604 <SendCommandPacket>:


// Packet size = 8 32bits registers
void SendCommandPacket(uint32_t* packet, int length, uint32_t IPdst, uint64_t MACdst, uint16_t UDPPort)
{
   40604:	deffe804 	addi	sp,sp,-96
   40608:	dfc01615 	stw	ra,88(sp)
   4060c:	df001515 	stw	fp,84(sp)
   40610:	df001504 	addi	fp,sp,84
   40614:	e13ffc15 	stw	r4,-16(fp)
   40618:	e17ffd15 	stw	r5,-12(fp)
   4061c:	e1bffe15 	stw	r6,-8(fp)
   40620:	e1c00215 	stw	r7,8(fp)
   40624:	e0800417 	ldw	r2,16(fp)
   40628:	e0bfff0d 	sth	r2,-4(fp)
	#endif

	struct ETH_struct OldEthConf;
	struct ETH_struct EthConf;

	ReadIPConf(&EthConf);
   4062c:	e13ff404 	addi	r4,fp,-48
   40630:	00402e00 	call	402e0 <ReadIPConf>
	OldEthConf = EthConf;
   40634:	e0bff417 	ldw	r2,-48(fp)
   40638:	e0bfec15 	stw	r2,-80(fp)
   4063c:	e0bff517 	ldw	r2,-44(fp)
   40640:	e0bfed15 	stw	r2,-76(fp)
   40644:	e0bff617 	ldw	r2,-40(fp)
   40648:	e0bfee15 	stw	r2,-72(fp)
   4064c:	e0bff717 	ldw	r2,-36(fp)
   40650:	e0bfef15 	stw	r2,-68(fp)
   40654:	e0bff817 	ldw	r2,-32(fp)
   40658:	e0bff015 	stw	r2,-64(fp)
   4065c:	e0bff917 	ldw	r2,-28(fp)
   40660:	e0bff115 	stw	r2,-60(fp)
   40664:	e0bffa17 	ldw	r2,-24(fp)
   40668:	e0bff215 	stw	r2,-56(fp)
   4066c:	e0bffb17 	ldw	r2,-20(fp)
   40670:	e0bff315 	stw	r2,-52(fp)

	// Write New conf
	EthConf.Checksum = CalcCheck(32,EthConf.LocalIP, IPdst);
   40674:	e17ff617 	ldw	r5,-40(fp)
   40678:	01000804 	movi	r4,32
   4067c:	e1bffe17 	ldw	r6,-8(fp)
   40680:	00405780 	call	40578 <CalcCheck>
   40684:	e0bff40d 	sth	r2,-48(fp)
	EthConf.RemoteIP = IPdst;
   40688:	e0bffe17 	ldw	r2,-8(fp)
   4068c:	e0bff715 	stw	r2,-36(fp)
	EthConf.RemoteMACAddr = MACdst;
   40690:	e0800217 	ldw	r2,8(fp)
   40694:	e0bffa15 	stw	r2,-24(fp)
   40698:	e0800317 	ldw	r2,12(fp)
   4069c:	e0bffb15 	stw	r2,-20(fp)
	EthConf.RemotePort = UDPPort;
   406a0:	e0bfff0b 	ldhu	r2,-4(fp)
   406a4:	e0bff50d 	sth	r2,-44(fp)

	WriteIPConf(&EthConf);
   406a8:	e13ff404 	addi	r4,fp,-48
   406ac:	00404500 	call	40450 <WriteIPConf>
	PrintIPConf(&EthConf);
   406b0:	e13ff404 	addi	r4,fp,-48
   406b4:	00401f00 	call	401f0 <PrintIPConf>
	//TODO: configurable length


	/*	Resetting send bit	*/
	//TODO: use a read-write operation to overwrite only the bit0
	IOWR(AV_STATUS_REG_0_BASE, 0x00, 0x00000000);
   406b8:	00800234 	movhi	r2,8
   406bc:	10843004 	addi	r2,r2,4288
   406c0:	10000035 	stwio	zero,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x06, packet[5]);
	IOWR(AV_STATUS_REG_0_BASE, 0x07, packet[6]);
	IOWR(AV_STATUS_REG_0_BASE, 0x08, packet[7]);
	 */

	 for (cpt=0;cpt<8;cpt++)
   406c4:	e03feb15 	stw	zero,-84(fp)
   406c8:	00001406 	br	4071c <SendCommandPacket+0x118>
	 	  IOWR(AV_STATUS_REG_0_BASE, cpt+1, packet[cpt]);
   406cc:	e0bfeb17 	ldw	r2,-84(fp)
   406d0:	1085883a 	add	r2,r2,r2
   406d4:	1085883a 	add	r2,r2,r2
   406d8:	1007883a 	mov	r3,r2
   406dc:	00800234 	movhi	r2,8
   406e0:	10843104 	addi	r2,r2,4292
   406e4:	1889883a 	add	r4,r3,r2
   406e8:	e0bfeb17 	ldw	r2,-84(fp)
   406ec:	1085883a 	add	r2,r2,r2
   406f0:	1085883a 	add	r2,r2,r2
   406f4:	1007883a 	mov	r3,r2
   406f8:	e0bffc17 	ldw	r2,-16(fp)
   406fc:	1885883a 	add	r2,r3,r2
   40700:	10800017 	ldw	r2,0(r2)
   40704:	1007883a 	mov	r3,r2
   40708:	2005883a 	mov	r2,r4
   4070c:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x06, packet[5]);
	IOWR(AV_STATUS_REG_0_BASE, 0x07, packet[6]);
	IOWR(AV_STATUS_REG_0_BASE, 0x08, packet[7]);
	 */

	 for (cpt=0;cpt<8;cpt++)
   40710:	e0bfeb17 	ldw	r2,-84(fp)
   40714:	10800044 	addi	r2,r2,1
   40718:	e0bfeb15 	stw	r2,-84(fp)
   4071c:	e0bfeb17 	ldw	r2,-84(fp)
   40720:	10800210 	cmplti	r2,r2,8
   40724:	103fe91e 	bne	r2,zero,406cc <SendCommandPacket+0xc8>
	 	  IOWR(AV_STATUS_REG_0_BASE, cpt+1, packet[cpt]);


	/*	Generate pulse on the UDP send	*/
	//TODO: use a read-write operation to set only the bit0
	IOWR(AV_STATUS_REG_0_BASE, 0x00, 0xFFFFFFFF);
   40728:	00800234 	movhi	r2,8
   4072c:	10843004 	addi	r2,r2,4288
   40730:	00ffffc4 	movi	r3,-1
   40734:	10c00035 	stwio	r3,0(r2)
	for (i=0;i<8;i++)
		printf("packet[%d]:%lx ",i,packet[i]);
	printf("\n");
	#endif

	WriteIPConf(&OldEthConf);
   40738:	e13fec04 	addi	r4,fp,-80
   4073c:	00404500 	call	40450 <WriteIPConf>
}
   40740:	e037883a 	mov	sp,fp
   40744:	dfc00117 	ldw	ra,4(sp)
   40748:	df000017 	ldw	fp,0(sp)
   4074c:	dec00304 	addi	sp,sp,12
   40750:	f800283a 	ret

00040754 <sendCommandPacket_UDP>:



void sendCommandPacket_UDP(uint32_t packet[8], int length )
{
   40754:	defffd04 	addi	sp,sp,-12
   40758:	df000215 	stw	fp,8(sp)
   4075c:	df000204 	addi	fp,sp,8
   40760:	e13ffe15 	stw	r4,-8(fp)
   40764:	e17fff15 	stw	r5,-4(fp)
	//TODO: configurable length


	/*	Resetting send bit	*/
	//TODO: use a read-write operation to overwrite only the bit0
	IOWR(AV_STATUS_REG_0_BASE, 0x00, 0x00000000);
   40768:	00800234 	movhi	r2,8
   4076c:	10843004 	addi	r2,r2,4288
   40770:	10000035 	stwio	zero,0(r2)

	/*	Loading packet payload	*/
	IOWR(AV_STATUS_REG_0_BASE, 0x01, packet[0]);
   40774:	e0bffe17 	ldw	r2,-8(fp)
   40778:	10800017 	ldw	r2,0(r2)
   4077c:	1007883a 	mov	r3,r2
   40780:	00800234 	movhi	r2,8
   40784:	10843104 	addi	r2,r2,4292
   40788:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x02, packet[1]);
   4078c:	e0bffe17 	ldw	r2,-8(fp)
   40790:	10800104 	addi	r2,r2,4
   40794:	10800017 	ldw	r2,0(r2)
   40798:	1007883a 	mov	r3,r2
   4079c:	00800234 	movhi	r2,8
   407a0:	10843204 	addi	r2,r2,4296
   407a4:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x03, packet[2]);
   407a8:	e0bffe17 	ldw	r2,-8(fp)
   407ac:	10800204 	addi	r2,r2,8
   407b0:	10800017 	ldw	r2,0(r2)
   407b4:	1007883a 	mov	r3,r2
   407b8:	00800234 	movhi	r2,8
   407bc:	10843304 	addi	r2,r2,4300
   407c0:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x04, packet[3]);
   407c4:	e0bffe17 	ldw	r2,-8(fp)
   407c8:	10800304 	addi	r2,r2,12
   407cc:	10800017 	ldw	r2,0(r2)
   407d0:	1007883a 	mov	r3,r2
   407d4:	00800234 	movhi	r2,8
   407d8:	10843404 	addi	r2,r2,4304
   407dc:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x05, packet[4]);
   407e0:	e0bffe17 	ldw	r2,-8(fp)
   407e4:	10800404 	addi	r2,r2,16
   407e8:	10800017 	ldw	r2,0(r2)
   407ec:	1007883a 	mov	r3,r2
   407f0:	00800234 	movhi	r2,8
   407f4:	10843504 	addi	r2,r2,4308
   407f8:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x06, packet[5]);
   407fc:	e0bffe17 	ldw	r2,-8(fp)
   40800:	10800504 	addi	r2,r2,20
   40804:	10800017 	ldw	r2,0(r2)
   40808:	1007883a 	mov	r3,r2
   4080c:	00800234 	movhi	r2,8
   40810:	10843604 	addi	r2,r2,4312
   40814:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x07, packet[6]);
   40818:	e0bffe17 	ldw	r2,-8(fp)
   4081c:	10800604 	addi	r2,r2,24
   40820:	10800017 	ldw	r2,0(r2)
   40824:	1007883a 	mov	r3,r2
   40828:	00800234 	movhi	r2,8
   4082c:	10843704 	addi	r2,r2,4316
   40830:	10c00035 	stwio	r3,0(r2)
	IOWR(AV_STATUS_REG_0_BASE, 0x08, packet[7]);
   40834:	e0bffe17 	ldw	r2,-8(fp)
   40838:	10800704 	addi	r2,r2,28
   4083c:	10800017 	ldw	r2,0(r2)
   40840:	1007883a 	mov	r3,r2
   40844:	00800234 	movhi	r2,8
   40848:	10843804 	addi	r2,r2,4320
   4084c:	10c00035 	stwio	r3,0(r2)
	 	  IOWR(AV_STATUS_REG_0_BASE, cpt+1, packet[cpt]);
	 */

	/*	Generate pulse on the UDP send	*/
	//TODO: use a read-write operation to set only the bit0
	IOWR(AV_STATUS_REG_0_BASE, 0x00, 0xFFFFFFFF);
   40850:	00c00234 	movhi	r3,8
   40854:	18c43004 	addi	r3,r3,4288
   40858:	00bfffc4 	movi	r2,-1
   4085c:	18800035 	stwio	r2,0(r3)
	for (i=0;i<8;i++)
		printf("packet[%d]:%lx ",i,packet[i]);
	printf("\n");
	#endif

}
   40860:	e037883a 	mov	sp,fp
   40864:	df000017 	ldw	fp,0(sp)
   40868:	dec00104 	addi	sp,sp,4
   4086c:	f800283a 	ret

00040870 <SendPacketFifo>:


void SendPacketFifo(uint16_t length, uint32_t IPdst, uint64_t MACdst, uint16_t UDPSrcPort , uint16_t UDPDestPort)
{
   40870:	defff404 	addi	sp,sp,-48
   40874:	dfc00b15 	stw	ra,44(sp)
   40878:	df000a15 	stw	fp,40(sp)
   4087c:	df000a04 	addi	fp,sp,40
   40880:	e17ffb15 	stw	r5,-20(fp)
   40884:	e1bffc15 	stw	r6,-16(fp)
   40888:	e1fffd15 	stw	r7,-12(fp)
   4088c:	e0800217 	ldw	r2,8(fp)
   40890:	e0c00317 	ldw	r3,12(fp)
   40894:	e13ffa0d 	sth	r4,-24(fp)
   40898:	e0bffe0d 	sth	r2,-8(fp)
   4089c:	e0ffff0d 	sth	r3,-4(fp)

	uint32_t LocalIP;
	uint32_t LocalMACAddrLSB=0;
   408a0:	e03ff815 	stw	zero,-32(fp)
	uint32_t LocalMACAddrMSB=0;
   408a4:	e03ff715 	stw	zero,-36(fp)
	uint16_t Checksum;


	/*	Resetting send bit	*/
	//TODO: use a read-write operation to overwrite only the bit0
	IOWR(AV_SENDPACKET_0_BASE, 0x00, 0x00000000);
   408a8:	00800234 	movhi	r2,8
   408ac:	10840004 	addi	r2,r2,4096
   408b0:	10000035 	stwio	zero,0(r2)


	// Read Local IP from AV_ETH_CONFGi register
	 LocalIP = IORD(AV_ETH_CONFIG_0_BASE, 0x03);
   408b4:	00800234 	movhi	r2,8
   408b8:	10842304 	addi	r2,r2,4236
   408bc:	10800037 	ldwio	r2,0(r2)
   408c0:	e0bff915 	stw	r2,-28(fp)

	 // Recalculate checksum
	 Checksum =  CalcCheck((uint32_t)length,LocalIP, IPdst);
   408c4:	e13ffa0b 	ldhu	r4,-24(fp)
   408c8:	e17ff917 	ldw	r5,-28(fp)
   408cc:	e1bffb17 	ldw	r6,-20(fp)
   408d0:	00405780 	call	40578 <CalcCheck>
   408d4:	e0bff60d 	sth	r2,-40(fp)

	 // Write Ethernet Config
	 IOWR(AV_SENDPACKET_0_BASE, 0x01, Checksum);
   408d8:	e0fff60b 	ldhu	r3,-40(fp)
   408dc:	00800234 	movhi	r2,8
   408e0:	10840104 	addi	r2,r2,4100
   408e4:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_SENDPACKET_0_BASE, 0x02, UDPSrcPort);
   408e8:	e0fffe0b 	ldhu	r3,-8(fp)
   408ec:	00800234 	movhi	r2,8
   408f0:	10840204 	addi	r2,r2,4104
   408f4:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_SENDPACKET_0_BASE, 0x03, UDPDestPort);
   408f8:	e0ffff0b 	ldhu	r3,-4(fp)
   408fc:	00800234 	movhi	r2,8
   40900:	10840304 	addi	r2,r2,4108
   40904:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_SENDPACKET_0_BASE, 0x04, IPdst );
   40908:	e0fffb17 	ldw	r3,-20(fp)
   4090c:	00800234 	movhi	r2,8
   40910:	10840404 	addi	r2,r2,4112
   40914:	10c00035 	stwio	r3,0(r2)


	 LocalMACAddrLSB = (uint32_t)(MACdst & 0x00000000FFFFFFFF);
   40918:	e0bffc17 	ldw	r2,-16(fp)
   4091c:	e0bff815 	stw	r2,-32(fp)
	 #ifdef DEBUG_SND_PKT
	 printf("\nWriteIPConf Function\n");
	 printf("LocalMACAddrLSB :%x\n",LocalMACAddrLSB);
	 #endif

	 LocalMACAddrMSB = MACdst>> 32;
   40920:	e13ffd17 	ldw	r4,-12(fp)
   40924:	2004d83a 	srl	r2,r4,zero
   40928:	0007883a 	mov	r3,zero
   4092c:	e0bff715 	stw	r2,-36(fp)

	 #ifdef DEBUG_SND_PKT
	 printf("LocalMACAddrMSB :%x\n",LocalMACAddrMSB);
	 #endif

	 IOWR(AV_SENDPACKET_0_BASE, 0x05, LocalMACAddrLSB);
   40930:	e0fff817 	ldw	r3,-32(fp)
   40934:	00800234 	movhi	r2,8
   40938:	10840504 	addi	r2,r2,4116
   4093c:	10c00035 	stwio	r3,0(r2)
	 IOWR(AV_SENDPACKET_0_BASE, 0x06, LocalMACAddrMSB);
   40940:	e0fff717 	ldw	r3,-36(fp)
   40944:	00800234 	movhi	r2,8
   40948:	10840604 	addi	r2,r2,4120
   4094c:	10c00035 	stwio	r3,0(r2)


		/*	Generate pulse on the UDP send	*/
		//TODO: use a read-write operation to set only the bit0
 	IOWR(AV_SENDPACKET_0_BASE, 0x00, (length<<15)|0x00000001);
   40950:	e0bffa0b 	ldhu	r2,-24(fp)
   40954:	100493fa 	slli	r2,r2,15
   40958:	10c00054 	ori	r3,r2,1
   4095c:	00800234 	movhi	r2,8
   40960:	10840004 	addi	r2,r2,4096
   40964:	10c00035 	stwio	r3,0(r2)

	 	//	IOWR(AV_SENDPACKET_0_BASE, 0x00, 0xFFFFFFFF);


}
   40968:	e037883a 	mov	sp,fp
   4096c:	dfc00117 	ldw	ra,4(sp)
   40970:	df000017 	ldw	fp,0(sp)
   40974:	dec00204 	addi	sp,sp,8
   40978:	f800283a 	ret

0004097c <delay_ms>:

#define DELAY_CYCLE		1000


void delay_ms(int ms)
{
   4097c:	defffc04 	addi	sp,sp,-16
   40980:	df000315 	stw	fp,12(sp)
   40984:	df000304 	addi	fp,sp,12
   40988:	e13fff15 	stw	r4,-4(fp)
	int i,j;
	for( i = 0; i < ms; i++ )
   4098c:	e03ffe15 	stw	zero,-8(fp)
   40990:	00000b06 	br	409c0 <delay_ms+0x44>
	{
		for( j = 0; j < DELAY_CYCLE; j++ );
   40994:	e03ffd15 	stw	zero,-12(fp)
   40998:	00000306 	br	409a8 <delay_ms+0x2c>
   4099c:	e0bffd17 	ldw	r2,-12(fp)
   409a0:	10800044 	addi	r2,r2,1
   409a4:	e0bffd15 	stw	r2,-12(fp)
   409a8:	e0bffd17 	ldw	r2,-12(fp)
   409ac:	1080fa10 	cmplti	r2,r2,1000
   409b0:	103ffa1e 	bne	r2,zero,4099c <delay_ms+0x20>


void delay_ms(int ms)
{
	int i,j;
	for( i = 0; i < ms; i++ )
   409b4:	e0bffe17 	ldw	r2,-8(fp)
   409b8:	10800044 	addi	r2,r2,1
   409bc:	e0bffe15 	stw	r2,-8(fp)
   409c0:	e0fffe17 	ldw	r3,-8(fp)
   409c4:	e0bfff17 	ldw	r2,-4(fp)
   409c8:	18bff216 	blt	r3,r2,40994 <delay_ms+0x18>
	{
		for( j = 0; j < DELAY_CYCLE; j++ );
	}
}
   409cc:	e037883a 	mov	sp,fp
   409d0:	df000017 	ldw	fp,0(sp)
   409d4:	dec00104 	addi	sp,sp,4
   409d8:	f800283a 	ret

000409dc <receiveUDP_interrupt>:

static void receiveUDP_interrupt(void* context, alt_u32 id)
{
   409dc:	defff104 	addi	sp,sp,-60
   409e0:	dfc00e15 	stw	ra,56(sp)
   409e4:	df000d15 	stw	fp,52(sp)
   409e8:	df000d04 	addi	fp,sp,52
   409ec:	e13ffe15 	stw	r4,-8(fp)
   409f0:	e17fff15 	stw	r5,-4(fp)
	uint32_t packet[8];
	uint16_t cpt;

	IOWR(AV_CONFIG_REG_0_BASE, 0x0, 0x0004);
   409f4:	00c00234 	movhi	r3,8
   409f8:	18c41004 	addi	r3,r3,4160
   409fc:	00800104 	movi	r2,4
   40a00:	18800035 	stwio	r2,0(r3)
	packet[6]=IORD(AV_CONFIG_REG_0_BASE,0x07);
	packet[7]=IORD(AV_CONFIG_REG_0_BASE,0x08);
	*/

	// Packet Reception
	 for (cpt=0;cpt<8;cpt++)
   40a04:	e03ff50d 	sth	zero,-44(fp)
   40a08:	00001306 	br	40a58 <receiveUDP_interrupt+0x7c>
	 	  packet[cpt] = IORD(AV_CONFIG_REG_0_BASE, cpt+1);
   40a0c:	e13ff50b 	ldhu	r4,-44(fp)
   40a10:	e0bff50b 	ldhu	r2,-44(fp)
   40a14:	1085883a 	add	r2,r2,r2
   40a18:	1085883a 	add	r2,r2,r2
   40a1c:	1007883a 	mov	r3,r2
   40a20:	00800234 	movhi	r2,8
   40a24:	10841104 	addi	r2,r2,4164
   40a28:	1885883a 	add	r2,r3,r2
   40a2c:	10800037 	ldwio	r2,0(r2)
   40a30:	1007883a 	mov	r3,r2
   40a34:	2105883a 	add	r2,r4,r4
   40a38:	1085883a 	add	r2,r2,r2
   40a3c:	e13ff504 	addi	r4,fp,-44
   40a40:	1105883a 	add	r2,r2,r4
   40a44:	10800104 	addi	r2,r2,4
   40a48:	10c00015 	stw	r3,0(r2)
	packet[6]=IORD(AV_CONFIG_REG_0_BASE,0x07);
	packet[7]=IORD(AV_CONFIG_REG_0_BASE,0x08);
	*/

	// Packet Reception
	 for (cpt=0;cpt<8;cpt++)
   40a4c:	e0bff50b 	ldhu	r2,-44(fp)
   40a50:	10800044 	addi	r2,r2,1
   40a54:	e0bff50d 	sth	r2,-44(fp)
   40a58:	e0bff50b 	ldhu	r2,-44(fp)
   40a5c:	10800230 	cmpltui	r2,r2,8
   40a60:	103fea1e 	bne	r2,zero,40a0c <receiveUDP_interrupt+0x30>
	for (cpt=0;cpt<8;cpt++)
		printf("packet[%d]:%lx ",cpt,packet[cpt]);
	printf("\n");
	#endif

	sendCommandPacket_UDP(packet,32);
   40a64:	e13ff604 	addi	r4,fp,-40
   40a68:	01400804 	movi	r5,32
   40a6c:	00407540 	call	40754 <sendCommandPacket_UDP>

	SendCommandPacket(packet, 32, 0xc0a8000A, MAC_BROADCAST,0x0000fde2);
   40a70:	e13ff604 	addi	r4,fp,-40
   40a74:	00bf7894 	movui	r2,64994
   40a78:	d8800115 	stw	r2,4(sp)
   40a7c:	00bfffd4 	movui	r2,65535
   40a80:	d8800015 	stw	r2,0(sp)
   40a84:	01ffffc4 	movi	r7,-1
   40a88:	01400804 	movi	r5,32
   40a8c:	01b02a34 	movhi	r6,49320
   40a90:	31800284 	addi	r6,r6,10
   40a94:	00406040 	call	40604 <SendCommandPacket>

	SendCommandPacket(packet, 32, 0xc0a8001F, MAC_BROADCAST,0x0000fde5);
   40a98:	e13ff604 	addi	r4,fp,-40
   40a9c:	00bf7954 	movui	r2,64997
   40aa0:	d8800115 	stw	r2,4(sp)
   40aa4:	00bfffd4 	movui	r2,65535
   40aa8:	d8800015 	stw	r2,0(sp)
   40aac:	01ffffc4 	movi	r7,-1
   40ab0:	01400804 	movi	r5,32
   40ab4:	01b02a34 	movhi	r6,49320
   40ab8:	318007c4 	addi	r6,r6,31
   40abc:	00406040 	call	40604 <SendCommandPacket>


	IOWR(AV_CONFIG_REG_0_BASE, 0x0, 0x0000);
   40ac0:	00800234 	movhi	r2,8
   40ac4:	10841004 	addi	r2,r2,4160
   40ac8:	10000035 	stwio	zero,0(r2)
}
   40acc:	e037883a 	mov	sp,fp
   40ad0:	dfc00117 	ldw	ra,4(sp)
   40ad4:	df000017 	ldw	fp,0(sp)
   40ad8:	dec00204 	addi	sp,sp,8
   40adc:	f800283a 	ret

00040ae0 <main>:

int main()
{
   40ae0:	deffda04 	addi	sp,sp,-152
   40ae4:	dfc02515 	stw	ra,148(sp)
   40ae8:	df002415 	stw	fp,144(sp)
   40aec:	df002404 	addi	fp,sp,144
		uint16_t Checksum;
		uint32_t LocalMACAddrLSB=0;
   40af0:	e03fde15 	stw	zero,-136(fp)
		uint32_t LocalMACAddrMSB=0;
   40af4:	e03fdd15 	stw	zero,-140(fp)
		struct ETH_struct EthConf;
		int cpt;

		uint32_t packet[8] ={0x1A3C202A,0x00C0D2F0,0x00B22000,0x25D10010,0xD00020D0,0x00D0AAC5,0x20000405,0x08194200};
   40af8:	00868f34 	movhi	r2,6716
   40afc:	10880a84 	addi	r2,r2,8234
   40b00:	e0bfe815 	stw	r2,-96(fp)
   40b04:	00803074 	movhi	r2,193
   40b08:	10b4bc04 	addi	r2,r2,-11536
   40b0c:	e0bfe915 	stw	r2,-92(fp)
   40b10:	00802cb4 	movhi	r2,178
   40b14:	10880004 	addi	r2,r2,8192
   40b18:	e0bfea15 	stw	r2,-88(fp)
   40b1c:	00897474 	movhi	r2,9681
   40b20:	10800404 	addi	r2,r2,16
   40b24:	e0bfeb15 	stw	r2,-84(fp)
   40b28:	00b40034 	movhi	r2,53248
   40b2c:	10883404 	addi	r2,r2,8400
   40b30:	e0bfec15 	stw	r2,-80(fp)
   40b34:	00803474 	movhi	r2,209
   40b38:	10aab144 	addi	r2,r2,-21819
   40b3c:	e0bfed15 	stw	r2,-76(fp)
   40b40:	00880034 	movhi	r2,8192
   40b44:	10810144 	addi	r2,r2,1029
   40b48:	e0bfee15 	stw	r2,-72(fp)
   40b4c:	00820674 	movhi	r2,2073
   40b50:	10908004 	addi	r2,r2,16896
   40b54:	e0bfef15 	stw	r2,-68(fp)
		uint32_t packet2[8]={0x00C0D2F0,0xC0000405,0xD00020FE,0x1A3C202A,0x00FF2000,0xFFD10010,0x081942C0,0x00D0AAC5};
   40b58:	00803074 	movhi	r2,193
   40b5c:	10b4bc04 	addi	r2,r2,-11536
   40b60:	e0bff015 	stw	r2,-64(fp)
   40b64:	00b00034 	movhi	r2,49152
   40b68:	10810144 	addi	r2,r2,1029
   40b6c:	e0bff115 	stw	r2,-60(fp)
   40b70:	00b40034 	movhi	r2,53248
   40b74:	10883f84 	addi	r2,r2,8446
   40b78:	e0bff215 	stw	r2,-56(fp)
   40b7c:	00868f34 	movhi	r2,6716
   40b80:	10880a84 	addi	r2,r2,8234
   40b84:	e0bff315 	stw	r2,-52(fp)
   40b88:	00803ff4 	movhi	r2,255
   40b8c:	10880004 	addi	r2,r2,8192
   40b90:	e0bff415 	stw	r2,-48(fp)
   40b94:	00bff474 	movhi	r2,65489
   40b98:	10800404 	addi	r2,r2,16
   40b9c:	e0bff515 	stw	r2,-44(fp)
   40ba0:	00820674 	movhi	r2,2073
   40ba4:	1090b004 	addi	r2,r2,17088
   40ba8:	e0bff615 	stw	r2,-40(fp)
   40bac:	00803474 	movhi	r2,209
   40bb0:	10aab144 	addi	r2,r2,-21819
   40bb4:	e0bff715 	stw	r2,-36(fp)
		uint32_t packet3[8]={0xD00020D0,0x00B22000,0x1A3C202A,0xFF3C202A,0x25D10010,0x08194200,0x081942C0,0x00D0AAC5};
   40bb8:	00b40034 	movhi	r2,53248
   40bbc:	10883404 	addi	r2,r2,8400
   40bc0:	e0bff815 	stw	r2,-32(fp)
   40bc4:	00802cb4 	movhi	r2,178
   40bc8:	10880004 	addi	r2,r2,8192
   40bcc:	e0bff915 	stw	r2,-28(fp)
   40bd0:	00868f34 	movhi	r2,6716
   40bd4:	10880a84 	addi	r2,r2,8234
   40bd8:	e0bffa15 	stw	r2,-24(fp)
   40bdc:	00bfcf34 	movhi	r2,65340
   40be0:	10880a84 	addi	r2,r2,8234
   40be4:	e0bffb15 	stw	r2,-20(fp)
   40be8:	00897474 	movhi	r2,9681
   40bec:	10800404 	addi	r2,r2,16
   40bf0:	e0bffc15 	stw	r2,-16(fp)
   40bf4:	00820674 	movhi	r2,2073
   40bf8:	10908004 	addi	r2,r2,16896
   40bfc:	e0bffd15 	stw	r2,-12(fp)
   40c00:	00820674 	movhi	r2,2073
   40c04:	1090b004 	addi	r2,r2,17088
   40c08:	e0bffe15 	stw	r2,-8(fp)
   40c0c:	00803474 	movhi	r2,209
   40c10:	10aab144 	addi	r2,r2,-21819
   40c14:	e0bfff15 	stw	r2,-4(fp)


		printf("Hello from Nios II!\n");
   40c18:	01000174 	movhi	r4,5
   40c1c:	21352804 	addi	r4,r4,-11104
   40c20:	0040e7c0 	call	40e7c <puts>

		EthConf.LocalPort = 0x0000AAAA;
   40c24:	00aaaa84 	movi	r2,-21846
   40c28:	e0bfe08d 	sth	r2,-126(fp)
		EthConf.RemotePort = 0x0000fde2;
   40c2c:	00bf7884 	movi	r2,-542
   40c30:	e0bfe10d 	sth	r2,-124(fp)

		EthConf.LocalIP = 0xc0a80004;
   40c34:	00b02a34 	movhi	r2,49320
   40c38:	10800104 	addi	r2,r2,4
   40c3c:	e0bfe215 	stw	r2,-120(fp)
		EthConf.RemoteIP = 0xAC1B01EB;
   40c40:	00ab06f4 	movhi	r2,44059
   40c44:	10807ac4 	addi	r2,r2,491
   40c48:	e0bfe315 	stw	r2,-116(fp)

		EthConf.LocalMACAddr  =  0x74ea3a851bd7ull;
   40c4c:	008ea174 	movhi	r2,14981
   40c50:	1086f5c4 	addi	r2,r2,7127
   40c54:	e0bfe415 	stw	r2,-112(fp)
   40c58:	009d3a84 	movi	r2,29930
   40c5c:	e0bfe515 	stw	r2,-108(fp)
		EthConf.RemoteMACAddr  = 0xD4BED93049D0ull;
   40c60:	00b64c34 	movhi	r2,55600
   40c64:	10927404 	addi	r2,r2,18896
   40c68:	e0bfe615 	stw	r2,-104(fp)
   40c6c:	00b52f94 	movui	r2,54462
   40c70:	e0bfe715 	stw	r2,-100(fp)


		EthConf.Checksum = CalcCheck(32,EthConf.LocalIP,EthConf.RemoteIP);
   40c74:	e17fe217 	ldw	r5,-120(fp)
   40c78:	e1bfe317 	ldw	r6,-116(fp)
   40c7c:	01000804 	movi	r4,32
   40c80:	00405780 	call	40578 <CalcCheck>
   40c84:	e0bfe00d 	sth	r2,-128(fp)


		WriteIPConf(&EthConf);
   40c88:	e13fe004 	addi	r4,fp,-128
   40c8c:	00404500 	call	40450 <WriteIPConf>

		ReadIPConf(&EthConf);
   40c90:	e13fe004 	addi	r4,fp,-128
   40c94:	00402e00 	call	402e0 <ReadIPConf>
		PrintIPConf(&EthConf);
   40c98:	e13fe004 	addi	r4,fp,-128
   40c9c:	00401f00 	call	401f0 <PrintIPConf>

		alt_irq_register( AV_CONFIG_REG_0_IRQ, NULL, (alt_isr_func) receiveUDP_interrupt );
   40ca0:	01800134 	movhi	r6,4
   40ca4:	31827704 	addi	r6,r6,2524
   40ca8:	01000084 	movi	r4,2
   40cac:	000b883a 	mov	r5,zero
   40cb0:	004aa940 	call	4aa94 <alt_irq_register>

		 // Write Video Config
		// IP local save in AV_ETH_config + 0x03
		Checksum =  CalcCheck((uint32_t)512, IORD(AV_ETH_CONFIG_0_BASE, 0x03), 0xAC1B01EB);
   40cb4:	00800234 	movhi	r2,8
   40cb8:	10842304 	addi	r2,r2,4236
   40cbc:	10800037 	ldwio	r2,0(r2)
   40cc0:	100b883a 	mov	r5,r2
   40cc4:	01008004 	movi	r4,512
   40cc8:	01ab06f4 	movhi	r6,44059
   40ccc:	31807ac4 	addi	r6,r6,491
   40cd0:	00405780 	call	40578 <CalcCheck>
   40cd4:	e0bfdf0d 	sth	r2,-132(fp)
		IOWR(AV_SENDPACKET_0_BASE, 0x00, (0x200<<16));
   40cd8:	00c00234 	movhi	r3,8
   40cdc:	18c40004 	addi	r3,r3,4096
   40ce0:	00808034 	movhi	r2,512
   40ce4:	18800035 	stwio	r2,0(r3)
		IOWR(AV_SENDPACKET_0_BASE, 0x01, Checksum);
   40ce8:	e0ffdf0b 	ldhu	r3,-132(fp)
   40cec:	00800234 	movhi	r2,8
   40cf0:	10840104 	addi	r2,r2,4100
   40cf4:	10c00035 	stwio	r3,0(r2)
		IOWR(AV_SENDPACKET_0_BASE, 0x02, 0x0000BBBB);
   40cf8:	00c00234 	movhi	r3,8
   40cfc:	18c40204 	addi	r3,r3,4104
   40d00:	00aeeed4 	movui	r2,48059
   40d04:	18800035 	stwio	r2,0(r3)
		IOWR(AV_SENDPACKET_0_BASE, 0x03, 0x0000fde9);
   40d08:	00c00234 	movhi	r3,8
   40d0c:	18c40304 	addi	r3,r3,4108
   40d10:	00bf7a54 	movui	r2,65001
   40d14:	18800035 	stwio	r2,0(r3)
		IOWR(AV_SENDPACKET_0_BASE, 0x04, 0xAC1B01EB );
   40d18:	00c00234 	movhi	r3,8
   40d1c:	18c40404 	addi	r3,r3,4112
   40d20:	00ab06f4 	movhi	r2,44059
   40d24:	10807ac4 	addi	r2,r2,491
   40d28:	18800035 	stwio	r2,0(r3)

		LocalMACAddrLSB = (uint32_t)(0xD4BED93049D0ull & 0x00000000FFFFFFFF);
   40d2c:	00b64c34 	movhi	r2,55600
   40d30:	10927404 	addi	r2,r2,18896
   40d34:	e0bfde15 	stw	r2,-136(fp)
		LocalMACAddrMSB = 0xD4BED93049D0ull>> 32;
   40d38:	00b52f94 	movui	r2,54462
   40d3c:	e0bfdd15 	stw	r2,-140(fp)

		IOWR(AV_SENDPACKET_0_BASE, 0x05, LocalMACAddrLSB);
   40d40:	e0ffde17 	ldw	r3,-136(fp)
   40d44:	00800234 	movhi	r2,8
   40d48:	10840504 	addi	r2,r2,4116
   40d4c:	10c00035 	stwio	r3,0(r2)
		IOWR(AV_SENDPACKET_0_BASE, 0x06, LocalMACAddrMSB);
   40d50:	e0ffdd17 	ldw	r3,-140(fp)
   40d54:	00800234 	movhi	r2,8
   40d58:	10840604 	addi	r2,r2,4120
   40d5c:	10c00035 	stwio	r3,0(r2)
			delay_ms(500);
			SendCommandPacket(packet, 32, 0xAC1B01EB,  0xD4BED93049D0ull,0x0000fde9);
			delay_ms(500);
	 */

		}
   40d60:	003fff06 	br	40d60 <main+0x280>

00040d64 <printf>:
   40d64:	defffb04 	addi	sp,sp,-20
   40d68:	dfc00115 	stw	ra,4(sp)
   40d6c:	d9400215 	stw	r5,8(sp)
   40d70:	d9800315 	stw	r6,12(sp)
   40d74:	d9c00415 	stw	r7,16(sp)
   40d78:	00800174 	movhi	r2,5
   40d7c:	10bc8504 	addi	r2,r2,-3564
   40d80:	10c00017 	ldw	r3,0(r2)
   40d84:	200b883a 	mov	r5,r4
   40d88:	d8800204 	addi	r2,sp,8
   40d8c:	19000217 	ldw	r4,8(r3)
   40d90:	100d883a 	mov	r6,r2
   40d94:	d8800015 	stw	r2,0(sp)
   40d98:	0042e200 	call	42e20 <__vfprintf_internal>
   40d9c:	dfc00117 	ldw	ra,4(sp)
   40da0:	dec00504 	addi	sp,sp,20
   40da4:	f800283a 	ret

00040da8 <_printf_r>:
   40da8:	defffc04 	addi	sp,sp,-16
   40dac:	dfc00115 	stw	ra,4(sp)
   40db0:	d9800215 	stw	r6,8(sp)
   40db4:	d9c00315 	stw	r7,12(sp)
   40db8:	280d883a 	mov	r6,r5
   40dbc:	21400217 	ldw	r5,8(r4)
   40dc0:	d8c00204 	addi	r3,sp,8
   40dc4:	180f883a 	mov	r7,r3
   40dc8:	d8c00015 	stw	r3,0(sp)
   40dcc:	0040f5c0 	call	40f5c <___vfprintf_internal_r>
   40dd0:	dfc00117 	ldw	ra,4(sp)
   40dd4:	dec00404 	addi	sp,sp,16
   40dd8:	f800283a 	ret

00040ddc <_puts_r>:
   40ddc:	defff604 	addi	sp,sp,-40
   40de0:	dc400715 	stw	r17,28(sp)
   40de4:	2023883a 	mov	r17,r4
   40de8:	2809883a 	mov	r4,r5
   40dec:	dfc00915 	stw	ra,36(sp)
   40df0:	dcc00815 	stw	r19,32(sp)
   40df4:	2827883a 	mov	r19,r5
   40df8:	0040e900 	call	40e90 <strlen>
   40dfc:	89400217 	ldw	r5,8(r17)
   40e00:	00c00174 	movhi	r3,5
   40e04:	18f52d04 	addi	r3,r3,-11084
   40e08:	01c00044 	movi	r7,1
   40e0c:	12000044 	addi	r8,r2,1
   40e10:	d8c00515 	stw	r3,20(sp)
   40e14:	d9c00615 	stw	r7,24(sp)
   40e18:	d8c00304 	addi	r3,sp,12
   40e1c:	01c00084 	movi	r7,2
   40e20:	8809883a 	mov	r4,r17
   40e24:	d80d883a 	mov	r6,sp
   40e28:	d8c00015 	stw	r3,0(sp)
   40e2c:	dcc00315 	stw	r19,12(sp)
   40e30:	da000215 	stw	r8,8(sp)
   40e34:	d9c00115 	stw	r7,4(sp)
   40e38:	d8800415 	stw	r2,16(sp)
   40e3c:	00450dc0 	call	450dc <__sfvwrite_r>
   40e40:	00ffffc4 	movi	r3,-1
   40e44:	10000626 	beq	r2,zero,40e60 <_puts_r+0x84>
   40e48:	1805883a 	mov	r2,r3
   40e4c:	dfc00917 	ldw	ra,36(sp)
   40e50:	dcc00817 	ldw	r19,32(sp)
   40e54:	dc400717 	ldw	r17,28(sp)
   40e58:	dec00a04 	addi	sp,sp,40
   40e5c:	f800283a 	ret
   40e60:	00c00284 	movi	r3,10
   40e64:	1805883a 	mov	r2,r3
   40e68:	dfc00917 	ldw	ra,36(sp)
   40e6c:	dcc00817 	ldw	r19,32(sp)
   40e70:	dc400717 	ldw	r17,28(sp)
   40e74:	dec00a04 	addi	sp,sp,40
   40e78:	f800283a 	ret

00040e7c <puts>:
   40e7c:	00800174 	movhi	r2,5
   40e80:	10bc8504 	addi	r2,r2,-3564
   40e84:	200b883a 	mov	r5,r4
   40e88:	11000017 	ldw	r4,0(r2)
   40e8c:	0040ddc1 	jmpi	40ddc <_puts_r>

00040e90 <strlen>:
   40e90:	208000cc 	andi	r2,r4,3
   40e94:	2011883a 	mov	r8,r4
   40e98:	1000161e 	bne	r2,zero,40ef4 <strlen+0x64>
   40e9c:	20c00017 	ldw	r3,0(r4)
   40ea0:	017fbff4 	movhi	r5,65279
   40ea4:	297fbfc4 	addi	r5,r5,-257
   40ea8:	01e02074 	movhi	r7,32897
   40eac:	39e02004 	addi	r7,r7,-32640
   40eb0:	1945883a 	add	r2,r3,r5
   40eb4:	11c4703a 	and	r2,r2,r7
   40eb8:	00c6303a 	nor	r3,zero,r3
   40ebc:	1886703a 	and	r3,r3,r2
   40ec0:	18000c1e 	bne	r3,zero,40ef4 <strlen+0x64>
   40ec4:	280d883a 	mov	r6,r5
   40ec8:	380b883a 	mov	r5,r7
   40ecc:	21000104 	addi	r4,r4,4
   40ed0:	20800017 	ldw	r2,0(r4)
   40ed4:	1187883a 	add	r3,r2,r6
   40ed8:	1946703a 	and	r3,r3,r5
   40edc:	0084303a 	nor	r2,zero,r2
   40ee0:	10c4703a 	and	r2,r2,r3
   40ee4:	103ff926 	beq	r2,zero,40ecc <strlen+0x3c>
   40ee8:	20800007 	ldb	r2,0(r4)
   40eec:	10000326 	beq	r2,zero,40efc <strlen+0x6c>
   40ef0:	21000044 	addi	r4,r4,1
   40ef4:	20800007 	ldb	r2,0(r4)
   40ef8:	103ffd1e 	bne	r2,zero,40ef0 <strlen+0x60>
   40efc:	2205c83a 	sub	r2,r4,r8
   40f00:	f800283a 	ret

00040f04 <__sprint_r>:
   40f04:	30800217 	ldw	r2,8(r6)
   40f08:	defffe04 	addi	sp,sp,-8
   40f0c:	dc000015 	stw	r16,0(sp)
   40f10:	dfc00115 	stw	ra,4(sp)
   40f14:	3021883a 	mov	r16,r6
   40f18:	0007883a 	mov	r3,zero
   40f1c:	1000061e 	bne	r2,zero,40f38 <__sprint_r+0x34>
   40f20:	1805883a 	mov	r2,r3
   40f24:	30000115 	stw	zero,4(r6)
   40f28:	dfc00117 	ldw	ra,4(sp)
   40f2c:	dc000017 	ldw	r16,0(sp)
   40f30:	dec00204 	addi	sp,sp,8
   40f34:	f800283a 	ret
   40f38:	00450dc0 	call	450dc <__sfvwrite_r>
   40f3c:	1007883a 	mov	r3,r2
   40f40:	1805883a 	mov	r2,r3
   40f44:	80000115 	stw	zero,4(r16)
   40f48:	80000215 	stw	zero,8(r16)
   40f4c:	dfc00117 	ldw	ra,4(sp)
   40f50:	dc000017 	ldw	r16,0(sp)
   40f54:	dec00204 	addi	sp,sp,8
   40f58:	f800283a 	ret

00040f5c <___vfprintf_internal_r>:
   40f5c:	defea304 	addi	sp,sp,-1396
   40f60:	dd815915 	stw	r22,1380(sp)
   40f64:	dc015315 	stw	r16,1356(sp)
   40f68:	d9c15215 	stw	r7,1352(sp)
   40f6c:	dfc15c15 	stw	ra,1392(sp)
   40f70:	df015b15 	stw	fp,1388(sp)
   40f74:	ddc15a15 	stw	r23,1384(sp)
   40f78:	dd415815 	stw	r21,1376(sp)
   40f7c:	dd015715 	stw	r20,1372(sp)
   40f80:	dcc15615 	stw	r19,1368(sp)
   40f84:	dc815515 	stw	r18,1364(sp)
   40f88:	dc415415 	stw	r17,1360(sp)
   40f8c:	282d883a 	mov	r22,r5
   40f90:	3021883a 	mov	r16,r6
   40f94:	d9015015 	stw	r4,1344(sp)
   40f98:	00457000 	call	45700 <_localeconv_r>
   40f9c:	10800017 	ldw	r2,0(r2)
   40fa0:	d9c15217 	ldw	r7,1352(sp)
   40fa4:	d8814a15 	stw	r2,1320(sp)
   40fa8:	d8815017 	ldw	r2,1344(sp)
   40fac:	10000226 	beq	r2,zero,40fb8 <___vfprintf_internal_r+0x5c>
   40fb0:	10800e17 	ldw	r2,56(r2)
   40fb4:	10020d26 	beq	r2,zero,417ec <___vfprintf_internal_r+0x890>
   40fb8:	b080030b 	ldhu	r2,12(r22)
   40fbc:	1080020c 	andi	r2,r2,8
   40fc0:	10020e26 	beq	r2,zero,417fc <___vfprintf_internal_r+0x8a0>
   40fc4:	b0800417 	ldw	r2,16(r22)
   40fc8:	10020c26 	beq	r2,zero,417fc <___vfprintf_internal_r+0x8a0>
   40fcc:	b200030b 	ldhu	r8,12(r22)
   40fd0:	00800284 	movi	r2,10
   40fd4:	40c0068c 	andi	r3,r8,26
   40fd8:	18802f1e 	bne	r3,r2,41098 <___vfprintf_internal_r+0x13c>
   40fdc:	b080038f 	ldh	r2,14(r22)
   40fe0:	10002d16 	blt	r2,zero,41098 <___vfprintf_internal_r+0x13c>
   40fe4:	b240038b 	ldhu	r9,14(r22)
   40fe8:	b2800717 	ldw	r10,28(r22)
   40fec:	b2c00917 	ldw	r11,36(r22)
   40ff0:	d9015017 	ldw	r4,1344(sp)
   40ff4:	dc402a04 	addi	r17,sp,168
   40ff8:	d8804104 	addi	r2,sp,260
   40ffc:	00c10004 	movi	r3,1024
   41000:	423fff4c 	andi	r8,r8,65533
   41004:	800d883a 	mov	r6,r16
   41008:	880b883a 	mov	r5,r17
   4100c:	da002d0d 	sth	r8,180(sp)
   41010:	da402d8d 	sth	r9,182(sp)
   41014:	da803115 	stw	r10,196(sp)
   41018:	dac03315 	stw	r11,204(sp)
   4101c:	d8802e15 	stw	r2,184(sp)
   41020:	d8c02f15 	stw	r3,188(sp)
   41024:	d8802a15 	stw	r2,168(sp)
   41028:	d8c02c15 	stw	r3,176(sp)
   4102c:	d8003015 	stw	zero,192(sp)
   41030:	0040f5c0 	call	40f5c <___vfprintf_internal_r>
   41034:	d8814c15 	stw	r2,1328(sp)
   41038:	10000416 	blt	r2,zero,4104c <___vfprintf_internal_r+0xf0>
   4103c:	d9015017 	ldw	r4,1344(sp)
   41040:	880b883a 	mov	r5,r17
   41044:	00447780 	call	44778 <_fflush_r>
   41048:	1002321e 	bne	r2,zero,41914 <___vfprintf_internal_r+0x9b8>
   4104c:	d8802d0b 	ldhu	r2,180(sp)
   41050:	1080100c 	andi	r2,r2,64
   41054:	10000326 	beq	r2,zero,41064 <___vfprintf_internal_r+0x108>
   41058:	b080030b 	ldhu	r2,12(r22)
   4105c:	10801014 	ori	r2,r2,64
   41060:	b080030d 	sth	r2,12(r22)
   41064:	d8814c17 	ldw	r2,1328(sp)
   41068:	dfc15c17 	ldw	ra,1392(sp)
   4106c:	df015b17 	ldw	fp,1388(sp)
   41070:	ddc15a17 	ldw	r23,1384(sp)
   41074:	dd815917 	ldw	r22,1380(sp)
   41078:	dd415817 	ldw	r21,1376(sp)
   4107c:	dd015717 	ldw	r20,1372(sp)
   41080:	dcc15617 	ldw	r19,1368(sp)
   41084:	dc815517 	ldw	r18,1364(sp)
   41088:	dc415417 	ldw	r17,1360(sp)
   4108c:	dc015317 	ldw	r16,1356(sp)
   41090:	dec15d04 	addi	sp,sp,1396
   41094:	f800283a 	ret
   41098:	0005883a 	mov	r2,zero
   4109c:	0007883a 	mov	r3,zero
   410a0:	dd401a04 	addi	r21,sp,104
   410a4:	d8814315 	stw	r2,1292(sp)
   410a8:	802f883a 	mov	r23,r16
   410ac:	d8c14415 	stw	r3,1296(sp)
   410b0:	d8014c15 	stw	zero,1328(sp)
   410b4:	d8014915 	stw	zero,1316(sp)
   410b8:	d8014515 	stw	zero,1300(sp)
   410bc:	d8014815 	stw	zero,1312(sp)
   410c0:	dd400d15 	stw	r21,52(sp)
   410c4:	d8000f15 	stw	zero,60(sp)
   410c8:	d8000e15 	stw	zero,56(sp)
   410cc:	b8800007 	ldb	r2,0(r23)
   410d0:	10001926 	beq	r2,zero,41138 <___vfprintf_internal_r+0x1dc>
   410d4:	00c00944 	movi	r3,37
   410d8:	10c01726 	beq	r2,r3,41138 <___vfprintf_internal_r+0x1dc>
   410dc:	b821883a 	mov	r16,r23
   410e0:	00000106 	br	410e8 <___vfprintf_internal_r+0x18c>
   410e4:	10c00326 	beq	r2,r3,410f4 <___vfprintf_internal_r+0x198>
   410e8:	84000044 	addi	r16,r16,1
   410ec:	80800007 	ldb	r2,0(r16)
   410f0:	103ffc1e 	bne	r2,zero,410e4 <___vfprintf_internal_r+0x188>
   410f4:	85e7c83a 	sub	r19,r16,r23
   410f8:	98000e26 	beq	r19,zero,41134 <___vfprintf_internal_r+0x1d8>
   410fc:	dc800f17 	ldw	r18,60(sp)
   41100:	dc400e17 	ldw	r17,56(sp)
   41104:	008001c4 	movi	r2,7
   41108:	94e5883a 	add	r18,r18,r19
   4110c:	8c400044 	addi	r17,r17,1
   41110:	adc00015 	stw	r23,0(r21)
   41114:	dc800f15 	stw	r18,60(sp)
   41118:	acc00115 	stw	r19,4(r21)
   4111c:	dc400e15 	stw	r17,56(sp)
   41120:	14428b16 	blt	r2,r17,41b50 <___vfprintf_internal_r+0xbf4>
   41124:	ad400204 	addi	r21,r21,8
   41128:	d9014c17 	ldw	r4,1328(sp)
   4112c:	24c9883a 	add	r4,r4,r19
   41130:	d9014c15 	stw	r4,1328(sp)
   41134:	802f883a 	mov	r23,r16
   41138:	b8800007 	ldb	r2,0(r23)
   4113c:	10013c26 	beq	r2,zero,41630 <___vfprintf_internal_r+0x6d4>
   41140:	bdc00044 	addi	r23,r23,1
   41144:	d8000405 	stb	zero,16(sp)
   41148:	b8c00007 	ldb	r3,0(r23)
   4114c:	04ffffc4 	movi	r19,-1
   41150:	d8014d15 	stw	zero,1332(sp)
   41154:	d8014b15 	stw	zero,1324(sp)
   41158:	d8c14e15 	stw	r3,1336(sp)
   4115c:	bdc00044 	addi	r23,r23,1
   41160:	d9414e17 	ldw	r5,1336(sp)
   41164:	00801604 	movi	r2,88
   41168:	28fff804 	addi	r3,r5,-32
   4116c:	10c06036 	bltu	r2,r3,412f0 <___vfprintf_internal_r+0x394>
   41170:	18c5883a 	add	r2,r3,r3
   41174:	1085883a 	add	r2,r2,r2
   41178:	00c00134 	movhi	r3,4
   4117c:	18c46304 	addi	r3,r3,4492
   41180:	10c5883a 	add	r2,r2,r3
   41184:	11000017 	ldw	r4,0(r2)
   41188:	2000683a 	jmp	r4
   4118c:	00042100 	call	4210 <__reset-0x3bdf0>
   41190:	000412f0 	cmpltui	zero,zero,4171
   41194:	000412f0 	cmpltui	zero,zero,4171
   41198:	000420ec 	andhi	zero,zero,4227
   4119c:	000412f0 	cmpltui	zero,zero,4171
   411a0:	000412f0 	cmpltui	zero,zero,4171
   411a4:	000412f0 	cmpltui	zero,zero,4171
   411a8:	000412f0 	cmpltui	zero,zero,4171
   411ac:	000412f0 	cmpltui	zero,zero,4171
   411b0:	000412f0 	cmpltui	zero,zero,4171
   411b4:	00041ecc 	andi	zero,zero,4219
   411b8:	000420dc 	xori	zero,zero,4227
   411bc:	000412f0 	cmpltui	zero,zero,4171
   411c0:	00041ee4 	muli	zero,zero,4219
   411c4:	00042184 	movi	zero,4230
   411c8:	000412f0 	cmpltui	zero,zero,4171
   411cc:	00042170 	cmpltui	zero,zero,4229
   411d0:	0004212c 	andhi	zero,zero,4228
   411d4:	0004212c 	andhi	zero,zero,4228
   411d8:	0004212c 	andhi	zero,zero,4228
   411dc:	0004212c 	andhi	zero,zero,4228
   411e0:	0004212c 	andhi	zero,zero,4228
   411e4:	0004212c 	andhi	zero,zero,4228
   411e8:	0004212c 	andhi	zero,zero,4228
   411ec:	0004212c 	andhi	zero,zero,4228
   411f0:	0004212c 	andhi	zero,zero,4228
   411f4:	000412f0 	cmpltui	zero,zero,4171
   411f8:	000412f0 	cmpltui	zero,zero,4171
   411fc:	000412f0 	cmpltui	zero,zero,4171
   41200:	000412f0 	cmpltui	zero,zero,4171
   41204:	000412f0 	cmpltui	zero,zero,4171
   41208:	000412f0 	cmpltui	zero,zero,4171
   4120c:	000412f0 	cmpltui	zero,zero,4171
   41210:	000412f0 	cmpltui	zero,zero,4171
   41214:	000412f0 	cmpltui	zero,zero,4171
   41218:	000412f0 	cmpltui	zero,zero,4171
   4121c:	00041948 	cmpgei	zero,zero,4197
   41220:	00041fb4 	movhi	zero,4222
   41224:	000412f0 	cmpltui	zero,zero,4171
   41228:	00041fb4 	movhi	zero,4222
   4122c:	000412f0 	cmpltui	zero,zero,4171
   41230:	000412f0 	cmpltui	zero,zero,4171
   41234:	000412f0 	cmpltui	zero,zero,4171
   41238:	000412f0 	cmpltui	zero,zero,4171
   4123c:	00042118 	cmpnei	zero,zero,4228
   41240:	000412f0 	cmpltui	zero,zero,4171
   41244:	000412f0 	cmpltui	zero,zero,4171
   41248:	000419fc 	xorhi	zero,zero,4199
   4124c:	000412f0 	cmpltui	zero,zero,4171
   41250:	000412f0 	cmpltui	zero,zero,4171
   41254:	000412f0 	cmpltui	zero,zero,4171
   41258:	000412f0 	cmpltui	zero,zero,4171
   4125c:	000412f0 	cmpltui	zero,zero,4171
   41260:	00041a48 	cmpgei	zero,zero,4201
   41264:	000412f0 	cmpltui	zero,zero,4171
   41268:	000412f0 	cmpltui	zero,zero,4171
   4126c:	00042068 	cmpgeui	zero,zero,4225
   41270:	000412f0 	cmpltui	zero,zero,4171
   41274:	000412f0 	cmpltui	zero,zero,4171
   41278:	000412f0 	cmpltui	zero,zero,4171
   4127c:	000412f0 	cmpltui	zero,zero,4171
   41280:	000412f0 	cmpltui	zero,zero,4171
   41284:	000412f0 	cmpltui	zero,zero,4171
   41288:	000412f0 	cmpltui	zero,zero,4171
   4128c:	000412f0 	cmpltui	zero,zero,4171
   41290:	000412f0 	cmpltui	zero,zero,4171
   41294:	000412f0 	cmpltui	zero,zero,4171
   41298:	0004203c 	xorhi	zero,zero,4224
   4129c:	00041954 	movui	zero,4197
   412a0:	00041fb4 	movhi	zero,4222
   412a4:	00041fb4 	movhi	zero,4222
   412a8:	00041fb4 	movhi	zero,4222
   412ac:	00041fa0 	cmpeqi	zero,zero,4222
   412b0:	00041954 	movui	zero,4197
   412b4:	000412f0 	cmpltui	zero,zero,4171
   412b8:	000412f0 	cmpltui	zero,zero,4171
   412bc:	00041f28 	cmpgeui	zero,zero,4220
   412c0:	000412f0 	cmpltui	zero,zero,4171
   412c4:	00041ef8 	rdprs	zero,zero,4219
   412c8:	00041a08 	cmpgei	zero,zero,4200
   412cc:	00041f58 	cmpnei	zero,zero,4221
   412d0:	00041f44 	movi	zero,4221
   412d4:	000412f0 	cmpltui	zero,zero,4171
   412d8:	000421ec 	andhi	zero,zero,4231
   412dc:	000412f0 	cmpltui	zero,zero,4171
   412e0:	00041a54 	movui	zero,4201
   412e4:	000412f0 	cmpltui	zero,zero,4171
   412e8:	000412f0 	cmpltui	zero,zero,4171
   412ec:	000420cc 	andi	zero,zero,4227
   412f0:	d9014e17 	ldw	r4,1336(sp)
   412f4:	2000ce26 	beq	r4,zero,41630 <___vfprintf_internal_r+0x6d4>
   412f8:	01400044 	movi	r5,1
   412fc:	d9801004 	addi	r6,sp,64
   41300:	d9c14115 	stw	r7,1284(sp)
   41304:	d9414615 	stw	r5,1304(sp)
   41308:	d9814215 	stw	r6,1288(sp)
   4130c:	280f883a 	mov	r7,r5
   41310:	d9001005 	stb	r4,64(sp)
   41314:	d8000405 	stb	zero,16(sp)
   41318:	d8014715 	stw	zero,1308(sp)
   4131c:	d8c14d17 	ldw	r3,1332(sp)
   41320:	1880008c 	andi	r2,r3,2
   41324:	1005003a 	cmpeq	r2,r2,zero
   41328:	d8815115 	stw	r2,1348(sp)
   4132c:	1000031e 	bne	r2,zero,4133c <___vfprintf_internal_r+0x3e0>
   41330:	d9014617 	ldw	r4,1304(sp)
   41334:	21000084 	addi	r4,r4,2
   41338:	d9014615 	stw	r4,1304(sp)
   4133c:	d9414d17 	ldw	r5,1332(sp)
   41340:	2940210c 	andi	r5,r5,132
   41344:	d9414f15 	stw	r5,1340(sp)
   41348:	28002d1e 	bne	r5,zero,41400 <___vfprintf_internal_r+0x4a4>
   4134c:	d9814b17 	ldw	r6,1324(sp)
   41350:	d8814617 	ldw	r2,1304(sp)
   41354:	30a1c83a 	sub	r16,r6,r2
   41358:	0400290e 	bge	zero,r16,41400 <___vfprintf_internal_r+0x4a4>
   4135c:	00800404 	movi	r2,16
   41360:	14045e0e 	bge	r2,r16,424dc <___vfprintf_internal_r+0x1580>
   41364:	dc800f17 	ldw	r18,60(sp)
   41368:	dc400e17 	ldw	r17,56(sp)
   4136c:	1027883a 	mov	r19,r2
   41370:	07000174 	movhi	fp,5
   41374:	e7354a04 	addi	fp,fp,-10968
   41378:	050001c4 	movi	r20,7
   4137c:	00000306 	br	4138c <___vfprintf_internal_r+0x430>
   41380:	843ffc04 	addi	r16,r16,-16
   41384:	ad400204 	addi	r21,r21,8
   41388:	9c00130e 	bge	r19,r16,413d8 <___vfprintf_internal_r+0x47c>
   4138c:	94800404 	addi	r18,r18,16
   41390:	8c400044 	addi	r17,r17,1
   41394:	af000015 	stw	fp,0(r21)
   41398:	acc00115 	stw	r19,4(r21)
   4139c:	dc800f15 	stw	r18,60(sp)
   413a0:	dc400e15 	stw	r17,56(sp)
   413a4:	a47ff60e 	bge	r20,r17,41380 <___vfprintf_internal_r+0x424>
   413a8:	d9015017 	ldw	r4,1344(sp)
   413ac:	b00b883a 	mov	r5,r22
   413b0:	d9800d04 	addi	r6,sp,52
   413b4:	d9c15215 	stw	r7,1352(sp)
   413b8:	0040f040 	call	40f04 <__sprint_r>
   413bc:	d9c15217 	ldw	r7,1352(sp)
   413c0:	10009e1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   413c4:	843ffc04 	addi	r16,r16,-16
   413c8:	dc800f17 	ldw	r18,60(sp)
   413cc:	dc400e17 	ldw	r17,56(sp)
   413d0:	dd401a04 	addi	r21,sp,104
   413d4:	9c3fed16 	blt	r19,r16,4138c <___vfprintf_internal_r+0x430>
   413d8:	9425883a 	add	r18,r18,r16
   413dc:	8c400044 	addi	r17,r17,1
   413e0:	008001c4 	movi	r2,7
   413e4:	af000015 	stw	fp,0(r21)
   413e8:	ac000115 	stw	r16,4(r21)
   413ec:	dc800f15 	stw	r18,60(sp)
   413f0:	dc400e15 	stw	r17,56(sp)
   413f4:	1441f516 	blt	r2,r17,41bcc <___vfprintf_internal_r+0xc70>
   413f8:	ad400204 	addi	r21,r21,8
   413fc:	00000206 	br	41408 <___vfprintf_internal_r+0x4ac>
   41400:	dc800f17 	ldw	r18,60(sp)
   41404:	dc400e17 	ldw	r17,56(sp)
   41408:	d8800407 	ldb	r2,16(sp)
   4140c:	10000b26 	beq	r2,zero,4143c <___vfprintf_internal_r+0x4e0>
   41410:	00800044 	movi	r2,1
   41414:	94800044 	addi	r18,r18,1
   41418:	8c400044 	addi	r17,r17,1
   4141c:	a8800115 	stw	r2,4(r21)
   41420:	d8c00404 	addi	r3,sp,16
   41424:	008001c4 	movi	r2,7
   41428:	a8c00015 	stw	r3,0(r21)
   4142c:	dc800f15 	stw	r18,60(sp)
   41430:	dc400e15 	stw	r17,56(sp)
   41434:	1441da16 	blt	r2,r17,41ba0 <___vfprintf_internal_r+0xc44>
   41438:	ad400204 	addi	r21,r21,8
   4143c:	d9015117 	ldw	r4,1348(sp)
   41440:	20000b1e 	bne	r4,zero,41470 <___vfprintf_internal_r+0x514>
   41444:	d8800504 	addi	r2,sp,20
   41448:	94800084 	addi	r18,r18,2
   4144c:	8c400044 	addi	r17,r17,1
   41450:	a8800015 	stw	r2,0(r21)
   41454:	00c00084 	movi	r3,2
   41458:	008001c4 	movi	r2,7
   4145c:	a8c00115 	stw	r3,4(r21)
   41460:	dc800f15 	stw	r18,60(sp)
   41464:	dc400e15 	stw	r17,56(sp)
   41468:	1441c216 	blt	r2,r17,41b74 <___vfprintf_internal_r+0xc18>
   4146c:	ad400204 	addi	r21,r21,8
   41470:	d9414f17 	ldw	r5,1340(sp)
   41474:	00802004 	movi	r2,128
   41478:	2880b126 	beq	r5,r2,41740 <___vfprintf_internal_r+0x7e4>
   4147c:	d8c14717 	ldw	r3,1308(sp)
   41480:	19e1c83a 	sub	r16,r3,r7
   41484:	0400260e 	bge	zero,r16,41520 <___vfprintf_internal_r+0x5c4>
   41488:	00800404 	movi	r2,16
   4148c:	1403cf0e 	bge	r2,r16,423cc <___vfprintf_internal_r+0x1470>
   41490:	1027883a 	mov	r19,r2
   41494:	07000174 	movhi	fp,5
   41498:	e7354604 	addi	fp,fp,-10984
   4149c:	050001c4 	movi	r20,7
   414a0:	00000306 	br	414b0 <___vfprintf_internal_r+0x554>
   414a4:	843ffc04 	addi	r16,r16,-16
   414a8:	ad400204 	addi	r21,r21,8
   414ac:	9c00130e 	bge	r19,r16,414fc <___vfprintf_internal_r+0x5a0>
   414b0:	94800404 	addi	r18,r18,16
   414b4:	8c400044 	addi	r17,r17,1
   414b8:	af000015 	stw	fp,0(r21)
   414bc:	acc00115 	stw	r19,4(r21)
   414c0:	dc800f15 	stw	r18,60(sp)
   414c4:	dc400e15 	stw	r17,56(sp)
   414c8:	a47ff60e 	bge	r20,r17,414a4 <___vfprintf_internal_r+0x548>
   414cc:	d9015017 	ldw	r4,1344(sp)
   414d0:	b00b883a 	mov	r5,r22
   414d4:	d9800d04 	addi	r6,sp,52
   414d8:	d9c15215 	stw	r7,1352(sp)
   414dc:	0040f040 	call	40f04 <__sprint_r>
   414e0:	d9c15217 	ldw	r7,1352(sp)
   414e4:	1000551e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   414e8:	843ffc04 	addi	r16,r16,-16
   414ec:	dc800f17 	ldw	r18,60(sp)
   414f0:	dc400e17 	ldw	r17,56(sp)
   414f4:	dd401a04 	addi	r21,sp,104
   414f8:	9c3fed16 	blt	r19,r16,414b0 <___vfprintf_internal_r+0x554>
   414fc:	9425883a 	add	r18,r18,r16
   41500:	8c400044 	addi	r17,r17,1
   41504:	008001c4 	movi	r2,7
   41508:	af000015 	stw	fp,0(r21)
   4150c:	ac000115 	stw	r16,4(r21)
   41510:	dc800f15 	stw	r18,60(sp)
   41514:	dc400e15 	stw	r17,56(sp)
   41518:	14418216 	blt	r2,r17,41b24 <___vfprintf_internal_r+0xbc8>
   4151c:	ad400204 	addi	r21,r21,8
   41520:	d9014d17 	ldw	r4,1332(sp)
   41524:	2080400c 	andi	r2,r4,256
   41528:	10004a1e 	bne	r2,zero,41654 <___vfprintf_internal_r+0x6f8>
   4152c:	d9414217 	ldw	r5,1288(sp)
   41530:	91e5883a 	add	r18,r18,r7
   41534:	8c400044 	addi	r17,r17,1
   41538:	008001c4 	movi	r2,7
   4153c:	a9400015 	stw	r5,0(r21)
   41540:	a9c00115 	stw	r7,4(r21)
   41544:	dc800f15 	stw	r18,60(sp)
   41548:	dc400e15 	stw	r17,56(sp)
   4154c:	14416716 	blt	r2,r17,41aec <___vfprintf_internal_r+0xb90>
   41550:	a8c00204 	addi	r3,r21,8
   41554:	d9814d17 	ldw	r6,1332(sp)
   41558:	3080010c 	andi	r2,r6,4
   4155c:	10002826 	beq	r2,zero,41600 <___vfprintf_internal_r+0x6a4>
   41560:	d8814b17 	ldw	r2,1324(sp)
   41564:	d9014617 	ldw	r4,1304(sp)
   41568:	1121c83a 	sub	r16,r2,r4
   4156c:	0400240e 	bge	zero,r16,41600 <___vfprintf_internal_r+0x6a4>
   41570:	00800404 	movi	r2,16
   41574:	1404550e 	bge	r2,r16,426cc <___vfprintf_internal_r+0x1770>
   41578:	dc400e17 	ldw	r17,56(sp)
   4157c:	1027883a 	mov	r19,r2
   41580:	07000174 	movhi	fp,5
   41584:	e7354a04 	addi	fp,fp,-10968
   41588:	050001c4 	movi	r20,7
   4158c:	00000306 	br	4159c <___vfprintf_internal_r+0x640>
   41590:	843ffc04 	addi	r16,r16,-16
   41594:	18c00204 	addi	r3,r3,8
   41598:	9c00110e 	bge	r19,r16,415e0 <___vfprintf_internal_r+0x684>
   4159c:	94800404 	addi	r18,r18,16
   415a0:	8c400044 	addi	r17,r17,1
   415a4:	1f000015 	stw	fp,0(r3)
   415a8:	1cc00115 	stw	r19,4(r3)
   415ac:	dc800f15 	stw	r18,60(sp)
   415b0:	dc400e15 	stw	r17,56(sp)
   415b4:	a47ff60e 	bge	r20,r17,41590 <___vfprintf_internal_r+0x634>
   415b8:	d9015017 	ldw	r4,1344(sp)
   415bc:	b00b883a 	mov	r5,r22
   415c0:	d9800d04 	addi	r6,sp,52
   415c4:	0040f040 	call	40f04 <__sprint_r>
   415c8:	10001c1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   415cc:	843ffc04 	addi	r16,r16,-16
   415d0:	dc800f17 	ldw	r18,60(sp)
   415d4:	dc400e17 	ldw	r17,56(sp)
   415d8:	d8c01a04 	addi	r3,sp,104
   415dc:	9c3fef16 	blt	r19,r16,4159c <___vfprintf_internal_r+0x640>
   415e0:	9425883a 	add	r18,r18,r16
   415e4:	8c400044 	addi	r17,r17,1
   415e8:	008001c4 	movi	r2,7
   415ec:	1f000015 	stw	fp,0(r3)
   415f0:	1c000115 	stw	r16,4(r3)
   415f4:	dc800f15 	stw	r18,60(sp)
   415f8:	dc400e15 	stw	r17,56(sp)
   415fc:	1440cb16 	blt	r2,r17,4192c <___vfprintf_internal_r+0x9d0>
   41600:	d8814b17 	ldw	r2,1324(sp)
   41604:	d9414617 	ldw	r5,1304(sp)
   41608:	1140010e 	bge	r2,r5,41610 <___vfprintf_internal_r+0x6b4>
   4160c:	2805883a 	mov	r2,r5
   41610:	d9814c17 	ldw	r6,1328(sp)
   41614:	308d883a 	add	r6,r6,r2
   41618:	d9814c15 	stw	r6,1328(sp)
   4161c:	90013b1e 	bne	r18,zero,41b0c <___vfprintf_internal_r+0xbb0>
   41620:	d9c14117 	ldw	r7,1284(sp)
   41624:	dd401a04 	addi	r21,sp,104
   41628:	d8000e15 	stw	zero,56(sp)
   4162c:	003ea706 	br	410cc <___vfprintf_internal_r+0x170>
   41630:	d8800f17 	ldw	r2,60(sp)
   41634:	1005451e 	bne	r2,zero,42b4c <___vfprintf_internal_r+0x1bf0>
   41638:	d8000e15 	stw	zero,56(sp)
   4163c:	b080030b 	ldhu	r2,12(r22)
   41640:	1080100c 	andi	r2,r2,64
   41644:	103e8726 	beq	r2,zero,41064 <___vfprintf_internal_r+0x108>
   41648:	00bfffc4 	movi	r2,-1
   4164c:	d8814c15 	stw	r2,1328(sp)
   41650:	003e8406 	br	41064 <___vfprintf_internal_r+0x108>
   41654:	d9814e17 	ldw	r6,1336(sp)
   41658:	00801944 	movi	r2,101
   4165c:	11806e16 	blt	r2,r6,41818 <___vfprintf_internal_r+0x8bc>
   41660:	d9414817 	ldw	r5,1312(sp)
   41664:	00c00044 	movi	r3,1
   41668:	1943490e 	bge	r3,r5,42390 <___vfprintf_internal_r+0x1434>
   4166c:	d8814217 	ldw	r2,1288(sp)
   41670:	94800044 	addi	r18,r18,1
   41674:	8c400044 	addi	r17,r17,1
   41678:	a8800015 	stw	r2,0(r21)
   4167c:	008001c4 	movi	r2,7
   41680:	a8c00115 	stw	r3,4(r21)
   41684:	dc800f15 	stw	r18,60(sp)
   41688:	dc400e15 	stw	r17,56(sp)
   4168c:	1441ca16 	blt	r2,r17,41db8 <___vfprintf_internal_r+0xe5c>
   41690:	a8c00204 	addi	r3,r21,8
   41694:	d9014a17 	ldw	r4,1320(sp)
   41698:	00800044 	movi	r2,1
   4169c:	94800044 	addi	r18,r18,1
   416a0:	8c400044 	addi	r17,r17,1
   416a4:	18800115 	stw	r2,4(r3)
   416a8:	008001c4 	movi	r2,7
   416ac:	19000015 	stw	r4,0(r3)
   416b0:	dc800f15 	stw	r18,60(sp)
   416b4:	dc400e15 	stw	r17,56(sp)
   416b8:	1441b616 	blt	r2,r17,41d94 <___vfprintf_internal_r+0xe38>
   416bc:	1cc00204 	addi	r19,r3,8
   416c0:	d9014317 	ldw	r4,1292(sp)
   416c4:	d9414417 	ldw	r5,1296(sp)
   416c8:	000d883a 	mov	r6,zero
   416cc:	000f883a 	mov	r7,zero
   416d0:	0049a100 	call	49a10 <__nedf2>
   416d4:	10017426 	beq	r2,zero,41ca8 <___vfprintf_internal_r+0xd4c>
   416d8:	d9414817 	ldw	r5,1312(sp)
   416dc:	d9814217 	ldw	r6,1288(sp)
   416e0:	8c400044 	addi	r17,r17,1
   416e4:	2c85883a 	add	r2,r5,r18
   416e8:	14bfffc4 	addi	r18,r2,-1
   416ec:	28bfffc4 	addi	r2,r5,-1
   416f0:	30c00044 	addi	r3,r6,1
   416f4:	98800115 	stw	r2,4(r19)
   416f8:	008001c4 	movi	r2,7
   416fc:	98c00015 	stw	r3,0(r19)
   41700:	dc800f15 	stw	r18,60(sp)
   41704:	dc400e15 	stw	r17,56(sp)
   41708:	14418e16 	blt	r2,r17,41d44 <___vfprintf_internal_r+0xde8>
   4170c:	9cc00204 	addi	r19,r19,8
   41710:	d9414917 	ldw	r5,1316(sp)
   41714:	d8800904 	addi	r2,sp,36
   41718:	8c400044 	addi	r17,r17,1
   4171c:	9165883a 	add	r18,r18,r5
   41720:	98800015 	stw	r2,0(r19)
   41724:	008001c4 	movi	r2,7
   41728:	99400115 	stw	r5,4(r19)
   4172c:	dc800f15 	stw	r18,60(sp)
   41730:	dc400e15 	stw	r17,56(sp)
   41734:	1440ed16 	blt	r2,r17,41aec <___vfprintf_internal_r+0xb90>
   41738:	98c00204 	addi	r3,r19,8
   4173c:	003f8506 	br	41554 <___vfprintf_internal_r+0x5f8>
   41740:	d9814b17 	ldw	r6,1324(sp)
   41744:	d8814617 	ldw	r2,1304(sp)
   41748:	30a1c83a 	sub	r16,r6,r2
   4174c:	043f4b0e 	bge	zero,r16,4147c <___vfprintf_internal_r+0x520>
   41750:	00800404 	movi	r2,16
   41754:	14043a0e 	bge	r2,r16,42840 <___vfprintf_internal_r+0x18e4>
   41758:	1027883a 	mov	r19,r2
   4175c:	07000174 	movhi	fp,5
   41760:	e7354604 	addi	fp,fp,-10984
   41764:	050001c4 	movi	r20,7
   41768:	00000306 	br	41778 <___vfprintf_internal_r+0x81c>
   4176c:	843ffc04 	addi	r16,r16,-16
   41770:	ad400204 	addi	r21,r21,8
   41774:	9c00130e 	bge	r19,r16,417c4 <___vfprintf_internal_r+0x868>
   41778:	94800404 	addi	r18,r18,16
   4177c:	8c400044 	addi	r17,r17,1
   41780:	af000015 	stw	fp,0(r21)
   41784:	acc00115 	stw	r19,4(r21)
   41788:	dc800f15 	stw	r18,60(sp)
   4178c:	dc400e15 	stw	r17,56(sp)
   41790:	a47ff60e 	bge	r20,r17,4176c <___vfprintf_internal_r+0x810>
   41794:	d9015017 	ldw	r4,1344(sp)
   41798:	b00b883a 	mov	r5,r22
   4179c:	d9800d04 	addi	r6,sp,52
   417a0:	d9c15215 	stw	r7,1352(sp)
   417a4:	0040f040 	call	40f04 <__sprint_r>
   417a8:	d9c15217 	ldw	r7,1352(sp)
   417ac:	103fa31e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   417b0:	843ffc04 	addi	r16,r16,-16
   417b4:	dc800f17 	ldw	r18,60(sp)
   417b8:	dc400e17 	ldw	r17,56(sp)
   417bc:	dd401a04 	addi	r21,sp,104
   417c0:	9c3fed16 	blt	r19,r16,41778 <___vfprintf_internal_r+0x81c>
   417c4:	9425883a 	add	r18,r18,r16
   417c8:	8c400044 	addi	r17,r17,1
   417cc:	008001c4 	movi	r2,7
   417d0:	af000015 	stw	fp,0(r21)
   417d4:	ac000115 	stw	r16,4(r21)
   417d8:	dc800f15 	stw	r18,60(sp)
   417dc:	dc400e15 	stw	r17,56(sp)
   417e0:	14416116 	blt	r2,r17,41d68 <___vfprintf_internal_r+0xe0c>
   417e4:	ad400204 	addi	r21,r21,8
   417e8:	003f2406 	br	4147c <___vfprintf_internal_r+0x520>
   417ec:	d9015017 	ldw	r4,1344(sp)
   417f0:	0044a100 	call	44a10 <__sinit>
   417f4:	d9c15217 	ldw	r7,1352(sp)
   417f8:	003def06 	br	40fb8 <___vfprintf_internal_r+0x5c>
   417fc:	d9015017 	ldw	r4,1344(sp)
   41800:	b00b883a 	mov	r5,r22
   41804:	d9c15215 	stw	r7,1352(sp)
   41808:	0042e440 	call	42e44 <__swsetup_r>
   4180c:	d9c15217 	ldw	r7,1352(sp)
   41810:	103dee26 	beq	r2,zero,40fcc <___vfprintf_internal_r+0x70>
   41814:	003f8c06 	br	41648 <___vfprintf_internal_r+0x6ec>
   41818:	d9014317 	ldw	r4,1292(sp)
   4181c:	d9414417 	ldw	r5,1296(sp)
   41820:	000d883a 	mov	r6,zero
   41824:	000f883a 	mov	r7,zero
   41828:	00499880 	call	49988 <__eqdf2>
   4182c:	1000f21e 	bne	r2,zero,41bf8 <___vfprintf_internal_r+0xc9c>
   41830:	00800174 	movhi	r2,5
   41834:	10b54504 	addi	r2,r2,-10988
   41838:	94800044 	addi	r18,r18,1
   4183c:	8c400044 	addi	r17,r17,1
   41840:	a8800015 	stw	r2,0(r21)
   41844:	00c00044 	movi	r3,1
   41848:	008001c4 	movi	r2,7
   4184c:	a8c00115 	stw	r3,4(r21)
   41850:	dc800f15 	stw	r18,60(sp)
   41854:	dc400e15 	stw	r17,56(sp)
   41858:	14430016 	blt	r2,r17,4245c <___vfprintf_internal_r+0x1500>
   4185c:	a8c00204 	addi	r3,r21,8
   41860:	d8800617 	ldw	r2,24(sp)
   41864:	d9014817 	ldw	r4,1312(sp)
   41868:	11015c0e 	bge	r2,r4,41ddc <___vfprintf_internal_r+0xe80>
   4186c:	dc400e17 	ldw	r17,56(sp)
   41870:	d9814a17 	ldw	r6,1320(sp)
   41874:	00800044 	movi	r2,1
   41878:	94800044 	addi	r18,r18,1
   4187c:	8c400044 	addi	r17,r17,1
   41880:	18800115 	stw	r2,4(r3)
   41884:	008001c4 	movi	r2,7
   41888:	19800015 	stw	r6,0(r3)
   4188c:	dc800f15 	stw	r18,60(sp)
   41890:	dc400e15 	stw	r17,56(sp)
   41894:	14431616 	blt	r2,r17,424f0 <___vfprintf_internal_r+0x1594>
   41898:	18c00204 	addi	r3,r3,8
   4189c:	d8814817 	ldw	r2,1312(sp)
   418a0:	143fffc4 	addi	r16,r2,-1
   418a4:	043f2b0e 	bge	zero,r16,41554 <___vfprintf_internal_r+0x5f8>
   418a8:	00800404 	movi	r2,16
   418ac:	1402a80e 	bge	r2,r16,42350 <___vfprintf_internal_r+0x13f4>
   418b0:	dc400e17 	ldw	r17,56(sp)
   418b4:	1027883a 	mov	r19,r2
   418b8:	07000174 	movhi	fp,5
   418bc:	e7354604 	addi	fp,fp,-10984
   418c0:	050001c4 	movi	r20,7
   418c4:	00000306 	br	418d4 <___vfprintf_internal_r+0x978>
   418c8:	18c00204 	addi	r3,r3,8
   418cc:	843ffc04 	addi	r16,r16,-16
   418d0:	9c02a20e 	bge	r19,r16,4235c <___vfprintf_internal_r+0x1400>
   418d4:	94800404 	addi	r18,r18,16
   418d8:	8c400044 	addi	r17,r17,1
   418dc:	1f000015 	stw	fp,0(r3)
   418e0:	1cc00115 	stw	r19,4(r3)
   418e4:	dc800f15 	stw	r18,60(sp)
   418e8:	dc400e15 	stw	r17,56(sp)
   418ec:	a47ff60e 	bge	r20,r17,418c8 <___vfprintf_internal_r+0x96c>
   418f0:	d9015017 	ldw	r4,1344(sp)
   418f4:	b00b883a 	mov	r5,r22
   418f8:	d9800d04 	addi	r6,sp,52
   418fc:	0040f040 	call	40f04 <__sprint_r>
   41900:	103f4e1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41904:	dc800f17 	ldw	r18,60(sp)
   41908:	dc400e17 	ldw	r17,56(sp)
   4190c:	d8c01a04 	addi	r3,sp,104
   41910:	003fee06 	br	418cc <___vfprintf_internal_r+0x970>
   41914:	d8802d0b 	ldhu	r2,180(sp)
   41918:	00ffffc4 	movi	r3,-1
   4191c:	d8c14c15 	stw	r3,1328(sp)
   41920:	1080100c 	andi	r2,r2,64
   41924:	103dcc1e 	bne	r2,zero,41058 <___vfprintf_internal_r+0xfc>
   41928:	003dce06 	br	41064 <___vfprintf_internal_r+0x108>
   4192c:	d9015017 	ldw	r4,1344(sp)
   41930:	b00b883a 	mov	r5,r22
   41934:	d9800d04 	addi	r6,sp,52
   41938:	0040f040 	call	40f04 <__sprint_r>
   4193c:	103f3f1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41940:	dc800f17 	ldw	r18,60(sp)
   41944:	003f2e06 	br	41600 <___vfprintf_internal_r+0x6a4>
   41948:	d9414d17 	ldw	r5,1332(sp)
   4194c:	29400414 	ori	r5,r5,16
   41950:	d9414d15 	stw	r5,1332(sp)
   41954:	d9814d17 	ldw	r6,1332(sp)
   41958:	3080080c 	andi	r2,r6,32
   4195c:	10014f1e 	bne	r2,zero,41e9c <___vfprintf_internal_r+0xf40>
   41960:	d8c14d17 	ldw	r3,1332(sp)
   41964:	1880040c 	andi	r2,r3,16
   41968:	1002f01e 	bne	r2,zero,4252c <___vfprintf_internal_r+0x15d0>
   4196c:	d9014d17 	ldw	r4,1332(sp)
   41970:	2080100c 	andi	r2,r4,64
   41974:	1002ed26 	beq	r2,zero,4252c <___vfprintf_internal_r+0x15d0>
   41978:	3880000f 	ldh	r2,0(r7)
   4197c:	39c00104 	addi	r7,r7,4
   41980:	d9c14115 	stw	r7,1284(sp)
   41984:	1023d7fa 	srai	r17,r2,31
   41988:	1021883a 	mov	r16,r2
   4198c:	88037816 	blt	r17,zero,42770 <___vfprintf_internal_r+0x1814>
   41990:	01000044 	movi	r4,1
   41994:	98000416 	blt	r19,zero,419a8 <___vfprintf_internal_r+0xa4c>
   41998:	d8c14d17 	ldw	r3,1332(sp)
   4199c:	00bfdfc4 	movi	r2,-129
   419a0:	1886703a 	and	r3,r3,r2
   419a4:	d8c14d15 	stw	r3,1332(sp)
   419a8:	8444b03a 	or	r2,r16,r17
   419ac:	10022c1e 	bne	r2,zero,42260 <___vfprintf_internal_r+0x1304>
   419b0:	98022b1e 	bne	r19,zero,42260 <___vfprintf_internal_r+0x1304>
   419b4:	20803fcc 	andi	r2,r4,255
   419b8:	1002a126 	beq	r2,zero,42440 <___vfprintf_internal_r+0x14e4>
   419bc:	d8c01a04 	addi	r3,sp,104
   419c0:	dd001004 	addi	r20,sp,64
   419c4:	d8c14215 	stw	r3,1288(sp)
   419c8:	d8c14217 	ldw	r3,1288(sp)
   419cc:	dcc14615 	stw	r19,1304(sp)
   419d0:	a0c5c83a 	sub	r2,r20,r3
   419d4:	11c00a04 	addi	r7,r2,40
   419d8:	99c0010e 	bge	r19,r7,419e0 <___vfprintf_internal_r+0xa84>
   419dc:	d9c14615 	stw	r7,1304(sp)
   419e0:	dcc14715 	stw	r19,1308(sp)
   419e4:	d8800407 	ldb	r2,16(sp)
   419e8:	103e4c26 	beq	r2,zero,4131c <___vfprintf_internal_r+0x3c0>
   419ec:	d8814617 	ldw	r2,1304(sp)
   419f0:	10800044 	addi	r2,r2,1
   419f4:	d8814615 	stw	r2,1304(sp)
   419f8:	003e4806 	br	4131c <___vfprintf_internal_r+0x3c0>
   419fc:	d9814d17 	ldw	r6,1332(sp)
   41a00:	31800414 	ori	r6,r6,16
   41a04:	d9814d15 	stw	r6,1332(sp)
   41a08:	d8c14d17 	ldw	r3,1332(sp)
   41a0c:	1880080c 	andi	r2,r3,32
   41a10:	1001271e 	bne	r2,zero,41eb0 <___vfprintf_internal_r+0xf54>
   41a14:	d9414d17 	ldw	r5,1332(sp)
   41a18:	2880040c 	andi	r2,r5,16
   41a1c:	1002bc1e 	bne	r2,zero,42510 <___vfprintf_internal_r+0x15b4>
   41a20:	d9814d17 	ldw	r6,1332(sp)
   41a24:	3080100c 	andi	r2,r6,64
   41a28:	1002b926 	beq	r2,zero,42510 <___vfprintf_internal_r+0x15b4>
   41a2c:	3c00000b 	ldhu	r16,0(r7)
   41a30:	0009883a 	mov	r4,zero
   41a34:	39c00104 	addi	r7,r7,4
   41a38:	0023883a 	mov	r17,zero
   41a3c:	d9c14115 	stw	r7,1284(sp)
   41a40:	d8000405 	stb	zero,16(sp)
   41a44:	003fd306 	br	41994 <___vfprintf_internal_r+0xa38>
   41a48:	d9014d17 	ldw	r4,1332(sp)
   41a4c:	21000414 	ori	r4,r4,16
   41a50:	d9014d15 	stw	r4,1332(sp)
   41a54:	d9414d17 	ldw	r5,1332(sp)
   41a58:	2880080c 	andi	r2,r5,32
   41a5c:	1001081e 	bne	r2,zero,41e80 <___vfprintf_internal_r+0xf24>
   41a60:	d8c14d17 	ldw	r3,1332(sp)
   41a64:	1880040c 	andi	r2,r3,16
   41a68:	1002b61e 	bne	r2,zero,42544 <___vfprintf_internal_r+0x15e8>
   41a6c:	d9014d17 	ldw	r4,1332(sp)
   41a70:	2080100c 	andi	r2,r4,64
   41a74:	1002b326 	beq	r2,zero,42544 <___vfprintf_internal_r+0x15e8>
   41a78:	3c00000b 	ldhu	r16,0(r7)
   41a7c:	01000044 	movi	r4,1
   41a80:	39c00104 	addi	r7,r7,4
   41a84:	0023883a 	mov	r17,zero
   41a88:	d9c14115 	stw	r7,1284(sp)
   41a8c:	d8000405 	stb	zero,16(sp)
   41a90:	003fc006 	br	41994 <___vfprintf_internal_r+0xa38>
   41a94:	d9015017 	ldw	r4,1344(sp)
   41a98:	b00b883a 	mov	r5,r22
   41a9c:	d9800d04 	addi	r6,sp,52
   41aa0:	0040f040 	call	40f04 <__sprint_r>
   41aa4:	103ee51e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41aa8:	dc800f17 	ldw	r18,60(sp)
   41aac:	d8c01a04 	addi	r3,sp,104
   41ab0:	d9814d17 	ldw	r6,1332(sp)
   41ab4:	3080004c 	andi	r2,r6,1
   41ab8:	1005003a 	cmpeq	r2,r2,zero
   41abc:	103ea51e 	bne	r2,zero,41554 <___vfprintf_internal_r+0x5f8>
   41ac0:	00800044 	movi	r2,1
   41ac4:	dc400e17 	ldw	r17,56(sp)
   41ac8:	18800115 	stw	r2,4(r3)
   41acc:	d8814a17 	ldw	r2,1320(sp)
   41ad0:	94800044 	addi	r18,r18,1
   41ad4:	8c400044 	addi	r17,r17,1
   41ad8:	18800015 	stw	r2,0(r3)
   41adc:	008001c4 	movi	r2,7
   41ae0:	dc800f15 	stw	r18,60(sp)
   41ae4:	dc400e15 	stw	r17,56(sp)
   41ae8:	1442240e 	bge	r2,r17,4237c <___vfprintf_internal_r+0x1420>
   41aec:	d9015017 	ldw	r4,1344(sp)
   41af0:	b00b883a 	mov	r5,r22
   41af4:	d9800d04 	addi	r6,sp,52
   41af8:	0040f040 	call	40f04 <__sprint_r>
   41afc:	103ecf1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41b00:	dc800f17 	ldw	r18,60(sp)
   41b04:	d8c01a04 	addi	r3,sp,104
   41b08:	003e9206 	br	41554 <___vfprintf_internal_r+0x5f8>
   41b0c:	d9015017 	ldw	r4,1344(sp)
   41b10:	b00b883a 	mov	r5,r22
   41b14:	d9800d04 	addi	r6,sp,52
   41b18:	0040f040 	call	40f04 <__sprint_r>
   41b1c:	103ec026 	beq	r2,zero,41620 <___vfprintf_internal_r+0x6c4>
   41b20:	003ec606 	br	4163c <___vfprintf_internal_r+0x6e0>
   41b24:	d9015017 	ldw	r4,1344(sp)
   41b28:	b00b883a 	mov	r5,r22
   41b2c:	d9800d04 	addi	r6,sp,52
   41b30:	d9c15215 	stw	r7,1352(sp)
   41b34:	0040f040 	call	40f04 <__sprint_r>
   41b38:	d9c15217 	ldw	r7,1352(sp)
   41b3c:	103ebf1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41b40:	dc800f17 	ldw	r18,60(sp)
   41b44:	dc400e17 	ldw	r17,56(sp)
   41b48:	dd401a04 	addi	r21,sp,104
   41b4c:	003e7406 	br	41520 <___vfprintf_internal_r+0x5c4>
   41b50:	d9015017 	ldw	r4,1344(sp)
   41b54:	b00b883a 	mov	r5,r22
   41b58:	d9800d04 	addi	r6,sp,52
   41b5c:	d9c15215 	stw	r7,1352(sp)
   41b60:	0040f040 	call	40f04 <__sprint_r>
   41b64:	d9c15217 	ldw	r7,1352(sp)
   41b68:	103eb41e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41b6c:	dd401a04 	addi	r21,sp,104
   41b70:	003d6d06 	br	41128 <___vfprintf_internal_r+0x1cc>
   41b74:	d9015017 	ldw	r4,1344(sp)
   41b78:	b00b883a 	mov	r5,r22
   41b7c:	d9800d04 	addi	r6,sp,52
   41b80:	d9c15215 	stw	r7,1352(sp)
   41b84:	0040f040 	call	40f04 <__sprint_r>
   41b88:	d9c15217 	ldw	r7,1352(sp)
   41b8c:	103eab1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41b90:	dc800f17 	ldw	r18,60(sp)
   41b94:	dc400e17 	ldw	r17,56(sp)
   41b98:	dd401a04 	addi	r21,sp,104
   41b9c:	003e3406 	br	41470 <___vfprintf_internal_r+0x514>
   41ba0:	d9015017 	ldw	r4,1344(sp)
   41ba4:	b00b883a 	mov	r5,r22
   41ba8:	d9800d04 	addi	r6,sp,52
   41bac:	d9c15215 	stw	r7,1352(sp)
   41bb0:	0040f040 	call	40f04 <__sprint_r>
   41bb4:	d9c15217 	ldw	r7,1352(sp)
   41bb8:	103ea01e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41bbc:	dc800f17 	ldw	r18,60(sp)
   41bc0:	dc400e17 	ldw	r17,56(sp)
   41bc4:	dd401a04 	addi	r21,sp,104
   41bc8:	003e1c06 	br	4143c <___vfprintf_internal_r+0x4e0>
   41bcc:	d9015017 	ldw	r4,1344(sp)
   41bd0:	b00b883a 	mov	r5,r22
   41bd4:	d9800d04 	addi	r6,sp,52
   41bd8:	d9c15215 	stw	r7,1352(sp)
   41bdc:	0040f040 	call	40f04 <__sprint_r>
   41be0:	d9c15217 	ldw	r7,1352(sp)
   41be4:	103e951e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41be8:	dc800f17 	ldw	r18,60(sp)
   41bec:	dc400e17 	ldw	r17,56(sp)
   41bf0:	dd401a04 	addi	r21,sp,104
   41bf4:	003e0406 	br	41408 <___vfprintf_internal_r+0x4ac>
   41bf8:	d9000617 	ldw	r4,24(sp)
   41bfc:	0102580e 	bge	zero,r4,42560 <___vfprintf_internal_r+0x1604>
   41c00:	d9814817 	ldw	r6,1312(sp)
   41c04:	21807a16 	blt	r4,r6,41df0 <___vfprintf_internal_r+0xe94>
   41c08:	d8814217 	ldw	r2,1288(sp)
   41c0c:	91a5883a 	add	r18,r18,r6
   41c10:	8c400044 	addi	r17,r17,1
   41c14:	a8800015 	stw	r2,0(r21)
   41c18:	008001c4 	movi	r2,7
   41c1c:	a9800115 	stw	r6,4(r21)
   41c20:	dc800f15 	stw	r18,60(sp)
   41c24:	dc400e15 	stw	r17,56(sp)
   41c28:	1442fc16 	blt	r2,r17,4281c <___vfprintf_internal_r+0x18c0>
   41c2c:	a8c00204 	addi	r3,r21,8
   41c30:	d9414817 	ldw	r5,1312(sp)
   41c34:	2161c83a 	sub	r16,r4,r5
   41c38:	043f9d0e 	bge	zero,r16,41ab0 <___vfprintf_internal_r+0xb54>
   41c3c:	00800404 	movi	r2,16
   41c40:	1402190e 	bge	r2,r16,424a8 <___vfprintf_internal_r+0x154c>
   41c44:	dc400e17 	ldw	r17,56(sp)
   41c48:	1027883a 	mov	r19,r2
   41c4c:	07000174 	movhi	fp,5
   41c50:	e7354604 	addi	fp,fp,-10984
   41c54:	050001c4 	movi	r20,7
   41c58:	00000306 	br	41c68 <___vfprintf_internal_r+0xd0c>
   41c5c:	18c00204 	addi	r3,r3,8
   41c60:	843ffc04 	addi	r16,r16,-16
   41c64:	9c02130e 	bge	r19,r16,424b4 <___vfprintf_internal_r+0x1558>
   41c68:	94800404 	addi	r18,r18,16
   41c6c:	8c400044 	addi	r17,r17,1
   41c70:	1f000015 	stw	fp,0(r3)
   41c74:	1cc00115 	stw	r19,4(r3)
   41c78:	dc800f15 	stw	r18,60(sp)
   41c7c:	dc400e15 	stw	r17,56(sp)
   41c80:	a47ff60e 	bge	r20,r17,41c5c <___vfprintf_internal_r+0xd00>
   41c84:	d9015017 	ldw	r4,1344(sp)
   41c88:	b00b883a 	mov	r5,r22
   41c8c:	d9800d04 	addi	r6,sp,52
   41c90:	0040f040 	call	40f04 <__sprint_r>
   41c94:	103e691e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41c98:	dc800f17 	ldw	r18,60(sp)
   41c9c:	dc400e17 	ldw	r17,56(sp)
   41ca0:	d8c01a04 	addi	r3,sp,104
   41ca4:	003fee06 	br	41c60 <___vfprintf_internal_r+0xd04>
   41ca8:	d8814817 	ldw	r2,1312(sp)
   41cac:	143fffc4 	addi	r16,r2,-1
   41cb0:	043e970e 	bge	zero,r16,41710 <___vfprintf_internal_r+0x7b4>
   41cb4:	00800404 	movi	r2,16
   41cb8:	1400180e 	bge	r2,r16,41d1c <___vfprintf_internal_r+0xdc0>
   41cbc:	1029883a 	mov	r20,r2
   41cc0:	07000174 	movhi	fp,5
   41cc4:	e7354604 	addi	fp,fp,-10984
   41cc8:	054001c4 	movi	r21,7
   41ccc:	00000306 	br	41cdc <___vfprintf_internal_r+0xd80>
   41cd0:	9cc00204 	addi	r19,r19,8
   41cd4:	843ffc04 	addi	r16,r16,-16
   41cd8:	a400120e 	bge	r20,r16,41d24 <___vfprintf_internal_r+0xdc8>
   41cdc:	94800404 	addi	r18,r18,16
   41ce0:	8c400044 	addi	r17,r17,1
   41ce4:	9f000015 	stw	fp,0(r19)
   41ce8:	9d000115 	stw	r20,4(r19)
   41cec:	dc800f15 	stw	r18,60(sp)
   41cf0:	dc400e15 	stw	r17,56(sp)
   41cf4:	ac7ff60e 	bge	r21,r17,41cd0 <___vfprintf_internal_r+0xd74>
   41cf8:	d9015017 	ldw	r4,1344(sp)
   41cfc:	b00b883a 	mov	r5,r22
   41d00:	d9800d04 	addi	r6,sp,52
   41d04:	0040f040 	call	40f04 <__sprint_r>
   41d08:	103e4c1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41d0c:	dc800f17 	ldw	r18,60(sp)
   41d10:	dc400e17 	ldw	r17,56(sp)
   41d14:	dcc01a04 	addi	r19,sp,104
   41d18:	003fee06 	br	41cd4 <___vfprintf_internal_r+0xd78>
   41d1c:	07000174 	movhi	fp,5
   41d20:	e7354604 	addi	fp,fp,-10984
   41d24:	9425883a 	add	r18,r18,r16
   41d28:	8c400044 	addi	r17,r17,1
   41d2c:	008001c4 	movi	r2,7
   41d30:	9f000015 	stw	fp,0(r19)
   41d34:	9c000115 	stw	r16,4(r19)
   41d38:	dc800f15 	stw	r18,60(sp)
   41d3c:	dc400e15 	stw	r17,56(sp)
   41d40:	147e720e 	bge	r2,r17,4170c <___vfprintf_internal_r+0x7b0>
   41d44:	d9015017 	ldw	r4,1344(sp)
   41d48:	b00b883a 	mov	r5,r22
   41d4c:	d9800d04 	addi	r6,sp,52
   41d50:	0040f040 	call	40f04 <__sprint_r>
   41d54:	103e391e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41d58:	dc800f17 	ldw	r18,60(sp)
   41d5c:	dc400e17 	ldw	r17,56(sp)
   41d60:	dcc01a04 	addi	r19,sp,104
   41d64:	003e6a06 	br	41710 <___vfprintf_internal_r+0x7b4>
   41d68:	d9015017 	ldw	r4,1344(sp)
   41d6c:	b00b883a 	mov	r5,r22
   41d70:	d9800d04 	addi	r6,sp,52
   41d74:	d9c15215 	stw	r7,1352(sp)
   41d78:	0040f040 	call	40f04 <__sprint_r>
   41d7c:	d9c15217 	ldw	r7,1352(sp)
   41d80:	103e2e1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41d84:	dc800f17 	ldw	r18,60(sp)
   41d88:	dc400e17 	ldw	r17,56(sp)
   41d8c:	dd401a04 	addi	r21,sp,104
   41d90:	003dba06 	br	4147c <___vfprintf_internal_r+0x520>
   41d94:	d9015017 	ldw	r4,1344(sp)
   41d98:	b00b883a 	mov	r5,r22
   41d9c:	d9800d04 	addi	r6,sp,52
   41da0:	0040f040 	call	40f04 <__sprint_r>
   41da4:	103e251e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41da8:	dc800f17 	ldw	r18,60(sp)
   41dac:	dc400e17 	ldw	r17,56(sp)
   41db0:	dcc01a04 	addi	r19,sp,104
   41db4:	003e4206 	br	416c0 <___vfprintf_internal_r+0x764>
   41db8:	d9015017 	ldw	r4,1344(sp)
   41dbc:	b00b883a 	mov	r5,r22
   41dc0:	d9800d04 	addi	r6,sp,52
   41dc4:	0040f040 	call	40f04 <__sprint_r>
   41dc8:	103e1c1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   41dcc:	dc800f17 	ldw	r18,60(sp)
   41dd0:	dc400e17 	ldw	r17,56(sp)
   41dd4:	d8c01a04 	addi	r3,sp,104
   41dd8:	003e2e06 	br	41694 <___vfprintf_internal_r+0x738>
   41ddc:	d9414d17 	ldw	r5,1332(sp)
   41de0:	2880004c 	andi	r2,r5,1
   41de4:	1005003a 	cmpeq	r2,r2,zero
   41de8:	103dda1e 	bne	r2,zero,41554 <___vfprintf_internal_r+0x5f8>
   41dec:	003e9f06 	br	4186c <___vfprintf_internal_r+0x910>
   41df0:	d8c14217 	ldw	r3,1288(sp)
   41df4:	9125883a 	add	r18,r18,r4
   41df8:	8c400044 	addi	r17,r17,1
   41dfc:	008001c4 	movi	r2,7
   41e00:	a8c00015 	stw	r3,0(r21)
   41e04:	a9000115 	stw	r4,4(r21)
   41e08:	dc800f15 	stw	r18,60(sp)
   41e0c:	dc400e15 	stw	r17,56(sp)
   41e10:	14426c16 	blt	r2,r17,427c4 <___vfprintf_internal_r+0x1868>
   41e14:	a8c00204 	addi	r3,r21,8
   41e18:	d9414a17 	ldw	r5,1320(sp)
   41e1c:	00800044 	movi	r2,1
   41e20:	94800044 	addi	r18,r18,1
   41e24:	8c400044 	addi	r17,r17,1
   41e28:	18800115 	stw	r2,4(r3)
   41e2c:	008001c4 	movi	r2,7
   41e30:	19400015 	stw	r5,0(r3)
   41e34:	dc800f15 	stw	r18,60(sp)
   41e38:	dc400e15 	stw	r17,56(sp)
   41e3c:	2021883a 	mov	r16,r4
   41e40:	14425616 	blt	r2,r17,4279c <___vfprintf_internal_r+0x1840>
   41e44:	19400204 	addi	r5,r3,8
   41e48:	d9814817 	ldw	r6,1312(sp)
   41e4c:	8c400044 	addi	r17,r17,1
   41e50:	dc400e15 	stw	r17,56(sp)
   41e54:	3107c83a 	sub	r3,r6,r4
   41e58:	d9014217 	ldw	r4,1288(sp)
   41e5c:	90e5883a 	add	r18,r18,r3
   41e60:	28c00115 	stw	r3,4(r5)
   41e64:	8105883a 	add	r2,r16,r4
   41e68:	28800015 	stw	r2,0(r5)
   41e6c:	008001c4 	movi	r2,7
   41e70:	dc800f15 	stw	r18,60(sp)
   41e74:	147f1d16 	blt	r2,r17,41aec <___vfprintf_internal_r+0xb90>
   41e78:	28c00204 	addi	r3,r5,8
   41e7c:	003db506 	br	41554 <___vfprintf_internal_r+0x5f8>
   41e80:	3c000017 	ldw	r16,0(r7)
   41e84:	3c400117 	ldw	r17,4(r7)
   41e88:	39800204 	addi	r6,r7,8
   41e8c:	01000044 	movi	r4,1
   41e90:	d9814115 	stw	r6,1284(sp)
   41e94:	d8000405 	stb	zero,16(sp)
   41e98:	003ebe06 	br	41994 <___vfprintf_internal_r+0xa38>
   41e9c:	3c000017 	ldw	r16,0(r7)
   41ea0:	3c400117 	ldw	r17,4(r7)
   41ea4:	38800204 	addi	r2,r7,8
   41ea8:	d8814115 	stw	r2,1284(sp)
   41eac:	003eb706 	br	4198c <___vfprintf_internal_r+0xa30>
   41eb0:	3c000017 	ldw	r16,0(r7)
   41eb4:	3c400117 	ldw	r17,4(r7)
   41eb8:	39000204 	addi	r4,r7,8
   41ebc:	d9014115 	stw	r4,1284(sp)
   41ec0:	0009883a 	mov	r4,zero
   41ec4:	d8000405 	stb	zero,16(sp)
   41ec8:	003eb206 	br	41994 <___vfprintf_internal_r+0xa38>
   41ecc:	38c00017 	ldw	r3,0(r7)
   41ed0:	39c00104 	addi	r7,r7,4
   41ed4:	d8c14b15 	stw	r3,1324(sp)
   41ed8:	1800d70e 	bge	r3,zero,42238 <___vfprintf_internal_r+0x12dc>
   41edc:	00c7c83a 	sub	r3,zero,r3
   41ee0:	d8c14b15 	stw	r3,1324(sp)
   41ee4:	d9014d17 	ldw	r4,1332(sp)
   41ee8:	b8c00007 	ldb	r3,0(r23)
   41eec:	21000114 	ori	r4,r4,4
   41ef0:	d9014d15 	stw	r4,1332(sp)
   41ef4:	003c9806 	br	41158 <___vfprintf_internal_r+0x1fc>
   41ef8:	d9814d17 	ldw	r6,1332(sp)
   41efc:	3080080c 	andi	r2,r6,32
   41f00:	1001f626 	beq	r2,zero,426dc <___vfprintf_internal_r+0x1780>
   41f04:	d9014c17 	ldw	r4,1328(sp)
   41f08:	38800017 	ldw	r2,0(r7)
   41f0c:	39c00104 	addi	r7,r7,4
   41f10:	d9c14115 	stw	r7,1284(sp)
   41f14:	2007d7fa 	srai	r3,r4,31
   41f18:	d9c14117 	ldw	r7,1284(sp)
   41f1c:	11000015 	stw	r4,0(r2)
   41f20:	10c00115 	stw	r3,4(r2)
   41f24:	003c6906 	br	410cc <___vfprintf_internal_r+0x170>
   41f28:	b8c00007 	ldb	r3,0(r23)
   41f2c:	00801b04 	movi	r2,108
   41f30:	18825526 	beq	r3,r2,42888 <___vfprintf_internal_r+0x192c>
   41f34:	d9414d17 	ldw	r5,1332(sp)
   41f38:	29400414 	ori	r5,r5,16
   41f3c:	d9414d15 	stw	r5,1332(sp)
   41f40:	003c8506 	br	41158 <___vfprintf_internal_r+0x1fc>
   41f44:	d9814d17 	ldw	r6,1332(sp)
   41f48:	b8c00007 	ldb	r3,0(r23)
   41f4c:	31800814 	ori	r6,r6,32
   41f50:	d9814d15 	stw	r6,1332(sp)
   41f54:	003c8006 	br	41158 <___vfprintf_internal_r+0x1fc>
   41f58:	d8814d17 	ldw	r2,1332(sp)
   41f5c:	3c000017 	ldw	r16,0(r7)
   41f60:	00c01e04 	movi	r3,120
   41f64:	10800094 	ori	r2,r2,2
   41f68:	d8814d15 	stw	r2,1332(sp)
   41f6c:	39c00104 	addi	r7,r7,4
   41f70:	01400174 	movhi	r5,5
   41f74:	29752e04 	addi	r5,r5,-11080
   41f78:	00800c04 	movi	r2,48
   41f7c:	0023883a 	mov	r17,zero
   41f80:	01000084 	movi	r4,2
   41f84:	d9c14115 	stw	r7,1284(sp)
   41f88:	d8c14e15 	stw	r3,1336(sp)
   41f8c:	d9414515 	stw	r5,1300(sp)
   41f90:	d8800505 	stb	r2,20(sp)
   41f94:	d8c00545 	stb	r3,21(sp)
   41f98:	d8000405 	stb	zero,16(sp)
   41f9c:	003e7d06 	br	41994 <___vfprintf_internal_r+0xa38>
   41fa0:	d8814d17 	ldw	r2,1332(sp)
   41fa4:	b8c00007 	ldb	r3,0(r23)
   41fa8:	10801014 	ori	r2,r2,64
   41fac:	d8814d15 	stw	r2,1332(sp)
   41fb0:	003c6906 	br	41158 <___vfprintf_internal_r+0x1fc>
   41fb4:	d9414d17 	ldw	r5,1332(sp)
   41fb8:	2880020c 	andi	r2,r5,8
   41fbc:	1001e526 	beq	r2,zero,42754 <___vfprintf_internal_r+0x17f8>
   41fc0:	39800017 	ldw	r6,0(r7)
   41fc4:	38800204 	addi	r2,r7,8
   41fc8:	d8814115 	stw	r2,1284(sp)
   41fcc:	d9814315 	stw	r6,1292(sp)
   41fd0:	39c00117 	ldw	r7,4(r7)
   41fd4:	d9c14415 	stw	r7,1296(sp)
   41fd8:	d9014317 	ldw	r4,1292(sp)
   41fdc:	d9414417 	ldw	r5,1296(sp)
   41fe0:	0047a0c0 	call	47a0c <__isinfd>
   41fe4:	10021d26 	beq	r2,zero,4285c <___vfprintf_internal_r+0x1900>
   41fe8:	d9014317 	ldw	r4,1292(sp)
   41fec:	d9414417 	ldw	r5,1296(sp)
   41ff0:	000d883a 	mov	r6,zero
   41ff4:	000f883a 	mov	r7,zero
   41ff8:	0049ba80 	call	49ba8 <__ltdf2>
   41ffc:	1002d016 	blt	r2,zero,42b40 <___vfprintf_internal_r+0x1be4>
   42000:	d9414e17 	ldw	r5,1336(sp)
   42004:	008011c4 	movi	r2,71
   42008:	11421016 	blt	r2,r5,4284c <___vfprintf_internal_r+0x18f0>
   4200c:	01800174 	movhi	r6,5
   42010:	31b53304 	addi	r6,r6,-11060
   42014:	d9814215 	stw	r6,1288(sp)
   42018:	d9014d17 	ldw	r4,1332(sp)
   4201c:	00c000c4 	movi	r3,3
   42020:	00bfdfc4 	movi	r2,-129
   42024:	2088703a 	and	r4,r4,r2
   42028:	180f883a 	mov	r7,r3
   4202c:	d8c14615 	stw	r3,1304(sp)
   42030:	d9014d15 	stw	r4,1332(sp)
   42034:	d8014715 	stw	zero,1308(sp)
   42038:	003e6a06 	br	419e4 <___vfprintf_internal_r+0xa88>
   4203c:	38800017 	ldw	r2,0(r7)
   42040:	00c00044 	movi	r3,1
   42044:	39c00104 	addi	r7,r7,4
   42048:	d9c14115 	stw	r7,1284(sp)
   4204c:	d9001004 	addi	r4,sp,64
   42050:	180f883a 	mov	r7,r3
   42054:	d8c14615 	stw	r3,1304(sp)
   42058:	d9014215 	stw	r4,1288(sp)
   4205c:	d8801005 	stb	r2,64(sp)
   42060:	d8000405 	stb	zero,16(sp)
   42064:	003cac06 	br	41318 <___vfprintf_internal_r+0x3bc>
   42068:	01400174 	movhi	r5,5
   4206c:	29753904 	addi	r5,r5,-11036
   42070:	d9414515 	stw	r5,1300(sp)
   42074:	d9814d17 	ldw	r6,1332(sp)
   42078:	3080080c 	andi	r2,r6,32
   4207c:	1000ff26 	beq	r2,zero,4247c <___vfprintf_internal_r+0x1520>
   42080:	3c000017 	ldw	r16,0(r7)
   42084:	3c400117 	ldw	r17,4(r7)
   42088:	38800204 	addi	r2,r7,8
   4208c:	d8814115 	stw	r2,1284(sp)
   42090:	d9414d17 	ldw	r5,1332(sp)
   42094:	2880004c 	andi	r2,r5,1
   42098:	1005003a 	cmpeq	r2,r2,zero
   4209c:	1000b91e 	bne	r2,zero,42384 <___vfprintf_internal_r+0x1428>
   420a0:	8444b03a 	or	r2,r16,r17
   420a4:	1000b726 	beq	r2,zero,42384 <___vfprintf_internal_r+0x1428>
   420a8:	d9814e17 	ldw	r6,1336(sp)
   420ac:	29400094 	ori	r5,r5,2
   420b0:	00800c04 	movi	r2,48
   420b4:	01000084 	movi	r4,2
   420b8:	d9414d15 	stw	r5,1332(sp)
   420bc:	d8800505 	stb	r2,20(sp)
   420c0:	d9800545 	stb	r6,21(sp)
   420c4:	d8000405 	stb	zero,16(sp)
   420c8:	003e3206 	br	41994 <___vfprintf_internal_r+0xa38>
   420cc:	01800174 	movhi	r6,5
   420d0:	31b52e04 	addi	r6,r6,-11080
   420d4:	d9814515 	stw	r6,1300(sp)
   420d8:	003fe606 	br	42074 <___vfprintf_internal_r+0x1118>
   420dc:	00800ac4 	movi	r2,43
   420e0:	d8800405 	stb	r2,16(sp)
   420e4:	b8c00007 	ldb	r3,0(r23)
   420e8:	003c1b06 	br	41158 <___vfprintf_internal_r+0x1fc>
   420ec:	d8814d17 	ldw	r2,1332(sp)
   420f0:	b8c00007 	ldb	r3,0(r23)
   420f4:	10800054 	ori	r2,r2,1
   420f8:	d8814d15 	stw	r2,1332(sp)
   420fc:	003c1606 	br	41158 <___vfprintf_internal_r+0x1fc>
   42100:	d8800407 	ldb	r2,16(sp)
   42104:	10004c1e 	bne	r2,zero,42238 <___vfprintf_internal_r+0x12dc>
   42108:	00800804 	movi	r2,32
   4210c:	d8800405 	stb	r2,16(sp)
   42110:	b8c00007 	ldb	r3,0(r23)
   42114:	003c1006 	br	41158 <___vfprintf_internal_r+0x1fc>
   42118:	d9814d17 	ldw	r6,1332(sp)
   4211c:	b8c00007 	ldb	r3,0(r23)
   42120:	31800214 	ori	r6,r6,8
   42124:	d9814d15 	stw	r6,1332(sp)
   42128:	003c0b06 	br	41158 <___vfprintf_internal_r+0x1fc>
   4212c:	0009883a 	mov	r4,zero
   42130:	04000244 	movi	r16,9
   42134:	01400284 	movi	r5,10
   42138:	d9c15215 	stw	r7,1352(sp)
   4213c:	004a0e00 	call	4a0e0 <__mulsi3>
   42140:	b9000007 	ldb	r4,0(r23)
   42144:	d8c14e17 	ldw	r3,1336(sp)
   42148:	bdc00044 	addi	r23,r23,1
   4214c:	d9014e15 	stw	r4,1336(sp)
   42150:	d9414e17 	ldw	r5,1336(sp)
   42154:	1885883a 	add	r2,r3,r2
   42158:	113ff404 	addi	r4,r2,-48
   4215c:	28bff404 	addi	r2,r5,-48
   42160:	d9c15217 	ldw	r7,1352(sp)
   42164:	80bff32e 	bgeu	r16,r2,42134 <___vfprintf_internal_r+0x11d8>
   42168:	d9014b15 	stw	r4,1324(sp)
   4216c:	003bfc06 	br	41160 <___vfprintf_internal_r+0x204>
   42170:	d8814d17 	ldw	r2,1332(sp)
   42174:	b8c00007 	ldb	r3,0(r23)
   42178:	10802014 	ori	r2,r2,128
   4217c:	d8814d15 	stw	r2,1332(sp)
   42180:	003bf506 	br	41158 <___vfprintf_internal_r+0x1fc>
   42184:	b8c00007 	ldb	r3,0(r23)
   42188:	00800a84 	movi	r2,42
   4218c:	bdc00044 	addi	r23,r23,1
   42190:	18831826 	beq	r3,r2,42df4 <___vfprintf_internal_r+0x1e98>
   42194:	d8c14e15 	stw	r3,1336(sp)
   42198:	18bff404 	addi	r2,r3,-48
   4219c:	00c00244 	movi	r3,9
   421a0:	18827b36 	bltu	r3,r2,42b90 <___vfprintf_internal_r+0x1c34>
   421a4:	1821883a 	mov	r16,r3
   421a8:	0009883a 	mov	r4,zero
   421ac:	01400284 	movi	r5,10
   421b0:	d9c15215 	stw	r7,1352(sp)
   421b4:	004a0e00 	call	4a0e0 <__mulsi3>
   421b8:	d9414e17 	ldw	r5,1336(sp)
   421bc:	b9800007 	ldb	r6,0(r23)
   421c0:	d9c15217 	ldw	r7,1352(sp)
   421c4:	1145883a 	add	r2,r2,r5
   421c8:	113ff404 	addi	r4,r2,-48
   421cc:	30bff404 	addi	r2,r6,-48
   421d0:	d9814e15 	stw	r6,1336(sp)
   421d4:	bdc00044 	addi	r23,r23,1
   421d8:	80bff42e 	bgeu	r16,r2,421ac <___vfprintf_internal_r+0x1250>
   421dc:	2027883a 	mov	r19,r4
   421e0:	203bdf0e 	bge	r4,zero,41160 <___vfprintf_internal_r+0x204>
   421e4:	04ffffc4 	movi	r19,-1
   421e8:	003bdd06 	br	41160 <___vfprintf_internal_r+0x204>
   421ec:	d8000405 	stb	zero,16(sp)
   421f0:	39800017 	ldw	r6,0(r7)
   421f4:	39c00104 	addi	r7,r7,4
   421f8:	d9c14115 	stw	r7,1284(sp)
   421fc:	d9814215 	stw	r6,1288(sp)
   42200:	3001c926 	beq	r6,zero,42928 <___vfprintf_internal_r+0x19cc>
   42204:	98000e16 	blt	r19,zero,42240 <___vfprintf_internal_r+0x12e4>
   42208:	d9014217 	ldw	r4,1288(sp)
   4220c:	000b883a 	mov	r5,zero
   42210:	980d883a 	mov	r6,r19
   42214:	00460900 	call	46090 <memchr>
   42218:	10025926 	beq	r2,zero,42b80 <___vfprintf_internal_r+0x1c24>
   4221c:	d8c14217 	ldw	r3,1288(sp)
   42220:	10cfc83a 	sub	r7,r2,r3
   42224:	99c19e16 	blt	r19,r7,428a0 <___vfprintf_internal_r+0x1944>
   42228:	d9c14615 	stw	r7,1304(sp)
   4222c:	38000916 	blt	r7,zero,42254 <___vfprintf_internal_r+0x12f8>
   42230:	d8014715 	stw	zero,1308(sp)
   42234:	003deb06 	br	419e4 <___vfprintf_internal_r+0xa88>
   42238:	b8c00007 	ldb	r3,0(r23)
   4223c:	003bc606 	br	41158 <___vfprintf_internal_r+0x1fc>
   42240:	d9014217 	ldw	r4,1288(sp)
   42244:	0040e900 	call	40e90 <strlen>
   42248:	d8814615 	stw	r2,1304(sp)
   4224c:	100f883a 	mov	r7,r2
   42250:	103ff70e 	bge	r2,zero,42230 <___vfprintf_internal_r+0x12d4>
   42254:	d8014615 	stw	zero,1304(sp)
   42258:	d8014715 	stw	zero,1308(sp)
   4225c:	003de106 	br	419e4 <___vfprintf_internal_r+0xa88>
   42260:	20c03fcc 	andi	r3,r4,255
   42264:	00800044 	movi	r2,1
   42268:	18802d26 	beq	r3,r2,42320 <___vfprintf_internal_r+0x13c4>
   4226c:	18800e36 	bltu	r3,r2,422a8 <___vfprintf_internal_r+0x134c>
   42270:	00800084 	movi	r2,2
   42274:	1880fa26 	beq	r3,r2,42660 <___vfprintf_internal_r+0x1704>
   42278:	01000174 	movhi	r4,5
   4227c:	21353e04 	addi	r4,r4,-11016
   42280:	0040e900 	call	40e90 <strlen>
   42284:	100f883a 	mov	r7,r2
   42288:	dcc14615 	stw	r19,1304(sp)
   4228c:	9880010e 	bge	r19,r2,42294 <___vfprintf_internal_r+0x1338>
   42290:	d8814615 	stw	r2,1304(sp)
   42294:	00800174 	movhi	r2,5
   42298:	10b53e04 	addi	r2,r2,-11016
   4229c:	dcc14715 	stw	r19,1308(sp)
   422a0:	d8814215 	stw	r2,1288(sp)
   422a4:	003dcf06 	br	419e4 <___vfprintf_internal_r+0xa88>
   422a8:	d9401a04 	addi	r5,sp,104
   422ac:	dd001004 	addi	r20,sp,64
   422b0:	d9414215 	stw	r5,1288(sp)
   422b4:	880a977a 	slli	r5,r17,29
   422b8:	d9814217 	ldw	r6,1288(sp)
   422bc:	8004d0fa 	srli	r2,r16,3
   422c0:	8806d0fa 	srli	r3,r17,3
   422c4:	810001cc 	andi	r4,r16,7
   422c8:	2884b03a 	or	r2,r5,r2
   422cc:	31bfffc4 	addi	r6,r6,-1
   422d0:	21000c04 	addi	r4,r4,48
   422d4:	d9814215 	stw	r6,1288(sp)
   422d8:	10cab03a 	or	r5,r2,r3
   422dc:	31000005 	stb	r4,0(r6)
   422e0:	1021883a 	mov	r16,r2
   422e4:	1823883a 	mov	r17,r3
   422e8:	283ff21e 	bne	r5,zero,422b4 <___vfprintf_internal_r+0x1358>
   422ec:	d8c14d17 	ldw	r3,1332(sp)
   422f0:	1880004c 	andi	r2,r3,1
   422f4:	1005003a 	cmpeq	r2,r2,zero
   422f8:	103db31e 	bne	r2,zero,419c8 <___vfprintf_internal_r+0xa6c>
   422fc:	20803fcc 	andi	r2,r4,255
   42300:	1080201c 	xori	r2,r2,128
   42304:	10bfe004 	addi	r2,r2,-128
   42308:	00c00c04 	movi	r3,48
   4230c:	10fdae26 	beq	r2,r3,419c8 <___vfprintf_internal_r+0xa6c>
   42310:	31bfffc4 	addi	r6,r6,-1
   42314:	d9814215 	stw	r6,1288(sp)
   42318:	30c00005 	stb	r3,0(r6)
   4231c:	003daa06 	br	419c8 <___vfprintf_internal_r+0xa6c>
   42320:	88800068 	cmpgeui	r2,r17,1
   42324:	10002c1e 	bne	r2,zero,423d8 <___vfprintf_internal_r+0x147c>
   42328:	8800021e 	bne	r17,zero,42334 <___vfprintf_internal_r+0x13d8>
   4232c:	00800244 	movi	r2,9
   42330:	14002936 	bltu	r2,r16,423d8 <___vfprintf_internal_r+0x147c>
   42334:	d90019c4 	addi	r4,sp,103
   42338:	dd001004 	addi	r20,sp,64
   4233c:	d9014215 	stw	r4,1288(sp)
   42340:	d9014217 	ldw	r4,1288(sp)
   42344:	80800c04 	addi	r2,r16,48
   42348:	20800005 	stb	r2,0(r4)
   4234c:	003d9e06 	br	419c8 <___vfprintf_internal_r+0xa6c>
   42350:	dc400e17 	ldw	r17,56(sp)
   42354:	07000174 	movhi	fp,5
   42358:	e7354604 	addi	fp,fp,-10984
   4235c:	9425883a 	add	r18,r18,r16
   42360:	8c400044 	addi	r17,r17,1
   42364:	008001c4 	movi	r2,7
   42368:	1f000015 	stw	fp,0(r3)
   4236c:	1c000115 	stw	r16,4(r3)
   42370:	dc800f15 	stw	r18,60(sp)
   42374:	dc400e15 	stw	r17,56(sp)
   42378:	147ddc16 	blt	r2,r17,41aec <___vfprintf_internal_r+0xb90>
   4237c:	18c00204 	addi	r3,r3,8
   42380:	003c7406 	br	41554 <___vfprintf_internal_r+0x5f8>
   42384:	01000084 	movi	r4,2
   42388:	d8000405 	stb	zero,16(sp)
   4238c:	003d8106 	br	41994 <___vfprintf_internal_r+0xa38>
   42390:	d9814d17 	ldw	r6,1332(sp)
   42394:	30c4703a 	and	r2,r6,r3
   42398:	1005003a 	cmpeq	r2,r2,zero
   4239c:	103cb326 	beq	r2,zero,4166c <___vfprintf_internal_r+0x710>
   423a0:	d9014217 	ldw	r4,1288(sp)
   423a4:	94800044 	addi	r18,r18,1
   423a8:	8c400044 	addi	r17,r17,1
   423ac:	008001c4 	movi	r2,7
   423b0:	a9000015 	stw	r4,0(r21)
   423b4:	a8c00115 	stw	r3,4(r21)
   423b8:	dc800f15 	stw	r18,60(sp)
   423bc:	dc400e15 	stw	r17,56(sp)
   423c0:	147e6016 	blt	r2,r17,41d44 <___vfprintf_internal_r+0xde8>
   423c4:	acc00204 	addi	r19,r21,8
   423c8:	003cd106 	br	41710 <___vfprintf_internal_r+0x7b4>
   423cc:	07000174 	movhi	fp,5
   423d0:	e7354604 	addi	fp,fp,-10984
   423d4:	003c4906 	br	414fc <___vfprintf_internal_r+0x5a0>
   423d8:	dd001004 	addi	r20,sp,64
   423dc:	dc801a04 	addi	r18,sp,104
   423e0:	8009883a 	mov	r4,r16
   423e4:	880b883a 	mov	r5,r17
   423e8:	01800284 	movi	r6,10
   423ec:	000f883a 	mov	r7,zero
   423f0:	00488080 	call	48808 <__umoddi3>
   423f4:	12000c04 	addi	r8,r2,48
   423f8:	94bfffc4 	addi	r18,r18,-1
   423fc:	8009883a 	mov	r4,r16
   42400:	880b883a 	mov	r5,r17
   42404:	01800284 	movi	r6,10
   42408:	000f883a 	mov	r7,zero
   4240c:	92000005 	stb	r8,0(r18)
   42410:	004819c0 	call	4819c <__udivdi3>
   42414:	1009883a 	mov	r4,r2
   42418:	1021883a 	mov	r16,r2
   4241c:	18800068 	cmpgeui	r2,r3,1
   42420:	1823883a 	mov	r17,r3
   42424:	103fee1e 	bne	r2,zero,423e0 <___vfprintf_internal_r+0x1484>
   42428:	1800021e 	bne	r3,zero,42434 <___vfprintf_internal_r+0x14d8>
   4242c:	00800244 	movi	r2,9
   42430:	113feb36 	bltu	r2,r4,423e0 <___vfprintf_internal_r+0x1484>
   42434:	94bfffc4 	addi	r18,r18,-1
   42438:	dc814215 	stw	r18,1288(sp)
   4243c:	003fc006 	br	42340 <___vfprintf_internal_r+0x13e4>
   42440:	d9014d17 	ldw	r4,1332(sp)
   42444:	2080004c 	andi	r2,r4,1
   42448:	10009a1e 	bne	r2,zero,426b4 <___vfprintf_internal_r+0x1758>
   4244c:	d9401a04 	addi	r5,sp,104
   42450:	dd001004 	addi	r20,sp,64
   42454:	d9414215 	stw	r5,1288(sp)
   42458:	003d5b06 	br	419c8 <___vfprintf_internal_r+0xa6c>
   4245c:	d9015017 	ldw	r4,1344(sp)
   42460:	b00b883a 	mov	r5,r22
   42464:	d9800d04 	addi	r6,sp,52
   42468:	0040f040 	call	40f04 <__sprint_r>
   4246c:	103c731e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42470:	dc800f17 	ldw	r18,60(sp)
   42474:	d8c01a04 	addi	r3,sp,104
   42478:	003cf906 	br	41860 <___vfprintf_internal_r+0x904>
   4247c:	d8c14d17 	ldw	r3,1332(sp)
   42480:	1880040c 	andi	r2,r3,16
   42484:	1000711e 	bne	r2,zero,4264c <___vfprintf_internal_r+0x16f0>
   42488:	d9014d17 	ldw	r4,1332(sp)
   4248c:	2080100c 	andi	r2,r4,64
   42490:	10006e26 	beq	r2,zero,4264c <___vfprintf_internal_r+0x16f0>
   42494:	3c00000b 	ldhu	r16,0(r7)
   42498:	0023883a 	mov	r17,zero
   4249c:	39c00104 	addi	r7,r7,4
   424a0:	d9c14115 	stw	r7,1284(sp)
   424a4:	003efa06 	br	42090 <___vfprintf_internal_r+0x1134>
   424a8:	dc400e17 	ldw	r17,56(sp)
   424ac:	07000174 	movhi	fp,5
   424b0:	e7354604 	addi	fp,fp,-10984
   424b4:	9425883a 	add	r18,r18,r16
   424b8:	8c400044 	addi	r17,r17,1
   424bc:	008001c4 	movi	r2,7
   424c0:	1f000015 	stw	fp,0(r3)
   424c4:	1c000115 	stw	r16,4(r3)
   424c8:	dc800f15 	stw	r18,60(sp)
   424cc:	dc400e15 	stw	r17,56(sp)
   424d0:	147d7016 	blt	r2,r17,41a94 <___vfprintf_internal_r+0xb38>
   424d4:	18c00204 	addi	r3,r3,8
   424d8:	003d7506 	br	41ab0 <___vfprintf_internal_r+0xb54>
   424dc:	dc800f17 	ldw	r18,60(sp)
   424e0:	dc400e17 	ldw	r17,56(sp)
   424e4:	07000174 	movhi	fp,5
   424e8:	e7354a04 	addi	fp,fp,-10968
   424ec:	003bba06 	br	413d8 <___vfprintf_internal_r+0x47c>
   424f0:	d9015017 	ldw	r4,1344(sp)
   424f4:	b00b883a 	mov	r5,r22
   424f8:	d9800d04 	addi	r6,sp,52
   424fc:	0040f040 	call	40f04 <__sprint_r>
   42500:	103c4e1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42504:	dc800f17 	ldw	r18,60(sp)
   42508:	d8c01a04 	addi	r3,sp,104
   4250c:	003ce306 	br	4189c <___vfprintf_internal_r+0x940>
   42510:	3c000017 	ldw	r16,0(r7)
   42514:	0009883a 	mov	r4,zero
   42518:	39c00104 	addi	r7,r7,4
   4251c:	0023883a 	mov	r17,zero
   42520:	d9c14115 	stw	r7,1284(sp)
   42524:	d8000405 	stb	zero,16(sp)
   42528:	003d1a06 	br	41994 <___vfprintf_internal_r+0xa38>
   4252c:	38800017 	ldw	r2,0(r7)
   42530:	39c00104 	addi	r7,r7,4
   42534:	d9c14115 	stw	r7,1284(sp)
   42538:	1023d7fa 	srai	r17,r2,31
   4253c:	1021883a 	mov	r16,r2
   42540:	003d1206 	br	4198c <___vfprintf_internal_r+0xa30>
   42544:	3c000017 	ldw	r16,0(r7)
   42548:	01000044 	movi	r4,1
   4254c:	39c00104 	addi	r7,r7,4
   42550:	0023883a 	mov	r17,zero
   42554:	d9c14115 	stw	r7,1284(sp)
   42558:	d8000405 	stb	zero,16(sp)
   4255c:	003d0d06 	br	41994 <___vfprintf_internal_r+0xa38>
   42560:	00800174 	movhi	r2,5
   42564:	10b54504 	addi	r2,r2,-10988
   42568:	94800044 	addi	r18,r18,1
   4256c:	8c400044 	addi	r17,r17,1
   42570:	a8800015 	stw	r2,0(r21)
   42574:	00c00044 	movi	r3,1
   42578:	008001c4 	movi	r2,7
   4257c:	a8c00115 	stw	r3,4(r21)
   42580:	dc800f15 	stw	r18,60(sp)
   42584:	dc400e15 	stw	r17,56(sp)
   42588:	1440ca16 	blt	r2,r17,428b4 <___vfprintf_internal_r+0x1958>
   4258c:	a8c00204 	addi	r3,r21,8
   42590:	2000061e 	bne	r4,zero,425ac <___vfprintf_internal_r+0x1650>
   42594:	d9414817 	ldw	r5,1312(sp)
   42598:	2800041e 	bne	r5,zero,425ac <___vfprintf_internal_r+0x1650>
   4259c:	d9814d17 	ldw	r6,1332(sp)
   425a0:	3080004c 	andi	r2,r6,1
   425a4:	1005003a 	cmpeq	r2,r2,zero
   425a8:	103bea1e 	bne	r2,zero,41554 <___vfprintf_internal_r+0x5f8>
   425ac:	00800044 	movi	r2,1
   425b0:	dc400e17 	ldw	r17,56(sp)
   425b4:	18800115 	stw	r2,4(r3)
   425b8:	d8814a17 	ldw	r2,1320(sp)
   425bc:	94800044 	addi	r18,r18,1
   425c0:	8c400044 	addi	r17,r17,1
   425c4:	18800015 	stw	r2,0(r3)
   425c8:	008001c4 	movi	r2,7
   425cc:	dc800f15 	stw	r18,60(sp)
   425d0:	dc400e15 	stw	r17,56(sp)
   425d4:	1440ca16 	blt	r2,r17,42900 <___vfprintf_internal_r+0x19a4>
   425d8:	18c00204 	addi	r3,r3,8
   425dc:	0121c83a 	sub	r16,zero,r4
   425e0:	0400500e 	bge	zero,r16,42724 <___vfprintf_internal_r+0x17c8>
   425e4:	00800404 	movi	r2,16
   425e8:	1400800e 	bge	r2,r16,427ec <___vfprintf_internal_r+0x1890>
   425ec:	1027883a 	mov	r19,r2
   425f0:	07000174 	movhi	fp,5
   425f4:	e7354604 	addi	fp,fp,-10984
   425f8:	050001c4 	movi	r20,7
   425fc:	00000306 	br	4260c <___vfprintf_internal_r+0x16b0>
   42600:	18c00204 	addi	r3,r3,8
   42604:	843ffc04 	addi	r16,r16,-16
   42608:	9c007a0e 	bge	r19,r16,427f4 <___vfprintf_internal_r+0x1898>
   4260c:	94800404 	addi	r18,r18,16
   42610:	8c400044 	addi	r17,r17,1
   42614:	1f000015 	stw	fp,0(r3)
   42618:	1cc00115 	stw	r19,4(r3)
   4261c:	dc800f15 	stw	r18,60(sp)
   42620:	dc400e15 	stw	r17,56(sp)
   42624:	a47ff60e 	bge	r20,r17,42600 <___vfprintf_internal_r+0x16a4>
   42628:	d9015017 	ldw	r4,1344(sp)
   4262c:	b00b883a 	mov	r5,r22
   42630:	d9800d04 	addi	r6,sp,52
   42634:	0040f040 	call	40f04 <__sprint_r>
   42638:	103c001e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   4263c:	dc800f17 	ldw	r18,60(sp)
   42640:	dc400e17 	ldw	r17,56(sp)
   42644:	d8c01a04 	addi	r3,sp,104
   42648:	003fee06 	br	42604 <___vfprintf_internal_r+0x16a8>
   4264c:	3c000017 	ldw	r16,0(r7)
   42650:	0023883a 	mov	r17,zero
   42654:	39c00104 	addi	r7,r7,4
   42658:	d9c14115 	stw	r7,1284(sp)
   4265c:	003e8c06 	br	42090 <___vfprintf_internal_r+0x1134>
   42660:	d9401a04 	addi	r5,sp,104
   42664:	dd001004 	addi	r20,sp,64
   42668:	d9414215 	stw	r5,1288(sp)
   4266c:	d9814517 	ldw	r6,1300(sp)
   42670:	880a973a 	slli	r5,r17,28
   42674:	8004d13a 	srli	r2,r16,4
   42678:	810003cc 	andi	r4,r16,15
   4267c:	3109883a 	add	r4,r6,r4
   42680:	2884b03a 	or	r2,r5,r2
   42684:	21400003 	ldbu	r5,0(r4)
   42688:	d9014217 	ldw	r4,1288(sp)
   4268c:	8806d13a 	srli	r3,r17,4
   42690:	1021883a 	mov	r16,r2
   42694:	213fffc4 	addi	r4,r4,-1
   42698:	d9014215 	stw	r4,1288(sp)
   4269c:	d9814217 	ldw	r6,1288(sp)
   426a0:	10c8b03a 	or	r4,r2,r3
   426a4:	1823883a 	mov	r17,r3
   426a8:	31400005 	stb	r5,0(r6)
   426ac:	203fef1e 	bne	r4,zero,4266c <___vfprintf_internal_r+0x1710>
   426b0:	003cc506 	br	419c8 <___vfprintf_internal_r+0xa6c>
   426b4:	00800c04 	movi	r2,48
   426b8:	d98019c4 	addi	r6,sp,103
   426bc:	dd001004 	addi	r20,sp,64
   426c0:	d88019c5 	stb	r2,103(sp)
   426c4:	d9814215 	stw	r6,1288(sp)
   426c8:	003cbf06 	br	419c8 <___vfprintf_internal_r+0xa6c>
   426cc:	dc400e17 	ldw	r17,56(sp)
   426d0:	07000174 	movhi	fp,5
   426d4:	e7354a04 	addi	fp,fp,-10968
   426d8:	003bc106 	br	415e0 <___vfprintf_internal_r+0x684>
   426dc:	d9414d17 	ldw	r5,1332(sp)
   426e0:	2880040c 	andi	r2,r5,16
   426e4:	10007c26 	beq	r2,zero,428d8 <___vfprintf_internal_r+0x197c>
   426e8:	38800017 	ldw	r2,0(r7)
   426ec:	39c00104 	addi	r7,r7,4
   426f0:	d9c14115 	stw	r7,1284(sp)
   426f4:	d9814c17 	ldw	r6,1328(sp)
   426f8:	d9c14117 	ldw	r7,1284(sp)
   426fc:	11800015 	stw	r6,0(r2)
   42700:	003a7206 	br	410cc <___vfprintf_internal_r+0x170>
   42704:	d9015017 	ldw	r4,1344(sp)
   42708:	b00b883a 	mov	r5,r22
   4270c:	d9800d04 	addi	r6,sp,52
   42710:	0040f040 	call	40f04 <__sprint_r>
   42714:	103bc91e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42718:	dc800f17 	ldw	r18,60(sp)
   4271c:	dc400e17 	ldw	r17,56(sp)
   42720:	d8c01a04 	addi	r3,sp,104
   42724:	d9014817 	ldw	r4,1312(sp)
   42728:	d9414217 	ldw	r5,1288(sp)
   4272c:	8c400044 	addi	r17,r17,1
   42730:	9125883a 	add	r18,r18,r4
   42734:	008001c4 	movi	r2,7
   42738:	19400015 	stw	r5,0(r3)
   4273c:	19000115 	stw	r4,4(r3)
   42740:	dc800f15 	stw	r18,60(sp)
   42744:	dc400e15 	stw	r17,56(sp)
   42748:	147ce816 	blt	r2,r17,41aec <___vfprintf_internal_r+0xb90>
   4274c:	18c00204 	addi	r3,r3,8
   42750:	003b8006 	br	41554 <___vfprintf_internal_r+0x5f8>
   42754:	38c00017 	ldw	r3,0(r7)
   42758:	39000204 	addi	r4,r7,8
   4275c:	d9014115 	stw	r4,1284(sp)
   42760:	d8c14315 	stw	r3,1292(sp)
   42764:	39c00117 	ldw	r7,4(r7)
   42768:	d9c14415 	stw	r7,1296(sp)
   4276c:	003e1a06 	br	41fd8 <___vfprintf_internal_r+0x107c>
   42770:	0005883a 	mov	r2,zero
   42774:	1409c83a 	sub	r4,r2,r16
   42778:	1105803a 	cmpltu	r2,r2,r4
   4277c:	044bc83a 	sub	r5,zero,r17
   42780:	2885c83a 	sub	r2,r5,r2
   42784:	2021883a 	mov	r16,r4
   42788:	1023883a 	mov	r17,r2
   4278c:	01000044 	movi	r4,1
   42790:	00800b44 	movi	r2,45
   42794:	d8800405 	stb	r2,16(sp)
   42798:	003c7e06 	br	41994 <___vfprintf_internal_r+0xa38>
   4279c:	d9015017 	ldw	r4,1344(sp)
   427a0:	b00b883a 	mov	r5,r22
   427a4:	d9800d04 	addi	r6,sp,52
   427a8:	0040f040 	call	40f04 <__sprint_r>
   427ac:	103ba31e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   427b0:	dc800f17 	ldw	r18,60(sp)
   427b4:	dc400e17 	ldw	r17,56(sp)
   427b8:	d9000617 	ldw	r4,24(sp)
   427bc:	d9401a04 	addi	r5,sp,104
   427c0:	003da106 	br	41e48 <___vfprintf_internal_r+0xeec>
   427c4:	d9015017 	ldw	r4,1344(sp)
   427c8:	b00b883a 	mov	r5,r22
   427cc:	d9800d04 	addi	r6,sp,52
   427d0:	0040f040 	call	40f04 <__sprint_r>
   427d4:	103b991e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   427d8:	dc800f17 	ldw	r18,60(sp)
   427dc:	dc400e17 	ldw	r17,56(sp)
   427e0:	d9000617 	ldw	r4,24(sp)
   427e4:	d8c01a04 	addi	r3,sp,104
   427e8:	003d8b06 	br	41e18 <___vfprintf_internal_r+0xebc>
   427ec:	07000174 	movhi	fp,5
   427f0:	e7354604 	addi	fp,fp,-10984
   427f4:	9425883a 	add	r18,r18,r16
   427f8:	8c400044 	addi	r17,r17,1
   427fc:	008001c4 	movi	r2,7
   42800:	1f000015 	stw	fp,0(r3)
   42804:	1c000115 	stw	r16,4(r3)
   42808:	dc800f15 	stw	r18,60(sp)
   4280c:	dc400e15 	stw	r17,56(sp)
   42810:	147fbc16 	blt	r2,r17,42704 <___vfprintf_internal_r+0x17a8>
   42814:	18c00204 	addi	r3,r3,8
   42818:	003fc206 	br	42724 <___vfprintf_internal_r+0x17c8>
   4281c:	d9015017 	ldw	r4,1344(sp)
   42820:	b00b883a 	mov	r5,r22
   42824:	d9800d04 	addi	r6,sp,52
   42828:	0040f040 	call	40f04 <__sprint_r>
   4282c:	103b831e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42830:	dc800f17 	ldw	r18,60(sp)
   42834:	d9000617 	ldw	r4,24(sp)
   42838:	d8c01a04 	addi	r3,sp,104
   4283c:	003cfc06 	br	41c30 <___vfprintf_internal_r+0xcd4>
   42840:	07000174 	movhi	fp,5
   42844:	e7354604 	addi	fp,fp,-10984
   42848:	003bde06 	br	417c4 <___vfprintf_internal_r+0x868>
   4284c:	00800174 	movhi	r2,5
   42850:	10b53404 	addi	r2,r2,-11056
   42854:	d8814215 	stw	r2,1288(sp)
   42858:	003def06 	br	42018 <___vfprintf_internal_r+0x10bc>
   4285c:	d9014317 	ldw	r4,1292(sp)
   42860:	d9414417 	ldw	r5,1296(sp)
   42864:	0047a4c0 	call	47a4c <__isnand>
   42868:	10003926 	beq	r2,zero,42950 <___vfprintf_internal_r+0x19f4>
   4286c:	d9414e17 	ldw	r5,1336(sp)
   42870:	008011c4 	movi	r2,71
   42874:	1140ce16 	blt	r2,r5,42bb0 <___vfprintf_internal_r+0x1c54>
   42878:	01800174 	movhi	r6,5
   4287c:	31b53504 	addi	r6,r6,-11052
   42880:	d9814215 	stw	r6,1288(sp)
   42884:	003de406 	br	42018 <___vfprintf_internal_r+0x10bc>
   42888:	d9014d17 	ldw	r4,1332(sp)
   4288c:	bdc00044 	addi	r23,r23,1
   42890:	b8c00007 	ldb	r3,0(r23)
   42894:	21000814 	ori	r4,r4,32
   42898:	d9014d15 	stw	r4,1332(sp)
   4289c:	003a2e06 	br	41158 <___vfprintf_internal_r+0x1fc>
   428a0:	dcc14615 	stw	r19,1304(sp)
   428a4:	98011016 	blt	r19,zero,42ce8 <___vfprintf_internal_r+0x1d8c>
   428a8:	980f883a 	mov	r7,r19
   428ac:	d8014715 	stw	zero,1308(sp)
   428b0:	003c4c06 	br	419e4 <___vfprintf_internal_r+0xa88>
   428b4:	d9015017 	ldw	r4,1344(sp)
   428b8:	b00b883a 	mov	r5,r22
   428bc:	d9800d04 	addi	r6,sp,52
   428c0:	0040f040 	call	40f04 <__sprint_r>
   428c4:	103b5d1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   428c8:	dc800f17 	ldw	r18,60(sp)
   428cc:	d9000617 	ldw	r4,24(sp)
   428d0:	d8c01a04 	addi	r3,sp,104
   428d4:	003f2e06 	br	42590 <___vfprintf_internal_r+0x1634>
   428d8:	d8c14d17 	ldw	r3,1332(sp)
   428dc:	1880100c 	andi	r2,r3,64
   428e0:	1000a026 	beq	r2,zero,42b64 <___vfprintf_internal_r+0x1c08>
   428e4:	38800017 	ldw	r2,0(r7)
   428e8:	39c00104 	addi	r7,r7,4
   428ec:	d9c14115 	stw	r7,1284(sp)
   428f0:	d9014c17 	ldw	r4,1328(sp)
   428f4:	d9c14117 	ldw	r7,1284(sp)
   428f8:	1100000d 	sth	r4,0(r2)
   428fc:	0039f306 	br	410cc <___vfprintf_internal_r+0x170>
   42900:	d9015017 	ldw	r4,1344(sp)
   42904:	b00b883a 	mov	r5,r22
   42908:	d9800d04 	addi	r6,sp,52
   4290c:	0040f040 	call	40f04 <__sprint_r>
   42910:	103b4a1e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42914:	dc800f17 	ldw	r18,60(sp)
   42918:	dc400e17 	ldw	r17,56(sp)
   4291c:	d9000617 	ldw	r4,24(sp)
   42920:	d8c01a04 	addi	r3,sp,104
   42924:	003f2d06 	br	425dc <___vfprintf_internal_r+0x1680>
   42928:	00800184 	movi	r2,6
   4292c:	14c09a36 	bltu	r2,r19,42b98 <___vfprintf_internal_r+0x1c3c>
   42930:	dcc14615 	stw	r19,1304(sp)
   42934:	9800010e 	bge	r19,zero,4293c <___vfprintf_internal_r+0x19e0>
   42938:	d8014615 	stw	zero,1304(sp)
   4293c:	00800174 	movhi	r2,5
   42940:	10b53704 	addi	r2,r2,-11044
   42944:	980f883a 	mov	r7,r19
   42948:	d8814215 	stw	r2,1288(sp)
   4294c:	003a7206 	br	41318 <___vfprintf_internal_r+0x3bc>
   42950:	00bfffc4 	movi	r2,-1
   42954:	9880e226 	beq	r19,r2,42ce0 <___vfprintf_internal_r+0x1d84>
   42958:	d9414e17 	ldw	r5,1336(sp)
   4295c:	008019c4 	movi	r2,103
   42960:	2880dc26 	beq	r5,r2,42cd4 <___vfprintf_internal_r+0x1d78>
   42964:	008011c4 	movi	r2,71
   42968:	2880da26 	beq	r5,r2,42cd4 <___vfprintf_internal_r+0x1d78>
   4296c:	d9414d17 	ldw	r5,1332(sp)
   42970:	d9014417 	ldw	r4,1296(sp)
   42974:	d9814317 	ldw	r6,1292(sp)
   42978:	29404014 	ori	r5,r5,256
   4297c:	d9414d15 	stw	r5,1332(sp)
   42980:	2000cc16 	blt	r4,zero,42cb4 <___vfprintf_internal_r+0x1d58>
   42984:	3021883a 	mov	r16,r6
   42988:	2023883a 	mov	r17,r4
   4298c:	0039883a 	mov	fp,zero
   42990:	d9414e17 	ldw	r5,1336(sp)
   42994:	00801984 	movi	r2,102
   42998:	2880b726 	beq	r5,r2,42c78 <___vfprintf_internal_r+0x1d1c>
   4299c:	00801184 	movi	r2,70
   429a0:	2880b526 	beq	r5,r2,42c78 <___vfprintf_internal_r+0x1d1c>
   429a4:	00801944 	movi	r2,101
   429a8:	2880c826 	beq	r5,r2,42ccc <___vfprintf_internal_r+0x1d70>
   429ac:	00801144 	movi	r2,69
   429b0:	2880c626 	beq	r5,r2,42ccc <___vfprintf_internal_r+0x1d70>
   429b4:	9829883a 	mov	r20,r19
   429b8:	d9015017 	ldw	r4,1344(sp)
   429bc:	d8800604 	addi	r2,sp,24
   429c0:	880d883a 	mov	r6,r17
   429c4:	d8800115 	stw	r2,4(sp)
   429c8:	d8c00704 	addi	r3,sp,28
   429cc:	d8800804 	addi	r2,sp,32
   429d0:	800b883a 	mov	r5,r16
   429d4:	01c00084 	movi	r7,2
   429d8:	d8c00215 	stw	r3,8(sp)
   429dc:	d8800315 	stw	r2,12(sp)
   429e0:	dd000015 	stw	r20,0(sp)
   429e4:	00431c40 	call	431c4 <_dtoa_r>
   429e8:	d9814e17 	ldw	r6,1336(sp)
   429ec:	d8814215 	stw	r2,1288(sp)
   429f0:	008019c4 	movi	r2,103
   429f4:	30809526 	beq	r6,r2,42c4c <___vfprintf_internal_r+0x1cf0>
   429f8:	d8c14e17 	ldw	r3,1336(sp)
   429fc:	008011c4 	movi	r2,71
   42a00:	18809226 	beq	r3,r2,42c4c <___vfprintf_internal_r+0x1cf0>
   42a04:	d9414217 	ldw	r5,1288(sp)
   42a08:	d9814e17 	ldw	r6,1336(sp)
   42a0c:	00801984 	movi	r2,102
   42a10:	2d25883a 	add	r18,r5,r20
   42a14:	30808626 	beq	r6,r2,42c30 <___vfprintf_internal_r+0x1cd4>
   42a18:	00801184 	movi	r2,70
   42a1c:	30808426 	beq	r6,r2,42c30 <___vfprintf_internal_r+0x1cd4>
   42a20:	000d883a 	mov	r6,zero
   42a24:	000f883a 	mov	r7,zero
   42a28:	880b883a 	mov	r5,r17
   42a2c:	8009883a 	mov	r4,r16
   42a30:	00499880 	call	49988 <__eqdf2>
   42a34:	1000751e 	bne	r2,zero,42c0c <___vfprintf_internal_r+0x1cb0>
   42a38:	9005883a 	mov	r2,r18
   42a3c:	dc800815 	stw	r18,32(sp)
   42a40:	d9014217 	ldw	r4,1288(sp)
   42a44:	d9414e17 	ldw	r5,1336(sp)
   42a48:	00c019c4 	movi	r3,103
   42a4c:	1125c83a 	sub	r18,r2,r4
   42a50:	28c06826 	beq	r5,r3,42bf4 <___vfprintf_internal_r+0x1c98>
   42a54:	008011c4 	movi	r2,71
   42a58:	28806626 	beq	r5,r2,42bf4 <___vfprintf_internal_r+0x1c98>
   42a5c:	d9000617 	ldw	r4,24(sp)
   42a60:	d8c14e17 	ldw	r3,1336(sp)
   42a64:	00801944 	movi	r2,101
   42a68:	10c05516 	blt	r2,r3,42bc0 <___vfprintf_internal_r+0x1c64>
   42a6c:	213fffc4 	addi	r4,r4,-1
   42a70:	d9000615 	stw	r4,24(sp)
   42a74:	d8c00905 	stb	r3,36(sp)
   42a78:	2021883a 	mov	r16,r4
   42a7c:	2000c116 	blt	r4,zero,42d84 <___vfprintf_internal_r+0x1e28>
   42a80:	00800ac4 	movi	r2,43
   42a84:	d8800945 	stb	r2,37(sp)
   42a88:	00800244 	movi	r2,9
   42a8c:	1400af0e 	bge	r2,r16,42d4c <___vfprintf_internal_r+0x1df0>
   42a90:	1027883a 	mov	r19,r2
   42a94:	dc400cc4 	addi	r17,sp,51
   42a98:	8009883a 	mov	r4,r16
   42a9c:	01400284 	movi	r5,10
   42aa0:	004a0700 	call	4a070 <__modsi3>
   42aa4:	10800c04 	addi	r2,r2,48
   42aa8:	8c7fffc4 	addi	r17,r17,-1
   42aac:	8009883a 	mov	r4,r16
   42ab0:	01400284 	movi	r5,10
   42ab4:	88800005 	stb	r2,0(r17)
   42ab8:	004a0100 	call	4a010 <__divsi3>
   42abc:	1021883a 	mov	r16,r2
   42ac0:	98bff516 	blt	r19,r2,42a98 <___vfprintf_internal_r+0x1b3c>
   42ac4:	10c00c04 	addi	r3,r2,48
   42ac8:	d8800b04 	addi	r2,sp,44
   42acc:	108001c4 	addi	r2,r2,7
   42ad0:	897fffc4 	addi	r5,r17,-1
   42ad4:	88ffffc5 	stb	r3,-1(r17)
   42ad8:	2880a72e 	bgeu	r5,r2,42d78 <___vfprintf_internal_r+0x1e1c>
   42adc:	1009883a 	mov	r4,r2
   42ae0:	d9800904 	addi	r6,sp,36
   42ae4:	d8c00984 	addi	r3,sp,38
   42ae8:	28800003 	ldbu	r2,0(r5)
   42aec:	29400044 	addi	r5,r5,1
   42af0:	18800005 	stb	r2,0(r3)
   42af4:	18c00044 	addi	r3,r3,1
   42af8:	293ffb36 	bltu	r5,r4,42ae8 <___vfprintf_internal_r+0x1b8c>
   42afc:	1987c83a 	sub	r3,r3,r6
   42b00:	00800044 	movi	r2,1
   42b04:	d8c14915 	stw	r3,1316(sp)
   42b08:	90cf883a 	add	r7,r18,r3
   42b0c:	1480960e 	bge	r2,r18,42d68 <___vfprintf_internal_r+0x1e0c>
   42b10:	39c00044 	addi	r7,r7,1
   42b14:	d9c14615 	stw	r7,1304(sp)
   42b18:	38003416 	blt	r7,zero,42bec <___vfprintf_internal_r+0x1c90>
   42b1c:	e0803fcc 	andi	r2,fp,255
   42b20:	1080201c 	xori	r2,r2,128
   42b24:	10bfe004 	addi	r2,r2,-128
   42b28:	10004e26 	beq	r2,zero,42c64 <___vfprintf_internal_r+0x1d08>
   42b2c:	00800b44 	movi	r2,45
   42b30:	dc814815 	stw	r18,1312(sp)
   42b34:	d8014715 	stw	zero,1308(sp)
   42b38:	d8800405 	stb	r2,16(sp)
   42b3c:	003bab06 	br	419ec <___vfprintf_internal_r+0xa90>
   42b40:	00800b44 	movi	r2,45
   42b44:	d8800405 	stb	r2,16(sp)
   42b48:	003d2d06 	br	42000 <___vfprintf_internal_r+0x10a4>
   42b4c:	d9015017 	ldw	r4,1344(sp)
   42b50:	b00b883a 	mov	r5,r22
   42b54:	d9800d04 	addi	r6,sp,52
   42b58:	0040f040 	call	40f04 <__sprint_r>
   42b5c:	103ab71e 	bne	r2,zero,4163c <___vfprintf_internal_r+0x6e0>
   42b60:	003ab506 	br	41638 <___vfprintf_internal_r+0x6dc>
   42b64:	38800017 	ldw	r2,0(r7)
   42b68:	39c00104 	addi	r7,r7,4
   42b6c:	d9c14115 	stw	r7,1284(sp)
   42b70:	d9414c17 	ldw	r5,1328(sp)
   42b74:	d9c14117 	ldw	r7,1284(sp)
   42b78:	11400015 	stw	r5,0(r2)
   42b7c:	00395306 	br	410cc <___vfprintf_internal_r+0x170>
   42b80:	980f883a 	mov	r7,r19
   42b84:	dcc14615 	stw	r19,1304(sp)
   42b88:	d8014715 	stw	zero,1308(sp)
   42b8c:	003b9506 	br	419e4 <___vfprintf_internal_r+0xa88>
   42b90:	0027883a 	mov	r19,zero
   42b94:	00397206 	br	41160 <___vfprintf_internal_r+0x204>
   42b98:	00c00174 	movhi	r3,5
   42b9c:	18f53704 	addi	r3,r3,-11044
   42ba0:	100f883a 	mov	r7,r2
   42ba4:	d8814615 	stw	r2,1304(sp)
   42ba8:	d8c14215 	stw	r3,1288(sp)
   42bac:	0039da06 	br	41318 <___vfprintf_internal_r+0x3bc>
   42bb0:	00800174 	movhi	r2,5
   42bb4:	10b53604 	addi	r2,r2,-11048
   42bb8:	d8814215 	stw	r2,1288(sp)
   42bbc:	003d1606 	br	42018 <___vfprintf_internal_r+0x10bc>
   42bc0:	d9414e17 	ldw	r5,1336(sp)
   42bc4:	00801984 	movi	r2,102
   42bc8:	28804926 	beq	r5,r2,42cf0 <___vfprintf_internal_r+0x1d94>
   42bcc:	200f883a 	mov	r7,r4
   42bd0:	24805716 	blt	r4,r18,42d30 <___vfprintf_internal_r+0x1dd4>
   42bd4:	d9414d17 	ldw	r5,1332(sp)
   42bd8:	2880004c 	andi	r2,r5,1
   42bdc:	10000126 	beq	r2,zero,42be4 <___vfprintf_internal_r+0x1c88>
   42be0:	21c00044 	addi	r7,r4,1
   42be4:	d9c14615 	stw	r7,1304(sp)
   42be8:	383fcc0e 	bge	r7,zero,42b1c <___vfprintf_internal_r+0x1bc0>
   42bec:	d8014615 	stw	zero,1304(sp)
   42bf0:	003fca06 	br	42b1c <___vfprintf_internal_r+0x1bc0>
   42bf4:	d9000617 	ldw	r4,24(sp)
   42bf8:	00bfff04 	movi	r2,-4
   42bfc:	1100480e 	bge	r2,r4,42d20 <___vfprintf_internal_r+0x1dc4>
   42c00:	99004716 	blt	r19,r4,42d20 <___vfprintf_internal_r+0x1dc4>
   42c04:	d8c14e15 	stw	r3,1336(sp)
   42c08:	003ff006 	br	42bcc <___vfprintf_internal_r+0x1c70>
   42c0c:	d8800817 	ldw	r2,32(sp)
   42c10:	14bf8b2e 	bgeu	r2,r18,42a40 <___vfprintf_internal_r+0x1ae4>
   42c14:	9007883a 	mov	r3,r18
   42c18:	01000c04 	movi	r4,48
   42c1c:	11000005 	stb	r4,0(r2)
   42c20:	10800044 	addi	r2,r2,1
   42c24:	d8800815 	stw	r2,32(sp)
   42c28:	18bffc1e 	bne	r3,r2,42c1c <___vfprintf_internal_r+0x1cc0>
   42c2c:	003f8406 	br	42a40 <___vfprintf_internal_r+0x1ae4>
   42c30:	d8814217 	ldw	r2,1288(sp)
   42c34:	10c00007 	ldb	r3,0(r2)
   42c38:	00800c04 	movi	r2,48
   42c3c:	18805b26 	beq	r3,r2,42dac <___vfprintf_internal_r+0x1e50>
   42c40:	d9000617 	ldw	r4,24(sp)
   42c44:	9125883a 	add	r18,r18,r4
   42c48:	003f7506 	br	42a20 <___vfprintf_internal_r+0x1ac4>
   42c4c:	d9014d17 	ldw	r4,1332(sp)
   42c50:	2080004c 	andi	r2,r4,1
   42c54:	1005003a 	cmpeq	r2,r2,zero
   42c58:	103f6a26 	beq	r2,zero,42a04 <___vfprintf_internal_r+0x1aa8>
   42c5c:	d8800817 	ldw	r2,32(sp)
   42c60:	003f7706 	br	42a40 <___vfprintf_internal_r+0x1ae4>
   42c64:	d9c14615 	stw	r7,1304(sp)
   42c68:	38004d16 	blt	r7,zero,42da0 <___vfprintf_internal_r+0x1e44>
   42c6c:	dc814815 	stw	r18,1312(sp)
   42c70:	d8014715 	stw	zero,1308(sp)
   42c74:	003b5b06 	br	419e4 <___vfprintf_internal_r+0xa88>
   42c78:	d9015017 	ldw	r4,1344(sp)
   42c7c:	d8800604 	addi	r2,sp,24
   42c80:	d8800115 	stw	r2,4(sp)
   42c84:	d8c00704 	addi	r3,sp,28
   42c88:	d8800804 	addi	r2,sp,32
   42c8c:	800b883a 	mov	r5,r16
   42c90:	880d883a 	mov	r6,r17
   42c94:	01c000c4 	movi	r7,3
   42c98:	d8c00215 	stw	r3,8(sp)
   42c9c:	d8800315 	stw	r2,12(sp)
   42ca0:	dcc00015 	stw	r19,0(sp)
   42ca4:	9829883a 	mov	r20,r19
   42ca8:	00431c40 	call	431c4 <_dtoa_r>
   42cac:	d8814215 	stw	r2,1288(sp)
   42cb0:	003f5106 	br	429f8 <___vfprintf_internal_r+0x1a9c>
   42cb4:	d8c14317 	ldw	r3,1292(sp)
   42cb8:	d9014417 	ldw	r4,1296(sp)
   42cbc:	07000b44 	movi	fp,45
   42cc0:	1821883a 	mov	r16,r3
   42cc4:	2460003c 	xorhi	r17,r4,32768
   42cc8:	003f3106 	br	42990 <___vfprintf_internal_r+0x1a34>
   42ccc:	9d000044 	addi	r20,r19,1
   42cd0:	003f3906 	br	429b8 <___vfprintf_internal_r+0x1a5c>
   42cd4:	983f251e 	bne	r19,zero,4296c <___vfprintf_internal_r+0x1a10>
   42cd8:	04c00044 	movi	r19,1
   42cdc:	003f2306 	br	4296c <___vfprintf_internal_r+0x1a10>
   42ce0:	04c00184 	movi	r19,6
   42ce4:	003f2106 	br	4296c <___vfprintf_internal_r+0x1a10>
   42ce8:	d8014615 	stw	zero,1304(sp)
   42cec:	003eee06 	br	428a8 <___vfprintf_internal_r+0x194c>
   42cf0:	200f883a 	mov	r7,r4
   42cf4:	0100370e 	bge	zero,r4,42dd4 <___vfprintf_internal_r+0x1e78>
   42cf8:	9800031e 	bne	r19,zero,42d08 <___vfprintf_internal_r+0x1dac>
   42cfc:	d9814d17 	ldw	r6,1332(sp)
   42d00:	3080004c 	andi	r2,r6,1
   42d04:	103fb726 	beq	r2,zero,42be4 <___vfprintf_internal_r+0x1c88>
   42d08:	20800044 	addi	r2,r4,1
   42d0c:	98a7883a 	add	r19,r19,r2
   42d10:	dcc14615 	stw	r19,1304(sp)
   42d14:	980f883a 	mov	r7,r19
   42d18:	983f800e 	bge	r19,zero,42b1c <___vfprintf_internal_r+0x1bc0>
   42d1c:	003fb306 	br	42bec <___vfprintf_internal_r+0x1c90>
   42d20:	d9814e17 	ldw	r6,1336(sp)
   42d24:	31bfff84 	addi	r6,r6,-2
   42d28:	d9814e15 	stw	r6,1336(sp)
   42d2c:	003f4c06 	br	42a60 <___vfprintf_internal_r+0x1b04>
   42d30:	0100180e 	bge	zero,r4,42d94 <___vfprintf_internal_r+0x1e38>
   42d34:	00800044 	movi	r2,1
   42d38:	1485883a 	add	r2,r2,r18
   42d3c:	d8814615 	stw	r2,1304(sp)
   42d40:	100f883a 	mov	r7,r2
   42d44:	103f750e 	bge	r2,zero,42b1c <___vfprintf_internal_r+0x1bc0>
   42d48:	003fa806 	br	42bec <___vfprintf_internal_r+0x1c90>
   42d4c:	80c00c04 	addi	r3,r16,48
   42d50:	00800c04 	movi	r2,48
   42d54:	d8c009c5 	stb	r3,39(sp)
   42d58:	d9800904 	addi	r6,sp,36
   42d5c:	d8c00a04 	addi	r3,sp,40
   42d60:	d8800985 	stb	r2,38(sp)
   42d64:	003f6506 	br	42afc <___vfprintf_internal_r+0x1ba0>
   42d68:	d9014d17 	ldw	r4,1332(sp)
   42d6c:	2084703a 	and	r2,r4,r2
   42d70:	103f9c26 	beq	r2,zero,42be4 <___vfprintf_internal_r+0x1c88>
   42d74:	003f6606 	br	42b10 <___vfprintf_internal_r+0x1bb4>
   42d78:	d9800904 	addi	r6,sp,36
   42d7c:	d8c00984 	addi	r3,sp,38
   42d80:	003f5e06 	br	42afc <___vfprintf_internal_r+0x1ba0>
   42d84:	00800b44 	movi	r2,45
   42d88:	0121c83a 	sub	r16,zero,r4
   42d8c:	d8800945 	stb	r2,37(sp)
   42d90:	003f3d06 	br	42a88 <___vfprintf_internal_r+0x1b2c>
   42d94:	00800084 	movi	r2,2
   42d98:	1105c83a 	sub	r2,r2,r4
   42d9c:	003fe606 	br	42d38 <___vfprintf_internal_r+0x1ddc>
   42da0:	d8014615 	stw	zero,1304(sp)
   42da4:	dc814815 	stw	r18,1312(sp)
   42da8:	003fb106 	br	42c70 <___vfprintf_internal_r+0x1d14>
   42dac:	000d883a 	mov	r6,zero
   42db0:	000f883a 	mov	r7,zero
   42db4:	8009883a 	mov	r4,r16
   42db8:	880b883a 	mov	r5,r17
   42dbc:	0049a100 	call	49a10 <__nedf2>
   42dc0:	103f9f26 	beq	r2,zero,42c40 <___vfprintf_internal_r+0x1ce4>
   42dc4:	00800044 	movi	r2,1
   42dc8:	1509c83a 	sub	r4,r2,r20
   42dcc:	d9000615 	stw	r4,24(sp)
   42dd0:	003f9b06 	br	42c40 <___vfprintf_internal_r+0x1ce4>
   42dd4:	98000d1e 	bne	r19,zero,42e0c <___vfprintf_internal_r+0x1eb0>
   42dd8:	d8c14d17 	ldw	r3,1332(sp)
   42ddc:	1880004c 	andi	r2,r3,1
   42de0:	10000a1e 	bne	r2,zero,42e0c <___vfprintf_internal_r+0x1eb0>
   42de4:	01000044 	movi	r4,1
   42de8:	200f883a 	mov	r7,r4
   42dec:	d9014615 	stw	r4,1304(sp)
   42df0:	003f4a06 	br	42b1c <___vfprintf_internal_r+0x1bc0>
   42df4:	3cc00017 	ldw	r19,0(r7)
   42df8:	39c00104 	addi	r7,r7,4
   42dfc:	983d0e0e 	bge	r19,zero,42238 <___vfprintf_internal_r+0x12dc>
   42e00:	b8c00007 	ldb	r3,0(r23)
   42e04:	04ffffc4 	movi	r19,-1
   42e08:	0038d306 	br	41158 <___vfprintf_internal_r+0x1fc>
   42e0c:	9cc00084 	addi	r19,r19,2
   42e10:	dcc14615 	stw	r19,1304(sp)
   42e14:	980f883a 	mov	r7,r19
   42e18:	983f400e 	bge	r19,zero,42b1c <___vfprintf_internal_r+0x1bc0>
   42e1c:	003f7306 	br	42bec <___vfprintf_internal_r+0x1c90>

00042e20 <__vfprintf_internal>:
   42e20:	00800174 	movhi	r2,5
   42e24:	10bc8504 	addi	r2,r2,-3564
   42e28:	2013883a 	mov	r9,r4
   42e2c:	11000017 	ldw	r4,0(r2)
   42e30:	2805883a 	mov	r2,r5
   42e34:	300f883a 	mov	r7,r6
   42e38:	480b883a 	mov	r5,r9
   42e3c:	100d883a 	mov	r6,r2
   42e40:	0040f5c1 	jmpi	40f5c <___vfprintf_internal_r>

00042e44 <__swsetup_r>:
   42e44:	00800174 	movhi	r2,5
   42e48:	10bc8504 	addi	r2,r2,-3564
   42e4c:	10c00017 	ldw	r3,0(r2)
   42e50:	defffd04 	addi	sp,sp,-12
   42e54:	dc400115 	stw	r17,4(sp)
   42e58:	dc000015 	stw	r16,0(sp)
   42e5c:	dfc00215 	stw	ra,8(sp)
   42e60:	2023883a 	mov	r17,r4
   42e64:	2821883a 	mov	r16,r5
   42e68:	18000226 	beq	r3,zero,42e74 <__swsetup_r+0x30>
   42e6c:	18800e17 	ldw	r2,56(r3)
   42e70:	10001f26 	beq	r2,zero,42ef0 <__swsetup_r+0xac>
   42e74:	8100030b 	ldhu	r4,12(r16)
   42e78:	2080020c 	andi	r2,r4,8
   42e7c:	10002826 	beq	r2,zero,42f20 <__swsetup_r+0xdc>
   42e80:	81400417 	ldw	r5,16(r16)
   42e84:	28001d26 	beq	r5,zero,42efc <__swsetup_r+0xb8>
   42e88:	2080004c 	andi	r2,r4,1
   42e8c:	1005003a 	cmpeq	r2,r2,zero
   42e90:	10000b26 	beq	r2,zero,42ec0 <__swsetup_r+0x7c>
   42e94:	2080008c 	andi	r2,r4,2
   42e98:	10001226 	beq	r2,zero,42ee4 <__swsetup_r+0xa0>
   42e9c:	0005883a 	mov	r2,zero
   42ea0:	80800215 	stw	r2,8(r16)
   42ea4:	28000b26 	beq	r5,zero,42ed4 <__swsetup_r+0x90>
   42ea8:	0005883a 	mov	r2,zero
   42eac:	dfc00217 	ldw	ra,8(sp)
   42eb0:	dc400117 	ldw	r17,4(sp)
   42eb4:	dc000017 	ldw	r16,0(sp)
   42eb8:	dec00304 	addi	sp,sp,12
   42ebc:	f800283a 	ret
   42ec0:	80800517 	ldw	r2,20(r16)
   42ec4:	80000215 	stw	zero,8(r16)
   42ec8:	0085c83a 	sub	r2,zero,r2
   42ecc:	80800615 	stw	r2,24(r16)
   42ed0:	283ff51e 	bne	r5,zero,42ea8 <__swsetup_r+0x64>
   42ed4:	2080200c 	andi	r2,r4,128
   42ed8:	103ff326 	beq	r2,zero,42ea8 <__swsetup_r+0x64>
   42edc:	00bfffc4 	movi	r2,-1
   42ee0:	003ff206 	br	42eac <__swsetup_r+0x68>
   42ee4:	80800517 	ldw	r2,20(r16)
   42ee8:	80800215 	stw	r2,8(r16)
   42eec:	003fed06 	br	42ea4 <__swsetup_r+0x60>
   42ef0:	1809883a 	mov	r4,r3
   42ef4:	0044a100 	call	44a10 <__sinit>
   42ef8:	003fde06 	br	42e74 <__swsetup_r+0x30>
   42efc:	20c0a00c 	andi	r3,r4,640
   42f00:	00808004 	movi	r2,512
   42f04:	18bfe026 	beq	r3,r2,42e88 <__swsetup_r+0x44>
   42f08:	8809883a 	mov	r4,r17
   42f0c:	800b883a 	mov	r5,r16
   42f10:	00457bc0 	call	457bc <__smakebuf_r>
   42f14:	8100030b 	ldhu	r4,12(r16)
   42f18:	81400417 	ldw	r5,16(r16)
   42f1c:	003fda06 	br	42e88 <__swsetup_r+0x44>
   42f20:	2080040c 	andi	r2,r4,16
   42f24:	103fed26 	beq	r2,zero,42edc <__swsetup_r+0x98>
   42f28:	2080010c 	andi	r2,r4,4
   42f2c:	10001226 	beq	r2,zero,42f78 <__swsetup_r+0x134>
   42f30:	81400c17 	ldw	r5,48(r16)
   42f34:	28000526 	beq	r5,zero,42f4c <__swsetup_r+0x108>
   42f38:	80801004 	addi	r2,r16,64
   42f3c:	28800226 	beq	r5,r2,42f48 <__swsetup_r+0x104>
   42f40:	8809883a 	mov	r4,r17
   42f44:	0044dc80 	call	44dc8 <_free_r>
   42f48:	80000c15 	stw	zero,48(r16)
   42f4c:	8080030b 	ldhu	r2,12(r16)
   42f50:	81400417 	ldw	r5,16(r16)
   42f54:	80000115 	stw	zero,4(r16)
   42f58:	10bff6cc 	andi	r2,r2,65499
   42f5c:	8080030d 	sth	r2,12(r16)
   42f60:	81400015 	stw	r5,0(r16)
   42f64:	8080030b 	ldhu	r2,12(r16)
   42f68:	10800214 	ori	r2,r2,8
   42f6c:	113fffcc 	andi	r4,r2,65535
   42f70:	8080030d 	sth	r2,12(r16)
   42f74:	003fc306 	br	42e84 <__swsetup_r+0x40>
   42f78:	81400417 	ldw	r5,16(r16)
   42f7c:	003ff906 	br	42f64 <__swsetup_r+0x120>

00042f80 <quorem>:
   42f80:	28c00417 	ldw	r3,16(r5)
   42f84:	20800417 	ldw	r2,16(r4)
   42f88:	defff104 	addi	sp,sp,-60
   42f8c:	dfc00e15 	stw	ra,56(sp)
   42f90:	df000d15 	stw	fp,52(sp)
   42f94:	ddc00c15 	stw	r23,48(sp)
   42f98:	dd800b15 	stw	r22,44(sp)
   42f9c:	dd400a15 	stw	r21,40(sp)
   42fa0:	dd000915 	stw	r20,36(sp)
   42fa4:	dcc00815 	stw	r19,32(sp)
   42fa8:	dc800715 	stw	r18,28(sp)
   42fac:	dc400615 	stw	r17,24(sp)
   42fb0:	dc000515 	stw	r16,20(sp)
   42fb4:	d9000315 	stw	r4,12(sp)
   42fb8:	d9400415 	stw	r5,16(sp)
   42fbc:	10c07f16 	blt	r2,r3,431bc <quorem+0x23c>
   42fc0:	1d3fffc4 	addi	r20,r3,-1
   42fc4:	d8c00417 	ldw	r3,16(sp)
   42fc8:	d9000317 	ldw	r4,12(sp)
   42fcc:	a505883a 	add	r2,r20,r20
   42fd0:	1085883a 	add	r2,r2,r2
   42fd4:	1cc00504 	addi	r19,r3,20
   42fd8:	25c00504 	addi	r23,r4,20
   42fdc:	98ad883a 	add	r22,r19,r2
   42fe0:	15c7883a 	add	r3,r2,r23
   42fe4:	b1400017 	ldw	r5,0(r22)
   42fe8:	19000017 	ldw	r4,0(r3)
   42fec:	d8c00015 	stw	r3,0(sp)
   42ff0:	29400044 	addi	r5,r5,1
   42ff4:	d9000215 	stw	r4,8(sp)
   42ff8:	004a0d00 	call	4a0d0 <__udivsi3>
   42ffc:	1039883a 	mov	fp,r2
   43000:	10003d1e 	bne	r2,zero,430f8 <quorem+0x178>
   43004:	d9400417 	ldw	r5,16(sp)
   43008:	d9000317 	ldw	r4,12(sp)
   4300c:	00464e80 	call	464e8 <__mcmp>
   43010:	10002c16 	blt	r2,zero,430c4 <quorem+0x144>
   43014:	e7000044 	addi	fp,fp,1
   43018:	b80f883a 	mov	r7,r23
   4301c:	0011883a 	mov	r8,zero
   43020:	0009883a 	mov	r4,zero
   43024:	99400017 	ldw	r5,0(r19)
   43028:	38c00017 	ldw	r3,0(r7)
   4302c:	9cc00104 	addi	r19,r19,4
   43030:	28bfffcc 	andi	r2,r5,65535
   43034:	2085883a 	add	r2,r4,r2
   43038:	11bfffcc 	andi	r6,r2,65535
   4303c:	193fffcc 	andi	r4,r3,65535
   43040:	1004d43a 	srli	r2,r2,16
   43044:	280ad43a 	srli	r5,r5,16
   43048:	2189c83a 	sub	r4,r4,r6
   4304c:	2209883a 	add	r4,r4,r8
   43050:	1806d43a 	srli	r3,r3,16
   43054:	288b883a 	add	r5,r5,r2
   43058:	200dd43a 	srai	r6,r4,16
   4305c:	28bfffcc 	andi	r2,r5,65535
   43060:	1887c83a 	sub	r3,r3,r2
   43064:	1987883a 	add	r3,r3,r6
   43068:	3900000d 	sth	r4,0(r7)
   4306c:	38c0008d 	sth	r3,2(r7)
   43070:	2808d43a 	srli	r4,r5,16
   43074:	39c00104 	addi	r7,r7,4
   43078:	1811d43a 	srai	r8,r3,16
   4307c:	b4ffe92e 	bgeu	r22,r19,43024 <quorem+0xa4>
   43080:	a505883a 	add	r2,r20,r20
   43084:	1085883a 	add	r2,r2,r2
   43088:	b885883a 	add	r2,r23,r2
   4308c:	10c00017 	ldw	r3,0(r2)
   43090:	18000c1e 	bne	r3,zero,430c4 <quorem+0x144>
   43094:	113fff04 	addi	r4,r2,-4
   43098:	b900082e 	bgeu	r23,r4,430bc <quorem+0x13c>
   4309c:	10bfff17 	ldw	r2,-4(r2)
   430a0:	10000326 	beq	r2,zero,430b0 <quorem+0x130>
   430a4:	00000506 	br	430bc <quorem+0x13c>
   430a8:	20800017 	ldw	r2,0(r4)
   430ac:	1000031e 	bne	r2,zero,430bc <quorem+0x13c>
   430b0:	213fff04 	addi	r4,r4,-4
   430b4:	a53fffc4 	addi	r20,r20,-1
   430b8:	b93ffb36 	bltu	r23,r4,430a8 <quorem+0x128>
   430bc:	d9000317 	ldw	r4,12(sp)
   430c0:	25000415 	stw	r20,16(r4)
   430c4:	e005883a 	mov	r2,fp
   430c8:	dfc00e17 	ldw	ra,56(sp)
   430cc:	df000d17 	ldw	fp,52(sp)
   430d0:	ddc00c17 	ldw	r23,48(sp)
   430d4:	dd800b17 	ldw	r22,44(sp)
   430d8:	dd400a17 	ldw	r21,40(sp)
   430dc:	dd000917 	ldw	r20,36(sp)
   430e0:	dcc00817 	ldw	r19,32(sp)
   430e4:	dc800717 	ldw	r18,28(sp)
   430e8:	dc400617 	ldw	r17,24(sp)
   430ec:	dc000517 	ldw	r16,20(sp)
   430f0:	dec00f04 	addi	sp,sp,60
   430f4:	f800283a 	ret
   430f8:	b823883a 	mov	r17,r23
   430fc:	9825883a 	mov	r18,r19
   43100:	d8000115 	stw	zero,4(sp)
   43104:	002b883a 	mov	r21,zero
   43108:	94000017 	ldw	r16,0(r18)
   4310c:	e009883a 	mov	r4,fp
   43110:	94800104 	addi	r18,r18,4
   43114:	817fffcc 	andi	r5,r16,65535
   43118:	004a0e00 	call	4a0e0 <__mulsi3>
   4311c:	800ad43a 	srli	r5,r16,16
   43120:	e009883a 	mov	r4,fp
   43124:	a8a1883a 	add	r16,r21,r2
   43128:	004a0e00 	call	4a0e0 <__mulsi3>
   4312c:	89000017 	ldw	r4,0(r17)
   43130:	80ffffcc 	andi	r3,r16,65535
   43134:	8020d43a 	srli	r16,r16,16
   43138:	217fffcc 	andi	r5,r4,65535
   4313c:	28cbc83a 	sub	r5,r5,r3
   43140:	d8c00117 	ldw	r3,4(sp)
   43144:	2008d43a 	srli	r4,r4,16
   43148:	1405883a 	add	r2,r2,r16
   4314c:	28cb883a 	add	r5,r5,r3
   43150:	280dd43a 	srai	r6,r5,16
   43154:	10ffffcc 	andi	r3,r2,65535
   43158:	20c9c83a 	sub	r4,r4,r3
   4315c:	2189883a 	add	r4,r4,r6
   43160:	8900008d 	sth	r4,2(r17)
   43164:	2009d43a 	srai	r4,r4,16
   43168:	8940000d 	sth	r5,0(r17)
   4316c:	102ad43a 	srli	r21,r2,16
   43170:	8c400104 	addi	r17,r17,4
   43174:	d9000115 	stw	r4,4(sp)
   43178:	b4bfe32e 	bgeu	r22,r18,43108 <quorem+0x188>
   4317c:	d9000217 	ldw	r4,8(sp)
   43180:	203fa01e 	bne	r4,zero,43004 <quorem+0x84>
   43184:	d8800017 	ldw	r2,0(sp)
   43188:	10ffff04 	addi	r3,r2,-4
   4318c:	b8c0082e 	bgeu	r23,r3,431b0 <quorem+0x230>
   43190:	10bfff17 	ldw	r2,-4(r2)
   43194:	10000326 	beq	r2,zero,431a4 <quorem+0x224>
   43198:	00000506 	br	431b0 <quorem+0x230>
   4319c:	18800017 	ldw	r2,0(r3)
   431a0:	1000031e 	bne	r2,zero,431b0 <quorem+0x230>
   431a4:	18ffff04 	addi	r3,r3,-4
   431a8:	a53fffc4 	addi	r20,r20,-1
   431ac:	b8fffb36 	bltu	r23,r3,4319c <quorem+0x21c>
   431b0:	d8c00317 	ldw	r3,12(sp)
   431b4:	1d000415 	stw	r20,16(r3)
   431b8:	003f9206 	br	43004 <quorem+0x84>
   431bc:	0005883a 	mov	r2,zero
   431c0:	003fc106 	br	430c8 <quorem+0x148>

000431c4 <_dtoa_r>:
   431c4:	22001017 	ldw	r8,64(r4)
   431c8:	deffda04 	addi	sp,sp,-152
   431cc:	dd402115 	stw	r21,132(sp)
   431d0:	dd002015 	stw	r20,128(sp)
   431d4:	dc801e15 	stw	r18,120(sp)
   431d8:	dc401d15 	stw	r17,116(sp)
   431dc:	dfc02515 	stw	ra,148(sp)
   431e0:	df002415 	stw	fp,144(sp)
   431e4:	ddc02315 	stw	r23,140(sp)
   431e8:	dd802215 	stw	r22,136(sp)
   431ec:	dcc01f15 	stw	r19,124(sp)
   431f0:	dc001c15 	stw	r16,112(sp)
   431f4:	d9001615 	stw	r4,88(sp)
   431f8:	3023883a 	mov	r17,r6
   431fc:	2829883a 	mov	r20,r5
   43200:	d9c01715 	stw	r7,92(sp)
   43204:	dc802817 	ldw	r18,160(sp)
   43208:	302b883a 	mov	r21,r6
   4320c:	40000a26 	beq	r8,zero,43238 <_dtoa_r+0x74>
   43210:	20801117 	ldw	r2,68(r4)
   43214:	400b883a 	mov	r5,r8
   43218:	40800115 	stw	r2,4(r8)
   4321c:	20c01117 	ldw	r3,68(r4)
   43220:	00800044 	movi	r2,1
   43224:	10c4983a 	sll	r2,r2,r3
   43228:	40800215 	stw	r2,8(r8)
   4322c:	004638c0 	call	4638c <_Bfree>
   43230:	d8c01617 	ldw	r3,88(sp)
   43234:	18001015 	stw	zero,64(r3)
   43238:	8800a316 	blt	r17,zero,434c8 <_dtoa_r+0x304>
   4323c:	90000015 	stw	zero,0(r18)
   43240:	a8dffc2c 	andhi	r3,r21,32752
   43244:	009ffc34 	movhi	r2,32752
   43248:	18809126 	beq	r3,r2,43490 <_dtoa_r+0x2cc>
   4324c:	000d883a 	mov	r6,zero
   43250:	000f883a 	mov	r7,zero
   43254:	a009883a 	mov	r4,r20
   43258:	a80b883a 	mov	r5,r21
   4325c:	dd001215 	stw	r20,72(sp)
   43260:	dd401315 	stw	r21,76(sp)
   43264:	0049a100 	call	49a10 <__nedf2>
   43268:	1000171e 	bne	r2,zero,432c8 <_dtoa_r+0x104>
   4326c:	d9802717 	ldw	r6,156(sp)
   43270:	00800044 	movi	r2,1
   43274:	30800015 	stw	r2,0(r6)
   43278:	d8802917 	ldw	r2,164(sp)
   4327c:	10029b26 	beq	r2,zero,43cec <_dtoa_r+0xb28>
   43280:	d9002917 	ldw	r4,164(sp)
   43284:	00800174 	movhi	r2,5
   43288:	10b54544 	addi	r2,r2,-10987
   4328c:	10ffffc4 	addi	r3,r2,-1
   43290:	20800015 	stw	r2,0(r4)
   43294:	1805883a 	mov	r2,r3
   43298:	dfc02517 	ldw	ra,148(sp)
   4329c:	df002417 	ldw	fp,144(sp)
   432a0:	ddc02317 	ldw	r23,140(sp)
   432a4:	dd802217 	ldw	r22,136(sp)
   432a8:	dd402117 	ldw	r21,132(sp)
   432ac:	dd002017 	ldw	r20,128(sp)
   432b0:	dcc01f17 	ldw	r19,124(sp)
   432b4:	dc801e17 	ldw	r18,120(sp)
   432b8:	dc401d17 	ldw	r17,116(sp)
   432bc:	dc001c17 	ldw	r16,112(sp)
   432c0:	dec02604 	addi	sp,sp,152
   432c4:	f800283a 	ret
   432c8:	d9001617 	ldw	r4,88(sp)
   432cc:	d9401217 	ldw	r5,72(sp)
   432d0:	d8800104 	addi	r2,sp,4
   432d4:	a80d883a 	mov	r6,r21
   432d8:	d9c00204 	addi	r7,sp,8
   432dc:	d8800015 	stw	r2,0(sp)
   432e0:	00469c80 	call	469c8 <__d2b>
   432e4:	d8800715 	stw	r2,28(sp)
   432e8:	a804d53a 	srli	r2,r21,20
   432ec:	1101ffcc 	andi	r4,r2,2047
   432f0:	20008626 	beq	r4,zero,4350c <_dtoa_r+0x348>
   432f4:	d8c01217 	ldw	r3,72(sp)
   432f8:	00800434 	movhi	r2,16
   432fc:	10bfffc4 	addi	r2,r2,-1
   43300:	ddc00117 	ldw	r23,4(sp)
   43304:	a884703a 	and	r2,r21,r2
   43308:	1811883a 	mov	r8,r3
   4330c:	124ffc34 	orhi	r9,r2,16368
   43310:	25bf0044 	addi	r22,r4,-1023
   43314:	d8000815 	stw	zero,32(sp)
   43318:	0005883a 	mov	r2,zero
   4331c:	00cffe34 	movhi	r3,16376
   43320:	480b883a 	mov	r5,r9
   43324:	4009883a 	mov	r4,r8
   43328:	180f883a 	mov	r7,r3
   4332c:	100d883a 	mov	r6,r2
   43330:	00492780 	call	49278 <__subdf3>
   43334:	0218dbf4 	movhi	r8,25455
   43338:	4210d844 	addi	r8,r8,17249
   4333c:	024ff4f4 	movhi	r9,16339
   43340:	4a61e9c4 	addi	r9,r9,-30809
   43344:	480f883a 	mov	r7,r9
   43348:	400d883a 	mov	r6,r8
   4334c:	180b883a 	mov	r5,r3
   43350:	1009883a 	mov	r4,r2
   43354:	004936c0 	call	4936c <__muldf3>
   43358:	0222d874 	movhi	r8,35681
   4335c:	42322cc4 	addi	r8,r8,-14157
   43360:	024ff1f4 	movhi	r9,16327
   43364:	4a628a04 	addi	r9,r9,-30168
   43368:	480f883a 	mov	r7,r9
   4336c:	400d883a 	mov	r6,r8
   43370:	180b883a 	mov	r5,r3
   43374:	1009883a 	mov	r4,r2
   43378:	00492f80 	call	492f8 <__adddf3>
   4337c:	b009883a 	mov	r4,r22
   43380:	1021883a 	mov	r16,r2
   43384:	1823883a 	mov	r17,r3
   43388:	0049c300 	call	49c30 <__floatsidf>
   4338c:	021427f4 	movhi	r8,20639
   43390:	421e7ec4 	addi	r8,r8,31227
   43394:	024ff4f4 	movhi	r9,16339
   43398:	4a5104c4 	addi	r9,r9,17427
   4339c:	480f883a 	mov	r7,r9
   433a0:	400d883a 	mov	r6,r8
   433a4:	180b883a 	mov	r5,r3
   433a8:	1009883a 	mov	r4,r2
   433ac:	004936c0 	call	4936c <__muldf3>
   433b0:	180f883a 	mov	r7,r3
   433b4:	880b883a 	mov	r5,r17
   433b8:	100d883a 	mov	r6,r2
   433bc:	8009883a 	mov	r4,r16
   433c0:	00492f80 	call	492f8 <__adddf3>
   433c4:	1009883a 	mov	r4,r2
   433c8:	180b883a 	mov	r5,r3
   433cc:	1021883a 	mov	r16,r2
   433d0:	1823883a 	mov	r17,r3
   433d4:	0049d280 	call	49d28 <__fixdfsi>
   433d8:	000d883a 	mov	r6,zero
   433dc:	000f883a 	mov	r7,zero
   433e0:	8009883a 	mov	r4,r16
   433e4:	880b883a 	mov	r5,r17
   433e8:	d8800d15 	stw	r2,52(sp)
   433ec:	0049ba80 	call	49ba8 <__ltdf2>
   433f0:	10031716 	blt	r2,zero,44050 <_dtoa_r+0xe8c>
   433f4:	d8c00d17 	ldw	r3,52(sp)
   433f8:	00800584 	movi	r2,22
   433fc:	10c1482e 	bgeu	r2,r3,43920 <_dtoa_r+0x75c>
   43400:	01000044 	movi	r4,1
   43404:	d9000c15 	stw	r4,48(sp)
   43408:	bd85c83a 	sub	r2,r23,r22
   4340c:	11bfffc4 	addi	r6,r2,-1
   43410:	30030b16 	blt	r6,zero,44040 <_dtoa_r+0xe7c>
   43414:	d9800a15 	stw	r6,40(sp)
   43418:	d8001115 	stw	zero,68(sp)
   4341c:	d8c00d17 	ldw	r3,52(sp)
   43420:	1802ff16 	blt	r3,zero,44020 <_dtoa_r+0xe5c>
   43424:	d9000a17 	ldw	r4,40(sp)
   43428:	d8c00915 	stw	r3,36(sp)
   4342c:	d8001015 	stw	zero,64(sp)
   43430:	20c9883a 	add	r4,r4,r3
   43434:	d9000a15 	stw	r4,40(sp)
   43438:	d9001717 	ldw	r4,92(sp)
   4343c:	00800244 	movi	r2,9
   43440:	11004636 	bltu	r2,r4,4355c <_dtoa_r+0x398>
   43444:	00800144 	movi	r2,5
   43448:	11020416 	blt	r2,r4,43c5c <_dtoa_r+0xa98>
   4344c:	04400044 	movi	r17,1
   43450:	d8c01717 	ldw	r3,92(sp)
   43454:	00800144 	movi	r2,5
   43458:	10c1ed36 	bltu	r2,r3,43c10 <_dtoa_r+0xa4c>
   4345c:	18c5883a 	add	r2,r3,r3
   43460:	1085883a 	add	r2,r2,r2
   43464:	00c00134 	movhi	r3,4
   43468:	18cd1e04 	addi	r3,r3,13432
   4346c:	10c5883a 	add	r2,r2,r3
   43470:	11000017 	ldw	r4,0(r2)
   43474:	2000683a 	jmp	r4
   43478:	00043564 	muli	zero,zero,4309
   4347c:	00043564 	muli	zero,zero,4309
   43480:	00043f64 	muli	zero,zero,4349
   43484:	00043f3c 	xorhi	zero,zero,4348
   43488:	00043f80 	call	43f8 <__reset-0x3bc08>
   4348c:	00043f8c 	andi	zero,zero,4350
   43490:	d9002717 	ldw	r4,156(sp)
   43494:	0089c3c4 	movi	r2,9999
   43498:	20800015 	stw	r2,0(r4)
   4349c:	a0001026 	beq	r20,zero,434e0 <_dtoa_r+0x31c>
   434a0:	00c00174 	movhi	r3,5
   434a4:	18f55104 	addi	r3,r3,-10940
   434a8:	d9802917 	ldw	r6,164(sp)
   434ac:	303f7926 	beq	r6,zero,43294 <_dtoa_r+0xd0>
   434b0:	188000c7 	ldb	r2,3(r3)
   434b4:	190000c4 	addi	r4,r3,3
   434b8:	1000101e 	bne	r2,zero,434fc <_dtoa_r+0x338>
   434bc:	d8802917 	ldw	r2,164(sp)
   434c0:	11000015 	stw	r4,0(r2)
   434c4:	003f7306 	br	43294 <_dtoa_r+0xd0>
   434c8:	00a00034 	movhi	r2,32768
   434cc:	10bfffc4 	addi	r2,r2,-1
   434d0:	00c00044 	movi	r3,1
   434d4:	88aa703a 	and	r21,r17,r2
   434d8:	90c00015 	stw	r3,0(r18)
   434dc:	003f5806 	br	43240 <_dtoa_r+0x7c>
   434e0:	00800434 	movhi	r2,16
   434e4:	10bfffc4 	addi	r2,r2,-1
   434e8:	a884703a 	and	r2,r21,r2
   434ec:	103fec1e 	bne	r2,zero,434a0 <_dtoa_r+0x2dc>
   434f0:	00c00174 	movhi	r3,5
   434f4:	18f54e04 	addi	r3,r3,-10952
   434f8:	003feb06 	br	434a8 <_dtoa_r+0x2e4>
   434fc:	d8802917 	ldw	r2,164(sp)
   43500:	19000204 	addi	r4,r3,8
   43504:	11000015 	stw	r4,0(r2)
   43508:	003f6206 	br	43294 <_dtoa_r+0xd0>
   4350c:	ddc00117 	ldw	r23,4(sp)
   43510:	d8800217 	ldw	r2,8(sp)
   43514:	01000804 	movi	r4,32
   43518:	b8c10c84 	addi	r3,r23,1074
   4351c:	18a3883a 	add	r17,r3,r2
   43520:	2441b80e 	bge	r4,r17,43c04 <_dtoa_r+0xa40>
   43524:	00c01004 	movi	r3,64
   43528:	1c47c83a 	sub	r3,r3,r17
   4352c:	88bff804 	addi	r2,r17,-32
   43530:	a8c6983a 	sll	r3,r21,r3
   43534:	a084d83a 	srl	r2,r20,r2
   43538:	1888b03a 	or	r4,r3,r2
   4353c:	0049e000 	call	49e00 <__floatunsidf>
   43540:	1011883a 	mov	r8,r2
   43544:	00bf8434 	movhi	r2,65040
   43548:	01000044 	movi	r4,1
   4354c:	10d3883a 	add	r9,r2,r3
   43550:	8dbef344 	addi	r22,r17,-1075
   43554:	d9000815 	stw	r4,32(sp)
   43558:	003f6f06 	br	43318 <_dtoa_r+0x154>
   4355c:	d8001715 	stw	zero,92(sp)
   43560:	04400044 	movi	r17,1
   43564:	00bfffc4 	movi	r2,-1
   43568:	00c00044 	movi	r3,1
   4356c:	d8800e15 	stw	r2,56(sp)
   43570:	d8002615 	stw	zero,152(sp)
   43574:	d8800f15 	stw	r2,60(sp)
   43578:	d8c00b15 	stw	r3,44(sp)
   4357c:	1021883a 	mov	r16,r2
   43580:	d8801617 	ldw	r2,88(sp)
   43584:	10001115 	stw	zero,68(r2)
   43588:	d8801617 	ldw	r2,88(sp)
   4358c:	11401117 	ldw	r5,68(r2)
   43590:	1009883a 	mov	r4,r2
   43594:	004690c0 	call	4690c <_Balloc>
   43598:	d8c01617 	ldw	r3,88(sp)
   4359c:	d8800515 	stw	r2,20(sp)
   435a0:	18801015 	stw	r2,64(r3)
   435a4:	00800384 	movi	r2,14
   435a8:	14006836 	bltu	r2,r16,4374c <_dtoa_r+0x588>
   435ac:	8805003a 	cmpeq	r2,r17,zero
   435b0:	1000661e 	bne	r2,zero,4374c <_dtoa_r+0x588>
   435b4:	d9000d17 	ldw	r4,52(sp)
   435b8:	0102300e 	bge	zero,r4,43e7c <_dtoa_r+0xcb8>
   435bc:	208003cc 	andi	r2,r4,15
   435c0:	100490fa 	slli	r2,r2,3
   435c4:	2025d13a 	srai	r18,r4,4
   435c8:	00c00174 	movhi	r3,5
   435cc:	18f56304 	addi	r3,r3,-10868
   435d0:	10c5883a 	add	r2,r2,r3
   435d4:	90c0040c 	andi	r3,r18,16
   435d8:	14000017 	ldw	r16,0(r2)
   435dc:	14400117 	ldw	r17,4(r2)
   435e0:	18036a1e 	bne	r3,zero,4438c <_dtoa_r+0x11c8>
   435e4:	05800084 	movi	r22,2
   435e8:	90001026 	beq	r18,zero,4362c <_dtoa_r+0x468>
   435ec:	04c00174 	movhi	r19,5
   435f0:	9cf59504 	addi	r19,r19,-10668
   435f4:	9080004c 	andi	r2,r18,1
   435f8:	1005003a 	cmpeq	r2,r2,zero
   435fc:	1000081e 	bne	r2,zero,43620 <_dtoa_r+0x45c>
   43600:	99800017 	ldw	r6,0(r19)
   43604:	99c00117 	ldw	r7,4(r19)
   43608:	880b883a 	mov	r5,r17
   4360c:	8009883a 	mov	r4,r16
   43610:	004936c0 	call	4936c <__muldf3>
   43614:	1021883a 	mov	r16,r2
   43618:	b5800044 	addi	r22,r22,1
   4361c:	1823883a 	mov	r17,r3
   43620:	9025d07a 	srai	r18,r18,1
   43624:	9cc00204 	addi	r19,r19,8
   43628:	903ff21e 	bne	r18,zero,435f4 <_dtoa_r+0x430>
   4362c:	a80b883a 	mov	r5,r21
   43630:	a009883a 	mov	r4,r20
   43634:	880f883a 	mov	r7,r17
   43638:	800d883a 	mov	r6,r16
   4363c:	00497300 	call	49730 <__divdf3>
   43640:	1029883a 	mov	r20,r2
   43644:	182b883a 	mov	r21,r3
   43648:	d8c00c17 	ldw	r3,48(sp)
   4364c:	1805003a 	cmpeq	r2,r3,zero
   43650:	1000081e 	bne	r2,zero,43674 <_dtoa_r+0x4b0>
   43654:	0005883a 	mov	r2,zero
   43658:	00cffc34 	movhi	r3,16368
   4365c:	180f883a 	mov	r7,r3
   43660:	a009883a 	mov	r4,r20
   43664:	a80b883a 	mov	r5,r21
   43668:	100d883a 	mov	r6,r2
   4366c:	0049ba80 	call	49ba8 <__ltdf2>
   43670:	1003fe16 	blt	r2,zero,4466c <_dtoa_r+0x14a8>
   43674:	b009883a 	mov	r4,r22
   43678:	0049c300 	call	49c30 <__floatsidf>
   4367c:	180b883a 	mov	r5,r3
   43680:	1009883a 	mov	r4,r2
   43684:	a00d883a 	mov	r6,r20
   43688:	a80f883a 	mov	r7,r21
   4368c:	004936c0 	call	4936c <__muldf3>
   43690:	0011883a 	mov	r8,zero
   43694:	02500734 	movhi	r9,16412
   43698:	1009883a 	mov	r4,r2
   4369c:	180b883a 	mov	r5,r3
   436a0:	480f883a 	mov	r7,r9
   436a4:	400d883a 	mov	r6,r8
   436a8:	00492f80 	call	492f8 <__adddf3>
   436ac:	d9000f17 	ldw	r4,60(sp)
   436b0:	102d883a 	mov	r22,r2
   436b4:	00bf3034 	movhi	r2,64704
   436b8:	18b9883a 	add	fp,r3,r2
   436bc:	e02f883a 	mov	r23,fp
   436c0:	20028f1e 	bne	r4,zero,44100 <_dtoa_r+0xf3c>
   436c4:	0005883a 	mov	r2,zero
   436c8:	00d00534 	movhi	r3,16404
   436cc:	a009883a 	mov	r4,r20
   436d0:	a80b883a 	mov	r5,r21
   436d4:	180f883a 	mov	r7,r3
   436d8:	100d883a 	mov	r6,r2
   436dc:	00492780 	call	49278 <__subdf3>
   436e0:	1009883a 	mov	r4,r2
   436e4:	e00f883a 	mov	r7,fp
   436e8:	180b883a 	mov	r5,r3
   436ec:	b00d883a 	mov	r6,r22
   436f0:	1025883a 	mov	r18,r2
   436f4:	1827883a 	mov	r19,r3
   436f8:	0049a980 	call	49a98 <__gtdf2>
   436fc:	00834f16 	blt	zero,r2,4443c <_dtoa_r+0x1278>
   43700:	e0e0003c 	xorhi	r3,fp,32768
   43704:	9009883a 	mov	r4,r18
   43708:	980b883a 	mov	r5,r19
   4370c:	180f883a 	mov	r7,r3
   43710:	b00d883a 	mov	r6,r22
   43714:	0049ba80 	call	49ba8 <__ltdf2>
   43718:	1000080e 	bge	r2,zero,4373c <_dtoa_r+0x578>
   4371c:	0027883a 	mov	r19,zero
   43720:	0025883a 	mov	r18,zero
   43724:	d8802617 	ldw	r2,152(sp)
   43728:	df000517 	ldw	fp,20(sp)
   4372c:	d8000615 	stw	zero,24(sp)
   43730:	0084303a 	nor	r2,zero,r2
   43734:	d8800d15 	stw	r2,52(sp)
   43738:	00019b06 	br	43da8 <_dtoa_r+0xbe4>
   4373c:	d9801217 	ldw	r6,72(sp)
   43740:	d8801317 	ldw	r2,76(sp)
   43744:	3029883a 	mov	r20,r6
   43748:	102b883a 	mov	r21,r2
   4374c:	d8c00217 	ldw	r3,8(sp)
   43750:	18008516 	blt	r3,zero,43968 <_dtoa_r+0x7a4>
   43754:	d9000d17 	ldw	r4,52(sp)
   43758:	00800384 	movi	r2,14
   4375c:	11008216 	blt	r2,r4,43968 <_dtoa_r+0x7a4>
   43760:	200490fa 	slli	r2,r4,3
   43764:	d9802617 	ldw	r6,152(sp)
   43768:	00c00174 	movhi	r3,5
   4376c:	18f56304 	addi	r3,r3,-10868
   43770:	10c5883a 	add	r2,r2,r3
   43774:	14800017 	ldw	r18,0(r2)
   43778:	14c00117 	ldw	r19,4(r2)
   4377c:	30031e16 	blt	r6,zero,443f8 <_dtoa_r+0x1234>
   43780:	d9000517 	ldw	r4,20(sp)
   43784:	d8c00f17 	ldw	r3,60(sp)
   43788:	a823883a 	mov	r17,r21
   4378c:	a021883a 	mov	r16,r20
   43790:	192b883a 	add	r21,r3,r4
   43794:	2039883a 	mov	fp,r4
   43798:	00000f06 	br	437d8 <_dtoa_r+0x614>
   4379c:	0005883a 	mov	r2,zero
   437a0:	00d00934 	movhi	r3,16420
   437a4:	5009883a 	mov	r4,r10
   437a8:	580b883a 	mov	r5,r11
   437ac:	180f883a 	mov	r7,r3
   437b0:	100d883a 	mov	r6,r2
   437b4:	004936c0 	call	4936c <__muldf3>
   437b8:	180b883a 	mov	r5,r3
   437bc:	000d883a 	mov	r6,zero
   437c0:	000f883a 	mov	r7,zero
   437c4:	1009883a 	mov	r4,r2
   437c8:	1021883a 	mov	r16,r2
   437cc:	1823883a 	mov	r17,r3
   437d0:	0049a100 	call	49a10 <__nedf2>
   437d4:	10004526 	beq	r2,zero,438ec <_dtoa_r+0x728>
   437d8:	900d883a 	mov	r6,r18
   437dc:	980f883a 	mov	r7,r19
   437e0:	8009883a 	mov	r4,r16
   437e4:	880b883a 	mov	r5,r17
   437e8:	00497300 	call	49730 <__divdf3>
   437ec:	180b883a 	mov	r5,r3
   437f0:	1009883a 	mov	r4,r2
   437f4:	0049d280 	call	49d28 <__fixdfsi>
   437f8:	1009883a 	mov	r4,r2
   437fc:	1029883a 	mov	r20,r2
   43800:	0049c300 	call	49c30 <__floatsidf>
   43804:	180f883a 	mov	r7,r3
   43808:	9009883a 	mov	r4,r18
   4380c:	980b883a 	mov	r5,r19
   43810:	100d883a 	mov	r6,r2
   43814:	004936c0 	call	4936c <__muldf3>
   43818:	180f883a 	mov	r7,r3
   4381c:	880b883a 	mov	r5,r17
   43820:	8009883a 	mov	r4,r16
   43824:	100d883a 	mov	r6,r2
   43828:	00492780 	call	49278 <__subdf3>
   4382c:	1015883a 	mov	r10,r2
   43830:	a0800c04 	addi	r2,r20,48
   43834:	e0800005 	stb	r2,0(fp)
   43838:	e7000044 	addi	fp,fp,1
   4383c:	1817883a 	mov	r11,r3
   43840:	e57fd61e 	bne	fp,r21,4379c <_dtoa_r+0x5d8>
   43844:	500d883a 	mov	r6,r10
   43848:	180f883a 	mov	r7,r3
   4384c:	5009883a 	mov	r4,r10
   43850:	180b883a 	mov	r5,r3
   43854:	00492f80 	call	492f8 <__adddf3>
   43858:	100d883a 	mov	r6,r2
   4385c:	9009883a 	mov	r4,r18
   43860:	980b883a 	mov	r5,r19
   43864:	180f883a 	mov	r7,r3
   43868:	1021883a 	mov	r16,r2
   4386c:	1823883a 	mov	r17,r3
   43870:	0049ba80 	call	49ba8 <__ltdf2>
   43874:	10000816 	blt	r2,zero,43898 <_dtoa_r+0x6d4>
   43878:	980b883a 	mov	r5,r19
   4387c:	800d883a 	mov	r6,r16
   43880:	880f883a 	mov	r7,r17
   43884:	9009883a 	mov	r4,r18
   43888:	00499880 	call	49988 <__eqdf2>
   4388c:	1000171e 	bne	r2,zero,438ec <_dtoa_r+0x728>
   43890:	a080004c 	andi	r2,r20,1
   43894:	10001526 	beq	r2,zero,438ec <_dtoa_r+0x728>
   43898:	d8800d17 	ldw	r2,52(sp)
   4389c:	d8800415 	stw	r2,16(sp)
   438a0:	e009883a 	mov	r4,fp
   438a4:	213fffc4 	addi	r4,r4,-1
   438a8:	20c00007 	ldb	r3,0(r4)
   438ac:	00800e44 	movi	r2,57
   438b0:	1880081e 	bne	r3,r2,438d4 <_dtoa_r+0x710>
   438b4:	d8800517 	ldw	r2,20(sp)
   438b8:	113ffa1e 	bne	r2,r4,438a4 <_dtoa_r+0x6e0>
   438bc:	d8c00417 	ldw	r3,16(sp)
   438c0:	d9800517 	ldw	r6,20(sp)
   438c4:	00800c04 	movi	r2,48
   438c8:	18c00044 	addi	r3,r3,1
   438cc:	d8c00415 	stw	r3,16(sp)
   438d0:	30800005 	stb	r2,0(r6)
   438d4:	20800003 	ldbu	r2,0(r4)
   438d8:	d8c00417 	ldw	r3,16(sp)
   438dc:	27000044 	addi	fp,r4,1
   438e0:	10800044 	addi	r2,r2,1
   438e4:	d8c00d15 	stw	r3,52(sp)
   438e8:	20800005 	stb	r2,0(r4)
   438ec:	d9001617 	ldw	r4,88(sp)
   438f0:	d9400717 	ldw	r5,28(sp)
   438f4:	004638c0 	call	4638c <_Bfree>
   438f8:	e0000005 	stb	zero,0(fp)
   438fc:	d9800d17 	ldw	r6,52(sp)
   43900:	d8c02717 	ldw	r3,156(sp)
   43904:	d9002917 	ldw	r4,164(sp)
   43908:	30800044 	addi	r2,r6,1
   4390c:	18800015 	stw	r2,0(r3)
   43910:	20029c26 	beq	r4,zero,44384 <_dtoa_r+0x11c0>
   43914:	d8c00517 	ldw	r3,20(sp)
   43918:	27000015 	stw	fp,0(r4)
   4391c:	003e5d06 	br	43294 <_dtoa_r+0xd0>
   43920:	d9800d17 	ldw	r6,52(sp)
   43924:	00c00174 	movhi	r3,5
   43928:	18f56304 	addi	r3,r3,-10868
   4392c:	d9001217 	ldw	r4,72(sp)
   43930:	300490fa 	slli	r2,r6,3
   43934:	d9401317 	ldw	r5,76(sp)
   43938:	10c5883a 	add	r2,r2,r3
   4393c:	12000017 	ldw	r8,0(r2)
   43940:	12400117 	ldw	r9,4(r2)
   43944:	400d883a 	mov	r6,r8
   43948:	480f883a 	mov	r7,r9
   4394c:	0049ba80 	call	49ba8 <__ltdf2>
   43950:	1000030e 	bge	r2,zero,43960 <_dtoa_r+0x79c>
   43954:	d8800d17 	ldw	r2,52(sp)
   43958:	10bfffc4 	addi	r2,r2,-1
   4395c:	d8800d15 	stw	r2,52(sp)
   43960:	d8000c15 	stw	zero,48(sp)
   43964:	003ea806 	br	43408 <_dtoa_r+0x244>
   43968:	d9000b17 	ldw	r4,44(sp)
   4396c:	202cc03a 	cmpne	r22,r4,zero
   43970:	b000c71e 	bne	r22,zero,43c90 <_dtoa_r+0xacc>
   43974:	dc001117 	ldw	r16,68(sp)
   43978:	dc801017 	ldw	r18,64(sp)
   4397c:	0027883a 	mov	r19,zero
   43980:	04000b0e 	bge	zero,r16,439b0 <_dtoa_r+0x7ec>
   43984:	d8c00a17 	ldw	r3,40(sp)
   43988:	00c0090e 	bge	zero,r3,439b0 <_dtoa_r+0x7ec>
   4398c:	8005883a 	mov	r2,r16
   43990:	1c011316 	blt	r3,r16,43de0 <_dtoa_r+0xc1c>
   43994:	d9000a17 	ldw	r4,40(sp)
   43998:	d9801117 	ldw	r6,68(sp)
   4399c:	80a1c83a 	sub	r16,r16,r2
   439a0:	2089c83a 	sub	r4,r4,r2
   439a4:	308dc83a 	sub	r6,r6,r2
   439a8:	d9000a15 	stw	r4,40(sp)
   439ac:	d9801115 	stw	r6,68(sp)
   439b0:	d8801017 	ldw	r2,64(sp)
   439b4:	0080150e 	bge	zero,r2,43a0c <_dtoa_r+0x848>
   439b8:	d8c00b17 	ldw	r3,44(sp)
   439bc:	1805003a 	cmpeq	r2,r3,zero
   439c0:	1001c91e 	bne	r2,zero,440e8 <_dtoa_r+0xf24>
   439c4:	04800e0e 	bge	zero,r18,43a00 <_dtoa_r+0x83c>
   439c8:	d9001617 	ldw	r4,88(sp)
   439cc:	980b883a 	mov	r5,r19
   439d0:	900d883a 	mov	r6,r18
   439d4:	00471d80 	call	471d8 <__pow5mult>
   439d8:	d9001617 	ldw	r4,88(sp)
   439dc:	d9800717 	ldw	r6,28(sp)
   439e0:	100b883a 	mov	r5,r2
   439e4:	1027883a 	mov	r19,r2
   439e8:	0046e1c0 	call	46e1c <__multiply>
   439ec:	d9001617 	ldw	r4,88(sp)
   439f0:	d9400717 	ldw	r5,28(sp)
   439f4:	1023883a 	mov	r17,r2
   439f8:	004638c0 	call	4638c <_Bfree>
   439fc:	dc400715 	stw	r17,28(sp)
   43a00:	d9001017 	ldw	r4,64(sp)
   43a04:	248dc83a 	sub	r6,r4,r18
   43a08:	30010e1e 	bne	r6,zero,43e44 <_dtoa_r+0xc80>
   43a0c:	d9001617 	ldw	r4,88(sp)
   43a10:	04400044 	movi	r17,1
   43a14:	880b883a 	mov	r5,r17
   43a18:	00470700 	call	47070 <__i2b>
   43a1c:	d9800917 	ldw	r6,36(sp)
   43a20:	1025883a 	mov	r18,r2
   43a24:	0180040e 	bge	zero,r6,43a38 <_dtoa_r+0x874>
   43a28:	d9001617 	ldw	r4,88(sp)
   43a2c:	100b883a 	mov	r5,r2
   43a30:	00471d80 	call	471d8 <__pow5mult>
   43a34:	1025883a 	mov	r18,r2
   43a38:	d8801717 	ldw	r2,92(sp)
   43a3c:	8880f30e 	bge	r17,r2,43e0c <_dtoa_r+0xc48>
   43a40:	0023883a 	mov	r17,zero
   43a44:	d9800917 	ldw	r6,36(sp)
   43a48:	30019e1e 	bne	r6,zero,440c4 <_dtoa_r+0xf00>
   43a4c:	00c00044 	movi	r3,1
   43a50:	d9000a17 	ldw	r4,40(sp)
   43a54:	20c5883a 	add	r2,r4,r3
   43a58:	10c007cc 	andi	r3,r2,31
   43a5c:	1800841e 	bne	r3,zero,43c70 <_dtoa_r+0xaac>
   43a60:	00800704 	movi	r2,28
   43a64:	d9000a17 	ldw	r4,40(sp)
   43a68:	d9801117 	ldw	r6,68(sp)
   43a6c:	80a1883a 	add	r16,r16,r2
   43a70:	2089883a 	add	r4,r4,r2
   43a74:	308d883a 	add	r6,r6,r2
   43a78:	d9000a15 	stw	r4,40(sp)
   43a7c:	d9801115 	stw	r6,68(sp)
   43a80:	d8801117 	ldw	r2,68(sp)
   43a84:	0080050e 	bge	zero,r2,43a9c <_dtoa_r+0x8d8>
   43a88:	d9400717 	ldw	r5,28(sp)
   43a8c:	d9001617 	ldw	r4,88(sp)
   43a90:	100d883a 	mov	r6,r2
   43a94:	0046cd00 	call	46cd0 <__lshift>
   43a98:	d8800715 	stw	r2,28(sp)
   43a9c:	d8c00a17 	ldw	r3,40(sp)
   43aa0:	00c0050e 	bge	zero,r3,43ab8 <_dtoa_r+0x8f4>
   43aa4:	d9001617 	ldw	r4,88(sp)
   43aa8:	900b883a 	mov	r5,r18
   43aac:	180d883a 	mov	r6,r3
   43ab0:	0046cd00 	call	46cd0 <__lshift>
   43ab4:	1025883a 	mov	r18,r2
   43ab8:	d9000c17 	ldw	r4,48(sp)
   43abc:	2005003a 	cmpeq	r2,r4,zero
   43ac0:	10016f26 	beq	r2,zero,44080 <_dtoa_r+0xebc>
   43ac4:	d9000f17 	ldw	r4,60(sp)
   43ac8:	0102170e 	bge	zero,r4,44328 <_dtoa_r+0x1164>
   43acc:	d9800b17 	ldw	r6,44(sp)
   43ad0:	3005003a 	cmpeq	r2,r6,zero
   43ad4:	1000881e 	bne	r2,zero,43cf8 <_dtoa_r+0xb34>
   43ad8:	0400050e 	bge	zero,r16,43af0 <_dtoa_r+0x92c>
   43adc:	d9001617 	ldw	r4,88(sp)
   43ae0:	980b883a 	mov	r5,r19
   43ae4:	800d883a 	mov	r6,r16
   43ae8:	0046cd00 	call	46cd0 <__lshift>
   43aec:	1027883a 	mov	r19,r2
   43af0:	8804c03a 	cmpne	r2,r17,zero
   43af4:	1002541e 	bne	r2,zero,44448 <_dtoa_r+0x1284>
   43af8:	980b883a 	mov	r5,r19
   43afc:	dd800517 	ldw	r22,20(sp)
   43b00:	dcc00615 	stw	r19,24(sp)
   43b04:	a700004c 	andi	fp,r20,1
   43b08:	2827883a 	mov	r19,r5
   43b0c:	d9000717 	ldw	r4,28(sp)
   43b10:	900b883a 	mov	r5,r18
   43b14:	0042f800 	call	42f80 <quorem>
   43b18:	d9000717 	ldw	r4,28(sp)
   43b1c:	d9400617 	ldw	r5,24(sp)
   43b20:	1023883a 	mov	r17,r2
   43b24:	8dc00c04 	addi	r23,r17,48
   43b28:	00464e80 	call	464e8 <__mcmp>
   43b2c:	d9001617 	ldw	r4,88(sp)
   43b30:	900b883a 	mov	r5,r18
   43b34:	980d883a 	mov	r6,r19
   43b38:	1029883a 	mov	r20,r2
   43b3c:	0046b440 	call	46b44 <__mdiff>
   43b40:	102b883a 	mov	r21,r2
   43b44:	10800317 	ldw	r2,12(r2)
   43b48:	1001281e 	bne	r2,zero,43fec <_dtoa_r+0xe28>
   43b4c:	d9000717 	ldw	r4,28(sp)
   43b50:	a80b883a 	mov	r5,r21
   43b54:	00464e80 	call	464e8 <__mcmp>
   43b58:	d9001617 	ldw	r4,88(sp)
   43b5c:	1021883a 	mov	r16,r2
   43b60:	a80b883a 	mov	r5,r21
   43b64:	004638c0 	call	4638c <_Bfree>
   43b68:	8000041e 	bne	r16,zero,43b7c <_dtoa_r+0x9b8>
   43b6c:	d8801717 	ldw	r2,92(sp)
   43b70:	1000021e 	bne	r2,zero,43b7c <_dtoa_r+0x9b8>
   43b74:	e004c03a 	cmpne	r2,fp,zero
   43b78:	10011726 	beq	r2,zero,43fd8 <_dtoa_r+0xe14>
   43b7c:	a0010616 	blt	r20,zero,43f98 <_dtoa_r+0xdd4>
   43b80:	a000041e 	bne	r20,zero,43b94 <_dtoa_r+0x9d0>
   43b84:	d8c01717 	ldw	r3,92(sp)
   43b88:	1800021e 	bne	r3,zero,43b94 <_dtoa_r+0x9d0>
   43b8c:	e004c03a 	cmpne	r2,fp,zero
   43b90:	10010126 	beq	r2,zero,43f98 <_dtoa_r+0xdd4>
   43b94:	04023d16 	blt	zero,r16,4448c <_dtoa_r+0x12c8>
   43b98:	b5c00005 	stb	r23,0(r22)
   43b9c:	d9800517 	ldw	r6,20(sp)
   43ba0:	d9000f17 	ldw	r4,60(sp)
   43ba4:	b5800044 	addi	r22,r22,1
   43ba8:	3105883a 	add	r2,r6,r4
   43bac:	b0806526 	beq	r22,r2,43d44 <_dtoa_r+0xb80>
   43bb0:	d9400717 	ldw	r5,28(sp)
   43bb4:	d9001617 	ldw	r4,88(sp)
   43bb8:	01800284 	movi	r6,10
   43bbc:	000f883a 	mov	r7,zero
   43bc0:	00470ac0 	call	470ac <__multadd>
   43bc4:	d8800715 	stw	r2,28(sp)
   43bc8:	d8800617 	ldw	r2,24(sp)
   43bcc:	14c10c26 	beq	r2,r19,44000 <_dtoa_r+0xe3c>
   43bd0:	d9400617 	ldw	r5,24(sp)
   43bd4:	d9001617 	ldw	r4,88(sp)
   43bd8:	01800284 	movi	r6,10
   43bdc:	000f883a 	mov	r7,zero
   43be0:	00470ac0 	call	470ac <__multadd>
   43be4:	d9001617 	ldw	r4,88(sp)
   43be8:	980b883a 	mov	r5,r19
   43bec:	01800284 	movi	r6,10
   43bf0:	000f883a 	mov	r7,zero
   43bf4:	d8800615 	stw	r2,24(sp)
   43bf8:	00470ac0 	call	470ac <__multadd>
   43bfc:	1027883a 	mov	r19,r2
   43c00:	003fc206 	br	43b0c <_dtoa_r+0x948>
   43c04:	2445c83a 	sub	r2,r4,r17
   43c08:	a088983a 	sll	r4,r20,r2
   43c0c:	003e4b06 	br	4353c <_dtoa_r+0x378>
   43c10:	01bfffc4 	movi	r6,-1
   43c14:	00800044 	movi	r2,1
   43c18:	d9800e15 	stw	r6,56(sp)
   43c1c:	d9800f15 	stw	r6,60(sp)
   43c20:	d8800b15 	stw	r2,44(sp)
   43c24:	d8c01617 	ldw	r3,88(sp)
   43c28:	008005c4 	movi	r2,23
   43c2c:	18001115 	stw	zero,68(r3)
   43c30:	1580082e 	bgeu	r2,r22,43c54 <_dtoa_r+0xa90>
   43c34:	00c00104 	movi	r3,4
   43c38:	0009883a 	mov	r4,zero
   43c3c:	18c7883a 	add	r3,r3,r3
   43c40:	18800504 	addi	r2,r3,20
   43c44:	21000044 	addi	r4,r4,1
   43c48:	b0bffc2e 	bgeu	r22,r2,43c3c <_dtoa_r+0xa78>
   43c4c:	d9801617 	ldw	r6,88(sp)
   43c50:	31001115 	stw	r4,68(r6)
   43c54:	dc000f17 	ldw	r16,60(sp)
   43c58:	003e4b06 	br	43588 <_dtoa_r+0x3c4>
   43c5c:	d9801717 	ldw	r6,92(sp)
   43c60:	0023883a 	mov	r17,zero
   43c64:	31bfff04 	addi	r6,r6,-4
   43c68:	d9801715 	stw	r6,92(sp)
   43c6c:	003df806 	br	43450 <_dtoa_r+0x28c>
   43c70:	00800804 	movi	r2,32
   43c74:	10c9c83a 	sub	r4,r2,r3
   43c78:	00c00104 	movi	r3,4
   43c7c:	19005a16 	blt	r3,r4,43de8 <_dtoa_r+0xc24>
   43c80:	008000c4 	movi	r2,3
   43c84:	113f7e16 	blt	r2,r4,43a80 <_dtoa_r+0x8bc>
   43c88:	20800704 	addi	r2,r4,28
   43c8c:	003f7506 	br	43a64 <_dtoa_r+0x8a0>
   43c90:	d9801717 	ldw	r6,92(sp)
   43c94:	00800044 	movi	r2,1
   43c98:	1180a10e 	bge	r2,r6,43f20 <_dtoa_r+0xd5c>
   43c9c:	d9800f17 	ldw	r6,60(sp)
   43ca0:	d8c01017 	ldw	r3,64(sp)
   43ca4:	30bfffc4 	addi	r2,r6,-1
   43ca8:	1881c616 	blt	r3,r2,443c4 <_dtoa_r+0x1200>
   43cac:	18a5c83a 	sub	r18,r3,r2
   43cb0:	d8800f17 	ldw	r2,60(sp)
   43cb4:	10026216 	blt	r2,zero,44640 <_dtoa_r+0x147c>
   43cb8:	dc001117 	ldw	r16,68(sp)
   43cbc:	1007883a 	mov	r3,r2
   43cc0:	d9800a17 	ldw	r6,40(sp)
   43cc4:	d8801117 	ldw	r2,68(sp)
   43cc8:	d9001617 	ldw	r4,88(sp)
   43ccc:	30cd883a 	add	r6,r6,r3
   43cd0:	10c5883a 	add	r2,r2,r3
   43cd4:	01400044 	movi	r5,1
   43cd8:	d9800a15 	stw	r6,40(sp)
   43cdc:	d8801115 	stw	r2,68(sp)
   43ce0:	00470700 	call	47070 <__i2b>
   43ce4:	1027883a 	mov	r19,r2
   43ce8:	003f2506 	br	43980 <_dtoa_r+0x7bc>
   43cec:	00c00174 	movhi	r3,5
   43cf0:	18f54504 	addi	r3,r3,-10988
   43cf4:	003d6706 	br	43294 <_dtoa_r+0xd0>
   43cf8:	dd800517 	ldw	r22,20(sp)
   43cfc:	04000044 	movi	r16,1
   43d00:	00000706 	br	43d20 <_dtoa_r+0xb5c>
   43d04:	d9400717 	ldw	r5,28(sp)
   43d08:	d9001617 	ldw	r4,88(sp)
   43d0c:	01800284 	movi	r6,10
   43d10:	000f883a 	mov	r7,zero
   43d14:	00470ac0 	call	470ac <__multadd>
   43d18:	d8800715 	stw	r2,28(sp)
   43d1c:	84000044 	addi	r16,r16,1
   43d20:	d9000717 	ldw	r4,28(sp)
   43d24:	900b883a 	mov	r5,r18
   43d28:	0042f800 	call	42f80 <quorem>
   43d2c:	15c00c04 	addi	r23,r2,48
   43d30:	b5c00005 	stb	r23,0(r22)
   43d34:	d8c00f17 	ldw	r3,60(sp)
   43d38:	b5800044 	addi	r22,r22,1
   43d3c:	80fff116 	blt	r16,r3,43d04 <_dtoa_r+0xb40>
   43d40:	d8000615 	stw	zero,24(sp)
   43d44:	d9400717 	ldw	r5,28(sp)
   43d48:	d9001617 	ldw	r4,88(sp)
   43d4c:	01800044 	movi	r6,1
   43d50:	0046cd00 	call	46cd0 <__lshift>
   43d54:	1009883a 	mov	r4,r2
   43d58:	900b883a 	mov	r5,r18
   43d5c:	d8800715 	stw	r2,28(sp)
   43d60:	00464e80 	call	464e8 <__mcmp>
   43d64:	00803c0e 	bge	zero,r2,43e58 <_dtoa_r+0xc94>
   43d68:	b009883a 	mov	r4,r22
   43d6c:	213fffc4 	addi	r4,r4,-1
   43d70:	21400003 	ldbu	r5,0(r4)
   43d74:	00800e44 	movi	r2,57
   43d78:	28c03fcc 	andi	r3,r5,255
   43d7c:	18c0201c 	xori	r3,r3,128
   43d80:	18ffe004 	addi	r3,r3,-128
   43d84:	1881981e 	bne	r3,r2,443e8 <_dtoa_r+0x1224>
   43d88:	d9800517 	ldw	r6,20(sp)
   43d8c:	21bff71e 	bne	r4,r6,43d6c <_dtoa_r+0xba8>
   43d90:	d8800d17 	ldw	r2,52(sp)
   43d94:	37000044 	addi	fp,r6,1
   43d98:	10800044 	addi	r2,r2,1
   43d9c:	d8800d15 	stw	r2,52(sp)
   43da0:	00800c44 	movi	r2,49
   43da4:	30800005 	stb	r2,0(r6)
   43da8:	d9001617 	ldw	r4,88(sp)
   43dac:	900b883a 	mov	r5,r18
   43db0:	004638c0 	call	4638c <_Bfree>
   43db4:	983ecd26 	beq	r19,zero,438ec <_dtoa_r+0x728>
   43db8:	d8c00617 	ldw	r3,24(sp)
   43dbc:	18000426 	beq	r3,zero,43dd0 <_dtoa_r+0xc0c>
   43dc0:	1cc00326 	beq	r3,r19,43dd0 <_dtoa_r+0xc0c>
   43dc4:	d9001617 	ldw	r4,88(sp)
   43dc8:	180b883a 	mov	r5,r3
   43dcc:	004638c0 	call	4638c <_Bfree>
   43dd0:	d9001617 	ldw	r4,88(sp)
   43dd4:	980b883a 	mov	r5,r19
   43dd8:	004638c0 	call	4638c <_Bfree>
   43ddc:	003ec306 	br	438ec <_dtoa_r+0x728>
   43de0:	1805883a 	mov	r2,r3
   43de4:	003eeb06 	br	43994 <_dtoa_r+0x7d0>
   43de8:	d9800a17 	ldw	r6,40(sp)
   43dec:	d8c01117 	ldw	r3,68(sp)
   43df0:	20bfff04 	addi	r2,r4,-4
   43df4:	308d883a 	add	r6,r6,r2
   43df8:	1887883a 	add	r3,r3,r2
   43dfc:	80a1883a 	add	r16,r16,r2
   43e00:	d9800a15 	stw	r6,40(sp)
   43e04:	d8c01115 	stw	r3,68(sp)
   43e08:	003f1d06 	br	43a80 <_dtoa_r+0x8bc>
   43e0c:	a03f0c1e 	bne	r20,zero,43a40 <_dtoa_r+0x87c>
   43e10:	00800434 	movhi	r2,16
   43e14:	10bfffc4 	addi	r2,r2,-1
   43e18:	a884703a 	and	r2,r21,r2
   43e1c:	103f081e 	bne	r2,zero,43a40 <_dtoa_r+0x87c>
   43e20:	a89ffc2c 	andhi	r2,r21,32752
   43e24:	103f0626 	beq	r2,zero,43a40 <_dtoa_r+0x87c>
   43e28:	d8c01117 	ldw	r3,68(sp)
   43e2c:	d9000a17 	ldw	r4,40(sp)
   43e30:	18c00044 	addi	r3,r3,1
   43e34:	21000044 	addi	r4,r4,1
   43e38:	d8c01115 	stw	r3,68(sp)
   43e3c:	d9000a15 	stw	r4,40(sp)
   43e40:	003f0006 	br	43a44 <_dtoa_r+0x880>
   43e44:	d9400717 	ldw	r5,28(sp)
   43e48:	d9001617 	ldw	r4,88(sp)
   43e4c:	00471d80 	call	471d8 <__pow5mult>
   43e50:	d8800715 	stw	r2,28(sp)
   43e54:	003eed06 	br	43a0c <_dtoa_r+0x848>
   43e58:	1000021e 	bne	r2,zero,43e64 <_dtoa_r+0xca0>
   43e5c:	b880004c 	andi	r2,r23,1
   43e60:	103fc11e 	bne	r2,zero,43d68 <_dtoa_r+0xba4>
   43e64:	b5bfffc4 	addi	r22,r22,-1
   43e68:	b0c00007 	ldb	r3,0(r22)
   43e6c:	00800c04 	movi	r2,48
   43e70:	18bffc26 	beq	r3,r2,43e64 <_dtoa_r+0xca0>
   43e74:	b7000044 	addi	fp,r22,1
   43e78:	003fcb06 	br	43da8 <_dtoa_r+0xbe4>
   43e7c:	d9800d17 	ldw	r6,52(sp)
   43e80:	018fc83a 	sub	r7,zero,r6
   43e84:	3801f726 	beq	r7,zero,44664 <_dtoa_r+0x14a0>
   43e88:	398003cc 	andi	r6,r7,15
   43e8c:	300c90fa 	slli	r6,r6,3
   43e90:	01400174 	movhi	r5,5
   43e94:	29756304 	addi	r5,r5,-10868
   43e98:	d9001217 	ldw	r4,72(sp)
   43e9c:	314d883a 	add	r6,r6,r5
   43ea0:	30c00117 	ldw	r3,4(r6)
   43ea4:	30800017 	ldw	r2,0(r6)
   43ea8:	d9401317 	ldw	r5,76(sp)
   43eac:	3821d13a 	srai	r16,r7,4
   43eb0:	100d883a 	mov	r6,r2
   43eb4:	180f883a 	mov	r7,r3
   43eb8:	004936c0 	call	4936c <__muldf3>
   43ebc:	1011883a 	mov	r8,r2
   43ec0:	1813883a 	mov	r9,r3
   43ec4:	1029883a 	mov	r20,r2
   43ec8:	182b883a 	mov	r21,r3
   43ecc:	8001e526 	beq	r16,zero,44664 <_dtoa_r+0x14a0>
   43ed0:	05800084 	movi	r22,2
   43ed4:	04400174 	movhi	r17,5
   43ed8:	8c759504 	addi	r17,r17,-10668
   43edc:	8080004c 	andi	r2,r16,1
   43ee0:	1005003a 	cmpeq	r2,r2,zero
   43ee4:	1000081e 	bne	r2,zero,43f08 <_dtoa_r+0xd44>
   43ee8:	89800017 	ldw	r6,0(r17)
   43eec:	89c00117 	ldw	r7,4(r17)
   43ef0:	480b883a 	mov	r5,r9
   43ef4:	4009883a 	mov	r4,r8
   43ef8:	004936c0 	call	4936c <__muldf3>
   43efc:	1011883a 	mov	r8,r2
   43f00:	b5800044 	addi	r22,r22,1
   43f04:	1813883a 	mov	r9,r3
   43f08:	8021d07a 	srai	r16,r16,1
   43f0c:	8c400204 	addi	r17,r17,8
   43f10:	803ff21e 	bne	r16,zero,43edc <_dtoa_r+0xd18>
   43f14:	4029883a 	mov	r20,r8
   43f18:	482b883a 	mov	r21,r9
   43f1c:	003dca06 	br	43648 <_dtoa_r+0x484>
   43f20:	d9000817 	ldw	r4,32(sp)
   43f24:	2005003a 	cmpeq	r2,r4,zero
   43f28:	1001f61e 	bne	r2,zero,44704 <_dtoa_r+0x1540>
   43f2c:	dc001117 	ldw	r16,68(sp)
   43f30:	dc801017 	ldw	r18,64(sp)
   43f34:	18c10cc4 	addi	r3,r3,1075
   43f38:	003f6106 	br	43cc0 <_dtoa_r+0xafc>
   43f3c:	d8000b15 	stw	zero,44(sp)
   43f40:	d9802617 	ldw	r6,152(sp)
   43f44:	d8c00d17 	ldw	r3,52(sp)
   43f48:	30800044 	addi	r2,r6,1
   43f4c:	18ad883a 	add	r22,r3,r2
   43f50:	b13fffc4 	addi	r4,r22,-1
   43f54:	d9000e15 	stw	r4,56(sp)
   43f58:	0581f60e 	bge	zero,r22,44734 <_dtoa_r+0x1570>
   43f5c:	dd800f15 	stw	r22,60(sp)
   43f60:	003f3006 	br	43c24 <_dtoa_r+0xa60>
   43f64:	d8000b15 	stw	zero,44(sp)
   43f68:	d9002617 	ldw	r4,152(sp)
   43f6c:	0101eb0e 	bge	zero,r4,4471c <_dtoa_r+0x1558>
   43f70:	202d883a 	mov	r22,r4
   43f74:	d9000e15 	stw	r4,56(sp)
   43f78:	d9000f15 	stw	r4,60(sp)
   43f7c:	003f2906 	br	43c24 <_dtoa_r+0xa60>
   43f80:	01800044 	movi	r6,1
   43f84:	d9800b15 	stw	r6,44(sp)
   43f88:	003ff706 	br	43f68 <_dtoa_r+0xda4>
   43f8c:	01000044 	movi	r4,1
   43f90:	d9000b15 	stw	r4,44(sp)
   43f94:	003fea06 	br	43f40 <_dtoa_r+0xd7c>
   43f98:	04000c0e 	bge	zero,r16,43fcc <_dtoa_r+0xe08>
   43f9c:	d9400717 	ldw	r5,28(sp)
   43fa0:	d9001617 	ldw	r4,88(sp)
   43fa4:	01800044 	movi	r6,1
   43fa8:	0046cd00 	call	46cd0 <__lshift>
   43fac:	1009883a 	mov	r4,r2
   43fb0:	900b883a 	mov	r5,r18
   43fb4:	d8800715 	stw	r2,28(sp)
   43fb8:	00464e80 	call	464e8 <__mcmp>
   43fbc:	0081e00e 	bge	zero,r2,44740 <_dtoa_r+0x157c>
   43fc0:	bdc00044 	addi	r23,r23,1
   43fc4:	00800e84 	movi	r2,58
   43fc8:	b881a226 	beq	r23,r2,44654 <_dtoa_r+0x1490>
   43fcc:	b7000044 	addi	fp,r22,1
   43fd0:	b5c00005 	stb	r23,0(r22)
   43fd4:	003f7406 	br	43da8 <_dtoa_r+0xbe4>
   43fd8:	00800e44 	movi	r2,57
   43fdc:	b8819d26 	beq	r23,r2,44654 <_dtoa_r+0x1490>
   43fe0:	053ffa0e 	bge	zero,r20,43fcc <_dtoa_r+0xe08>
   43fe4:	8dc00c44 	addi	r23,r17,49
   43fe8:	003ff806 	br	43fcc <_dtoa_r+0xe08>
   43fec:	d9001617 	ldw	r4,88(sp)
   43ff0:	a80b883a 	mov	r5,r21
   43ff4:	04000044 	movi	r16,1
   43ff8:	004638c0 	call	4638c <_Bfree>
   43ffc:	003edf06 	br	43b7c <_dtoa_r+0x9b8>
   44000:	d9001617 	ldw	r4,88(sp)
   44004:	980b883a 	mov	r5,r19
   44008:	01800284 	movi	r6,10
   4400c:	000f883a 	mov	r7,zero
   44010:	00470ac0 	call	470ac <__multadd>
   44014:	1027883a 	mov	r19,r2
   44018:	d8800615 	stw	r2,24(sp)
   4401c:	003ebb06 	br	43b0c <_dtoa_r+0x948>
   44020:	d9801117 	ldw	r6,68(sp)
   44024:	d8800d17 	ldw	r2,52(sp)
   44028:	d8000915 	stw	zero,36(sp)
   4402c:	308dc83a 	sub	r6,r6,r2
   44030:	0087c83a 	sub	r3,zero,r2
   44034:	d9801115 	stw	r6,68(sp)
   44038:	d8c01015 	stw	r3,64(sp)
   4403c:	003cfe06 	br	43438 <_dtoa_r+0x274>
   44040:	018dc83a 	sub	r6,zero,r6
   44044:	d9801115 	stw	r6,68(sp)
   44048:	d8000a15 	stw	zero,40(sp)
   4404c:	003cf306 	br	4341c <_dtoa_r+0x258>
   44050:	d9000d17 	ldw	r4,52(sp)
   44054:	0049c300 	call	49c30 <__floatsidf>
   44058:	880b883a 	mov	r5,r17
   4405c:	8009883a 	mov	r4,r16
   44060:	180f883a 	mov	r7,r3
   44064:	100d883a 	mov	r6,r2
   44068:	0049a100 	call	49a10 <__nedf2>
   4406c:	103ce126 	beq	r2,zero,433f4 <_dtoa_r+0x230>
   44070:	d9800d17 	ldw	r6,52(sp)
   44074:	31bfffc4 	addi	r6,r6,-1
   44078:	d9800d15 	stw	r6,52(sp)
   4407c:	003cdd06 	br	433f4 <_dtoa_r+0x230>
   44080:	d9000717 	ldw	r4,28(sp)
   44084:	900b883a 	mov	r5,r18
   44088:	00464e80 	call	464e8 <__mcmp>
   4408c:	103e8d0e 	bge	r2,zero,43ac4 <_dtoa_r+0x900>
   44090:	d9400717 	ldw	r5,28(sp)
   44094:	d9001617 	ldw	r4,88(sp)
   44098:	01800284 	movi	r6,10
   4409c:	000f883a 	mov	r7,zero
   440a0:	00470ac0 	call	470ac <__multadd>
   440a4:	d9800d17 	ldw	r6,52(sp)
   440a8:	d8800715 	stw	r2,28(sp)
   440ac:	31bfffc4 	addi	r6,r6,-1
   440b0:	d9800d15 	stw	r6,52(sp)
   440b4:	b001a71e 	bne	r22,zero,44754 <_dtoa_r+0x1590>
   440b8:	d8800e17 	ldw	r2,56(sp)
   440bc:	d8800f15 	stw	r2,60(sp)
   440c0:	003e8006 	br	43ac4 <_dtoa_r+0x900>
   440c4:	90800417 	ldw	r2,16(r18)
   440c8:	1085883a 	add	r2,r2,r2
   440cc:	1085883a 	add	r2,r2,r2
   440d0:	1485883a 	add	r2,r2,r18
   440d4:	11000417 	ldw	r4,16(r2)
   440d8:	00463b40 	call	463b4 <__hi0bits>
   440dc:	00c00804 	movi	r3,32
   440e0:	1887c83a 	sub	r3,r3,r2
   440e4:	003e5a06 	br	43a50 <_dtoa_r+0x88c>
   440e8:	d9400717 	ldw	r5,28(sp)
   440ec:	d9801017 	ldw	r6,64(sp)
   440f0:	d9001617 	ldw	r4,88(sp)
   440f4:	00471d80 	call	471d8 <__pow5mult>
   440f8:	d8800715 	stw	r2,28(sp)
   440fc:	003e4306 	br	43a0c <_dtoa_r+0x848>
   44100:	d9800f17 	ldw	r6,60(sp)
   44104:	d8800d17 	ldw	r2,52(sp)
   44108:	d9800315 	stw	r6,12(sp)
   4410c:	d8800415 	stw	r2,16(sp)
   44110:	d8c00b17 	ldw	r3,44(sp)
   44114:	1805003a 	cmpeq	r2,r3,zero
   44118:	1000e21e 	bne	r2,zero,444a4 <_dtoa_r+0x12e0>
   4411c:	d9000317 	ldw	r4,12(sp)
   44120:	0005883a 	mov	r2,zero
   44124:	00cff834 	movhi	r3,16352
   44128:	200c90fa 	slli	r6,r4,3
   4412c:	01000174 	movhi	r4,5
   44130:	21356304 	addi	r4,r4,-10868
   44134:	180b883a 	mov	r5,r3
   44138:	310d883a 	add	r6,r6,r4
   4413c:	327fff17 	ldw	r9,-4(r6)
   44140:	323ffe17 	ldw	r8,-8(r6)
   44144:	1009883a 	mov	r4,r2
   44148:	480f883a 	mov	r7,r9
   4414c:	400d883a 	mov	r6,r8
   44150:	00497300 	call	49730 <__divdf3>
   44154:	180b883a 	mov	r5,r3
   44158:	b00d883a 	mov	r6,r22
   4415c:	b80f883a 	mov	r7,r23
   44160:	1009883a 	mov	r4,r2
   44164:	00492780 	call	49278 <__subdf3>
   44168:	a80b883a 	mov	r5,r21
   4416c:	a009883a 	mov	r4,r20
   44170:	d8c01915 	stw	r3,100(sp)
   44174:	d8801815 	stw	r2,96(sp)
   44178:	0049d280 	call	49d28 <__fixdfsi>
   4417c:	1009883a 	mov	r4,r2
   44180:	1027883a 	mov	r19,r2
   44184:	0049c300 	call	49c30 <__floatsidf>
   44188:	a80b883a 	mov	r5,r21
   4418c:	a009883a 	mov	r4,r20
   44190:	180f883a 	mov	r7,r3
   44194:	100d883a 	mov	r6,r2
   44198:	00492780 	call	49278 <__subdf3>
   4419c:	d9801817 	ldw	r6,96(sp)
   441a0:	1823883a 	mov	r17,r3
   441a4:	d8801415 	stw	r2,80(sp)
   441a8:	302d883a 	mov	r22,r6
   441ac:	d9800517 	ldw	r6,20(sp)
   441b0:	9cc00c04 	addi	r19,r19,48
   441b4:	dc401515 	stw	r17,84(sp)
   441b8:	d8c01917 	ldw	r3,100(sp)
   441bc:	34c00005 	stb	r19,0(r6)
   441c0:	d8800517 	ldw	r2,20(sp)
   441c4:	d9401917 	ldw	r5,100(sp)
   441c8:	d9801417 	ldw	r6,80(sp)
   441cc:	b009883a 	mov	r4,r22
   441d0:	880f883a 	mov	r7,r17
   441d4:	182f883a 	mov	r23,r3
   441d8:	17000044 	addi	fp,r2,1
   441dc:	0049a980 	call	49a98 <__gtdf2>
   441e0:	00804e16 	blt	zero,r2,4431c <_dtoa_r+0x1158>
   441e4:	d9801417 	ldw	r6,80(sp)
   441e8:	0005883a 	mov	r2,zero
   441ec:	00cffc34 	movhi	r3,16368
   441f0:	180b883a 	mov	r5,r3
   441f4:	880f883a 	mov	r7,r17
   441f8:	1009883a 	mov	r4,r2
   441fc:	00492780 	call	49278 <__subdf3>
   44200:	d9401917 	ldw	r5,100(sp)
   44204:	180f883a 	mov	r7,r3
   44208:	b009883a 	mov	r4,r22
   4420c:	100d883a 	mov	r6,r2
   44210:	0049a980 	call	49a98 <__gtdf2>
   44214:	00bda216 	blt	zero,r2,438a0 <_dtoa_r+0x6dc>
   44218:	d8c00317 	ldw	r3,12(sp)
   4421c:	00800044 	movi	r2,1
   44220:	10c01216 	blt	r2,r3,4426c <_dtoa_r+0x10a8>
   44224:	003d4506 	br	4373c <_dtoa_r+0x578>
   44228:	d9801417 	ldw	r6,80(sp)
   4422c:	0005883a 	mov	r2,zero
   44230:	00cffc34 	movhi	r3,16368
   44234:	180b883a 	mov	r5,r3
   44238:	880f883a 	mov	r7,r17
   4423c:	1009883a 	mov	r4,r2
   44240:	00492780 	call	49278 <__subdf3>
   44244:	d9c01b17 	ldw	r7,108(sp)
   44248:	180b883a 	mov	r5,r3
   4424c:	1009883a 	mov	r4,r2
   44250:	b00d883a 	mov	r6,r22
   44254:	0049ba80 	call	49ba8 <__ltdf2>
   44258:	103d9116 	blt	r2,zero,438a0 <_dtoa_r+0x6dc>
   4425c:	d9800517 	ldw	r6,20(sp)
   44260:	d9000317 	ldw	r4,12(sp)
   44264:	3105883a 	add	r2,r6,r4
   44268:	e0bd3426 	beq	fp,r2,4373c <_dtoa_r+0x578>
   4426c:	04500934 	movhi	r17,16420
   44270:	0021883a 	mov	r16,zero
   44274:	b80b883a 	mov	r5,r23
   44278:	b009883a 	mov	r4,r22
   4427c:	800d883a 	mov	r6,r16
   44280:	880f883a 	mov	r7,r17
   44284:	004936c0 	call	4936c <__muldf3>
   44288:	d9401517 	ldw	r5,84(sp)
   4428c:	d9001417 	ldw	r4,80(sp)
   44290:	880f883a 	mov	r7,r17
   44294:	000d883a 	mov	r6,zero
   44298:	d8801a15 	stw	r2,104(sp)
   4429c:	d8c01b15 	stw	r3,108(sp)
   442a0:	004936c0 	call	4936c <__muldf3>
   442a4:	180b883a 	mov	r5,r3
   442a8:	1009883a 	mov	r4,r2
   442ac:	1823883a 	mov	r17,r3
   442b0:	1021883a 	mov	r16,r2
   442b4:	0049d280 	call	49d28 <__fixdfsi>
   442b8:	1009883a 	mov	r4,r2
   442bc:	102b883a 	mov	r21,r2
   442c0:	0049c300 	call	49c30 <__floatsidf>
   442c4:	880b883a 	mov	r5,r17
   442c8:	8009883a 	mov	r4,r16
   442cc:	180f883a 	mov	r7,r3
   442d0:	100d883a 	mov	r6,r2
   442d4:	00492780 	call	49278 <__subdf3>
   442d8:	1021883a 	mov	r16,r2
   442dc:	d9001b17 	ldw	r4,108(sp)
   442e0:	1823883a 	mov	r17,r3
   442e4:	dc001415 	stw	r16,80(sp)
   442e8:	ad400c04 	addi	r21,r21,48
   442ec:	dc401515 	stw	r17,84(sp)
   442f0:	d8801a17 	ldw	r2,104(sp)
   442f4:	e5400005 	stb	r21,0(fp)
   442f8:	202f883a 	mov	r23,r4
   442fc:	d9c01b17 	ldw	r7,108(sp)
   44300:	d9001417 	ldw	r4,80(sp)
   44304:	880b883a 	mov	r5,r17
   44308:	100d883a 	mov	r6,r2
   4430c:	102d883a 	mov	r22,r2
   44310:	e7000044 	addi	fp,fp,1
   44314:	0049ba80 	call	49ba8 <__ltdf2>
   44318:	103fc30e 	bge	r2,zero,44228 <_dtoa_r+0x1064>
   4431c:	d9000417 	ldw	r4,16(sp)
   44320:	d9000d15 	stw	r4,52(sp)
   44324:	003d7106 	br	438ec <_dtoa_r+0x728>
   44328:	d9801717 	ldw	r6,92(sp)
   4432c:	00800084 	movi	r2,2
   44330:	11bde60e 	bge	r2,r6,43acc <_dtoa_r+0x908>
   44334:	203cfb1e 	bne	r4,zero,43724 <_dtoa_r+0x560>
   44338:	d9001617 	ldw	r4,88(sp)
   4433c:	900b883a 	mov	r5,r18
   44340:	01800144 	movi	r6,5
   44344:	000f883a 	mov	r7,zero
   44348:	00470ac0 	call	470ac <__multadd>
   4434c:	d9000717 	ldw	r4,28(sp)
   44350:	100b883a 	mov	r5,r2
   44354:	1025883a 	mov	r18,r2
   44358:	00464e80 	call	464e8 <__mcmp>
   4435c:	00bcf10e 	bge	zero,r2,43724 <_dtoa_r+0x560>
   44360:	d8c00d17 	ldw	r3,52(sp)
   44364:	d9000517 	ldw	r4,20(sp)
   44368:	d8000615 	stw	zero,24(sp)
   4436c:	18c00044 	addi	r3,r3,1
   44370:	d8c00d15 	stw	r3,52(sp)
   44374:	00800c44 	movi	r2,49
   44378:	27000044 	addi	fp,r4,1
   4437c:	20800005 	stb	r2,0(r4)
   44380:	003e8906 	br	43da8 <_dtoa_r+0xbe4>
   44384:	d8c00517 	ldw	r3,20(sp)
   44388:	003bc206 	br	43294 <_dtoa_r+0xd0>
   4438c:	01800174 	movhi	r6,5
   44390:	31b59504 	addi	r6,r6,-10668
   44394:	30c00917 	ldw	r3,36(r6)
   44398:	30800817 	ldw	r2,32(r6)
   4439c:	d9001217 	ldw	r4,72(sp)
   443a0:	d9401317 	ldw	r5,76(sp)
   443a4:	180f883a 	mov	r7,r3
   443a8:	100d883a 	mov	r6,r2
   443ac:	00497300 	call	49730 <__divdf3>
   443b0:	948003cc 	andi	r18,r18,15
   443b4:	058000c4 	movi	r22,3
   443b8:	1029883a 	mov	r20,r2
   443bc:	182b883a 	mov	r21,r3
   443c0:	003c8906 	br	435e8 <_dtoa_r+0x424>
   443c4:	d9001017 	ldw	r4,64(sp)
   443c8:	d9800917 	ldw	r6,36(sp)
   443cc:	0025883a 	mov	r18,zero
   443d0:	1105c83a 	sub	r2,r2,r4
   443d4:	2089883a 	add	r4,r4,r2
   443d8:	308d883a 	add	r6,r6,r2
   443dc:	d9001015 	stw	r4,64(sp)
   443e0:	d9800915 	stw	r6,36(sp)
   443e4:	003e3206 	br	43cb0 <_dtoa_r+0xaec>
   443e8:	28800044 	addi	r2,r5,1
   443ec:	27000044 	addi	fp,r4,1
   443f0:	20800005 	stb	r2,0(r4)
   443f4:	003e6c06 	br	43da8 <_dtoa_r+0xbe4>
   443f8:	d8800f17 	ldw	r2,60(sp)
   443fc:	00bce016 	blt	zero,r2,43780 <_dtoa_r+0x5bc>
   44400:	d9800f17 	ldw	r6,60(sp)
   44404:	303cc51e 	bne	r6,zero,4371c <_dtoa_r+0x558>
   44408:	0005883a 	mov	r2,zero
   4440c:	00d00534 	movhi	r3,16404
   44410:	980b883a 	mov	r5,r19
   44414:	180f883a 	mov	r7,r3
   44418:	9009883a 	mov	r4,r18
   4441c:	100d883a 	mov	r6,r2
   44420:	004936c0 	call	4936c <__muldf3>
   44424:	180b883a 	mov	r5,r3
   44428:	a80f883a 	mov	r7,r21
   4442c:	1009883a 	mov	r4,r2
   44430:	a00d883a 	mov	r6,r20
   44434:	0049b200 	call	49b20 <__gedf2>
   44438:	103cb80e 	bge	r2,zero,4371c <_dtoa_r+0x558>
   4443c:	0027883a 	mov	r19,zero
   44440:	0025883a 	mov	r18,zero
   44444:	003fc606 	br	44360 <_dtoa_r+0x119c>
   44448:	99400117 	ldw	r5,4(r19)
   4444c:	d9001617 	ldw	r4,88(sp)
   44450:	004690c0 	call	4690c <_Balloc>
   44454:	99800417 	ldw	r6,16(r19)
   44458:	11000304 	addi	r4,r2,12
   4445c:	99400304 	addi	r5,r19,12
   44460:	318d883a 	add	r6,r6,r6
   44464:	318d883a 	add	r6,r6,r6
   44468:	31800204 	addi	r6,r6,8
   4446c:	1023883a 	mov	r17,r2
   44470:	00461740 	call	46174 <memcpy>
   44474:	d9001617 	ldw	r4,88(sp)
   44478:	880b883a 	mov	r5,r17
   4447c:	01800044 	movi	r6,1
   44480:	0046cd00 	call	46cd0 <__lshift>
   44484:	100b883a 	mov	r5,r2
   44488:	003d9c06 	br	43afc <_dtoa_r+0x938>
   4448c:	00800e44 	movi	r2,57
   44490:	b8807026 	beq	r23,r2,44654 <_dtoa_r+0x1490>
   44494:	b8800044 	addi	r2,r23,1
   44498:	b7000044 	addi	fp,r22,1
   4449c:	b0800005 	stb	r2,0(r22)
   444a0:	003e4106 	br	43da8 <_dtoa_r+0xbe4>
   444a4:	d8800317 	ldw	r2,12(sp)
   444a8:	01800174 	movhi	r6,5
   444ac:	31b56304 	addi	r6,r6,-10868
   444b0:	b009883a 	mov	r4,r22
   444b4:	100e90fa 	slli	r7,r2,3
   444b8:	b80b883a 	mov	r5,r23
   444bc:	398f883a 	add	r7,r7,r6
   444c0:	38bffe17 	ldw	r2,-8(r7)
   444c4:	d9800517 	ldw	r6,20(sp)
   444c8:	38ffff17 	ldw	r3,-4(r7)
   444cc:	37000044 	addi	fp,r6,1
   444d0:	180f883a 	mov	r7,r3
   444d4:	100d883a 	mov	r6,r2
   444d8:	004936c0 	call	4936c <__muldf3>
   444dc:	a80b883a 	mov	r5,r21
   444e0:	a009883a 	mov	r4,r20
   444e4:	182f883a 	mov	r23,r3
   444e8:	102d883a 	mov	r22,r2
   444ec:	0049d280 	call	49d28 <__fixdfsi>
   444f0:	1009883a 	mov	r4,r2
   444f4:	1027883a 	mov	r19,r2
   444f8:	0049c300 	call	49c30 <__floatsidf>
   444fc:	a80b883a 	mov	r5,r21
   44500:	a009883a 	mov	r4,r20
   44504:	180f883a 	mov	r7,r3
   44508:	100d883a 	mov	r6,r2
   4450c:	00492780 	call	49278 <__subdf3>
   44510:	180b883a 	mov	r5,r3
   44514:	d8c00517 	ldw	r3,20(sp)
   44518:	9cc00c04 	addi	r19,r19,48
   4451c:	1009883a 	mov	r4,r2
   44520:	1cc00005 	stb	r19,0(r3)
   44524:	2021883a 	mov	r16,r4
   44528:	d9000317 	ldw	r4,12(sp)
   4452c:	00800044 	movi	r2,1
   44530:	2823883a 	mov	r17,r5
   44534:	20802226 	beq	r4,r2,445c0 <_dtoa_r+0x13fc>
   44538:	1029883a 	mov	r20,r2
   4453c:	0005883a 	mov	r2,zero
   44540:	00d00934 	movhi	r3,16420
   44544:	180f883a 	mov	r7,r3
   44548:	100d883a 	mov	r6,r2
   4454c:	880b883a 	mov	r5,r17
   44550:	8009883a 	mov	r4,r16
   44554:	004936c0 	call	4936c <__muldf3>
   44558:	180b883a 	mov	r5,r3
   4455c:	1009883a 	mov	r4,r2
   44560:	1823883a 	mov	r17,r3
   44564:	1021883a 	mov	r16,r2
   44568:	0049d280 	call	49d28 <__fixdfsi>
   4456c:	1009883a 	mov	r4,r2
   44570:	102b883a 	mov	r21,r2
   44574:	0049c300 	call	49c30 <__floatsidf>
   44578:	880b883a 	mov	r5,r17
   4457c:	8009883a 	mov	r4,r16
   44580:	180f883a 	mov	r7,r3
   44584:	100d883a 	mov	r6,r2
   44588:	00492780 	call	49278 <__subdf3>
   4458c:	180b883a 	mov	r5,r3
   44590:	d8c00517 	ldw	r3,20(sp)
   44594:	1009883a 	mov	r4,r2
   44598:	ad400c04 	addi	r21,r21,48
   4459c:	1d05883a 	add	r2,r3,r20
   445a0:	15400005 	stb	r21,0(r2)
   445a4:	2021883a 	mov	r16,r4
   445a8:	d9000317 	ldw	r4,12(sp)
   445ac:	a5000044 	addi	r20,r20,1
   445b0:	2823883a 	mov	r17,r5
   445b4:	a13fe11e 	bne	r20,r4,4453c <_dtoa_r+0x1378>
   445b8:	e505883a 	add	r2,fp,r20
   445bc:	173fffc4 	addi	fp,r2,-1
   445c0:	0025883a 	mov	r18,zero
   445c4:	04cff834 	movhi	r19,16352
   445c8:	b009883a 	mov	r4,r22
   445cc:	b80b883a 	mov	r5,r23
   445d0:	900d883a 	mov	r6,r18
   445d4:	980f883a 	mov	r7,r19
   445d8:	00492f80 	call	492f8 <__adddf3>
   445dc:	180b883a 	mov	r5,r3
   445e0:	1009883a 	mov	r4,r2
   445e4:	800d883a 	mov	r6,r16
   445e8:	880f883a 	mov	r7,r17
   445ec:	0049ba80 	call	49ba8 <__ltdf2>
   445f0:	103cab16 	blt	r2,zero,438a0 <_dtoa_r+0x6dc>
   445f4:	0009883a 	mov	r4,zero
   445f8:	980b883a 	mov	r5,r19
   445fc:	b80f883a 	mov	r7,r23
   44600:	b00d883a 	mov	r6,r22
   44604:	00492780 	call	49278 <__subdf3>
   44608:	180b883a 	mov	r5,r3
   4460c:	880f883a 	mov	r7,r17
   44610:	1009883a 	mov	r4,r2
   44614:	800d883a 	mov	r6,r16
   44618:	0049a980 	call	49a98 <__gtdf2>
   4461c:	00bc470e 	bge	zero,r2,4373c <_dtoa_r+0x578>
   44620:	00c00c04 	movi	r3,48
   44624:	e73fffc4 	addi	fp,fp,-1
   44628:	e0800007 	ldb	r2,0(fp)
   4462c:	10fffd26 	beq	r2,r3,44624 <_dtoa_r+0x1460>
   44630:	d9800417 	ldw	r6,16(sp)
   44634:	e7000044 	addi	fp,fp,1
   44638:	d9800d15 	stw	r6,52(sp)
   4463c:	003cab06 	br	438ec <_dtoa_r+0x728>
   44640:	d8c00f17 	ldw	r3,60(sp)
   44644:	d9001117 	ldw	r4,68(sp)
   44648:	20e1c83a 	sub	r16,r4,r3
   4464c:	0007883a 	mov	r3,zero
   44650:	003d9b06 	br	43cc0 <_dtoa_r+0xafc>
   44654:	00800e44 	movi	r2,57
   44658:	b0800005 	stb	r2,0(r22)
   4465c:	b5800044 	addi	r22,r22,1
   44660:	003dc106 	br	43d68 <_dtoa_r+0xba4>
   44664:	05800084 	movi	r22,2
   44668:	003bf706 	br	43648 <_dtoa_r+0x484>
   4466c:	d9000f17 	ldw	r4,60(sp)
   44670:	013c000e 	bge	zero,r4,43674 <_dtoa_r+0x4b0>
   44674:	d9800e17 	ldw	r6,56(sp)
   44678:	01bc300e 	bge	zero,r6,4373c <_dtoa_r+0x578>
   4467c:	0005883a 	mov	r2,zero
   44680:	00d00934 	movhi	r3,16420
   44684:	a80b883a 	mov	r5,r21
   44688:	180f883a 	mov	r7,r3
   4468c:	a009883a 	mov	r4,r20
   44690:	100d883a 	mov	r6,r2
   44694:	004936c0 	call	4936c <__muldf3>
   44698:	b1000044 	addi	r4,r22,1
   4469c:	1021883a 	mov	r16,r2
   446a0:	1823883a 	mov	r17,r3
   446a4:	0049c300 	call	49c30 <__floatsidf>
   446a8:	880b883a 	mov	r5,r17
   446ac:	8009883a 	mov	r4,r16
   446b0:	180f883a 	mov	r7,r3
   446b4:	100d883a 	mov	r6,r2
   446b8:	004936c0 	call	4936c <__muldf3>
   446bc:	0011883a 	mov	r8,zero
   446c0:	02500734 	movhi	r9,16412
   446c4:	180b883a 	mov	r5,r3
   446c8:	480f883a 	mov	r7,r9
   446cc:	1009883a 	mov	r4,r2
   446d0:	400d883a 	mov	r6,r8
   446d4:	00492f80 	call	492f8 <__adddf3>
   446d8:	102d883a 	mov	r22,r2
   446dc:	00bf3034 	movhi	r2,64704
   446e0:	10ef883a 	add	r23,r2,r3
   446e4:	d8800d17 	ldw	r2,52(sp)
   446e8:	d8c00e17 	ldw	r3,56(sp)
   446ec:	8029883a 	mov	r20,r16
   446f0:	10bfffc4 	addi	r2,r2,-1
   446f4:	882b883a 	mov	r21,r17
   446f8:	d8800415 	stw	r2,16(sp)
   446fc:	d8c00315 	stw	r3,12(sp)
   44700:	003e8306 	br	44110 <_dtoa_r+0xf4c>
   44704:	d8800117 	ldw	r2,4(sp)
   44708:	dc001117 	ldw	r16,68(sp)
   4470c:	dc801017 	ldw	r18,64(sp)
   44710:	00c00d84 	movi	r3,54
   44714:	1887c83a 	sub	r3,r3,r2
   44718:	003d6906 	br	43cc0 <_dtoa_r+0xafc>
   4471c:	01800044 	movi	r6,1
   44720:	3021883a 	mov	r16,r6
   44724:	d9800f15 	stw	r6,60(sp)
   44728:	d9802615 	stw	r6,152(sp)
   4472c:	d9800e15 	stw	r6,56(sp)
   44730:	003b9306 	br	43580 <_dtoa_r+0x3bc>
   44734:	b021883a 	mov	r16,r22
   44738:	dd800f15 	stw	r22,60(sp)
   4473c:	003b9006 	br	43580 <_dtoa_r+0x3bc>
   44740:	103e221e 	bne	r2,zero,43fcc <_dtoa_r+0xe08>
   44744:	b880004c 	andi	r2,r23,1
   44748:	1005003a 	cmpeq	r2,r2,zero
   4474c:	103e1f1e 	bne	r2,zero,43fcc <_dtoa_r+0xe08>
   44750:	003e1b06 	br	43fc0 <_dtoa_r+0xdfc>
   44754:	d9001617 	ldw	r4,88(sp)
   44758:	980b883a 	mov	r5,r19
   4475c:	01800284 	movi	r6,10
   44760:	000f883a 	mov	r7,zero
   44764:	00470ac0 	call	470ac <__multadd>
   44768:	d8c00e17 	ldw	r3,56(sp)
   4476c:	1027883a 	mov	r19,r2
   44770:	d8c00f15 	stw	r3,60(sp)
   44774:	003cd306 	br	43ac4 <_dtoa_r+0x900>

00044778 <_fflush_r>:
   44778:	defffb04 	addi	sp,sp,-20
   4477c:	dcc00315 	stw	r19,12(sp)
   44780:	dc800215 	stw	r18,8(sp)
   44784:	dfc00415 	stw	ra,16(sp)
   44788:	dc400115 	stw	r17,4(sp)
   4478c:	dc000015 	stw	r16,0(sp)
   44790:	2027883a 	mov	r19,r4
   44794:	2825883a 	mov	r18,r5
   44798:	20000226 	beq	r4,zero,447a4 <_fflush_r+0x2c>
   4479c:	20800e17 	ldw	r2,56(r4)
   447a0:	10005626 	beq	r2,zero,448fc <_fflush_r+0x184>
   447a4:	9100030b 	ldhu	r4,12(r18)
   447a8:	20ffffcc 	andi	r3,r4,65535
   447ac:	18e0001c 	xori	r3,r3,32768
   447b0:	18e00004 	addi	r3,r3,-32768
   447b4:	1880020c 	andi	r2,r3,8
   447b8:	1000261e 	bne	r2,zero,44854 <_fflush_r+0xdc>
   447bc:	90c00117 	ldw	r3,4(r18)
   447c0:	20820014 	ori	r2,r4,2048
   447c4:	9080030d 	sth	r2,12(r18)
   447c8:	1009883a 	mov	r4,r2
   447cc:	00c0400e 	bge	zero,r3,448d0 <_fflush_r+0x158>
   447d0:	92000a17 	ldw	r8,40(r18)
   447d4:	40004026 	beq	r8,zero,448d8 <_fflush_r+0x160>
   447d8:	2084000c 	andi	r2,r4,4096
   447dc:	10005326 	beq	r2,zero,4492c <_fflush_r+0x1b4>
   447e0:	94001417 	ldw	r16,80(r18)
   447e4:	9080030b 	ldhu	r2,12(r18)
   447e8:	1080010c 	andi	r2,r2,4
   447ec:	1000481e 	bne	r2,zero,44910 <_fflush_r+0x198>
   447f0:	91400717 	ldw	r5,28(r18)
   447f4:	9809883a 	mov	r4,r19
   447f8:	800d883a 	mov	r6,r16
   447fc:	000f883a 	mov	r7,zero
   44800:	403ee83a 	callr	r8
   44804:	8080261e 	bne	r16,r2,448a0 <_fflush_r+0x128>
   44808:	9080030b 	ldhu	r2,12(r18)
   4480c:	91000417 	ldw	r4,16(r18)
   44810:	90000115 	stw	zero,4(r18)
   44814:	10bdffcc 	andi	r2,r2,63487
   44818:	10ffffcc 	andi	r3,r2,65535
   4481c:	18c4000c 	andi	r3,r3,4096
   44820:	9080030d 	sth	r2,12(r18)
   44824:	91000015 	stw	r4,0(r18)
   44828:	18002b26 	beq	r3,zero,448d8 <_fflush_r+0x160>
   4482c:	0007883a 	mov	r3,zero
   44830:	1805883a 	mov	r2,r3
   44834:	94001415 	stw	r16,80(r18)
   44838:	dfc00417 	ldw	ra,16(sp)
   4483c:	dcc00317 	ldw	r19,12(sp)
   44840:	dc800217 	ldw	r18,8(sp)
   44844:	dc400117 	ldw	r17,4(sp)
   44848:	dc000017 	ldw	r16,0(sp)
   4484c:	dec00504 	addi	sp,sp,20
   44850:	f800283a 	ret
   44854:	94400417 	ldw	r17,16(r18)
   44858:	88001f26 	beq	r17,zero,448d8 <_fflush_r+0x160>
   4485c:	90800017 	ldw	r2,0(r18)
   44860:	18c000cc 	andi	r3,r3,3
   44864:	94400015 	stw	r17,0(r18)
   44868:	1461c83a 	sub	r16,r2,r17
   4486c:	18002526 	beq	r3,zero,44904 <_fflush_r+0x18c>
   44870:	0005883a 	mov	r2,zero
   44874:	90800215 	stw	r2,8(r18)
   44878:	0400170e 	bge	zero,r16,448d8 <_fflush_r+0x160>
   4487c:	90c00917 	ldw	r3,36(r18)
   44880:	91400717 	ldw	r5,28(r18)
   44884:	880d883a 	mov	r6,r17
   44888:	800f883a 	mov	r7,r16
   4488c:	9809883a 	mov	r4,r19
   44890:	183ee83a 	callr	r3
   44894:	88a3883a 	add	r17,r17,r2
   44898:	80a1c83a 	sub	r16,r16,r2
   4489c:	00bff616 	blt	zero,r2,44878 <_fflush_r+0x100>
   448a0:	9080030b 	ldhu	r2,12(r18)
   448a4:	00ffffc4 	movi	r3,-1
   448a8:	10801014 	ori	r2,r2,64
   448ac:	9080030d 	sth	r2,12(r18)
   448b0:	1805883a 	mov	r2,r3
   448b4:	dfc00417 	ldw	ra,16(sp)
   448b8:	dcc00317 	ldw	r19,12(sp)
   448bc:	dc800217 	ldw	r18,8(sp)
   448c0:	dc400117 	ldw	r17,4(sp)
   448c4:	dc000017 	ldw	r16,0(sp)
   448c8:	dec00504 	addi	sp,sp,20
   448cc:	f800283a 	ret
   448d0:	90800f17 	ldw	r2,60(r18)
   448d4:	00bfbe16 	blt	zero,r2,447d0 <_fflush_r+0x58>
   448d8:	0007883a 	mov	r3,zero
   448dc:	1805883a 	mov	r2,r3
   448e0:	dfc00417 	ldw	ra,16(sp)
   448e4:	dcc00317 	ldw	r19,12(sp)
   448e8:	dc800217 	ldw	r18,8(sp)
   448ec:	dc400117 	ldw	r17,4(sp)
   448f0:	dc000017 	ldw	r16,0(sp)
   448f4:	dec00504 	addi	sp,sp,20
   448f8:	f800283a 	ret
   448fc:	0044a100 	call	44a10 <__sinit>
   44900:	003fa806 	br	447a4 <_fflush_r+0x2c>
   44904:	90800517 	ldw	r2,20(r18)
   44908:	90800215 	stw	r2,8(r18)
   4490c:	003fda06 	br	44878 <_fflush_r+0x100>
   44910:	90800117 	ldw	r2,4(r18)
   44914:	90c00c17 	ldw	r3,48(r18)
   44918:	80a1c83a 	sub	r16,r16,r2
   4491c:	183fb426 	beq	r3,zero,447f0 <_fflush_r+0x78>
   44920:	90800f17 	ldw	r2,60(r18)
   44924:	80a1c83a 	sub	r16,r16,r2
   44928:	003fb106 	br	447f0 <_fflush_r+0x78>
   4492c:	91400717 	ldw	r5,28(r18)
   44930:	9809883a 	mov	r4,r19
   44934:	000d883a 	mov	r6,zero
   44938:	01c00044 	movi	r7,1
   4493c:	403ee83a 	callr	r8
   44940:	1021883a 	mov	r16,r2
   44944:	00bfffc4 	movi	r2,-1
   44948:	80800226 	beq	r16,r2,44954 <_fflush_r+0x1dc>
   4494c:	92000a17 	ldw	r8,40(r18)
   44950:	003fa406 	br	447e4 <_fflush_r+0x6c>
   44954:	98c00017 	ldw	r3,0(r19)
   44958:	00800744 	movi	r2,29
   4495c:	18bfde26 	beq	r3,r2,448d8 <_fflush_r+0x160>
   44960:	9080030b 	ldhu	r2,12(r18)
   44964:	8007883a 	mov	r3,r16
   44968:	10801014 	ori	r2,r2,64
   4496c:	9080030d 	sth	r2,12(r18)
   44970:	003fcf06 	br	448b0 <_fflush_r+0x138>

00044974 <fflush>:
   44974:	01400134 	movhi	r5,4
   44978:	2951de04 	addi	r5,r5,18296
   4497c:	2007883a 	mov	r3,r4
   44980:	20000526 	beq	r4,zero,44998 <fflush+0x24>
   44984:	00800174 	movhi	r2,5
   44988:	10bc8504 	addi	r2,r2,-3564
   4498c:	11000017 	ldw	r4,0(r2)
   44990:	180b883a 	mov	r5,r3
   44994:	00447781 	jmpi	44778 <_fflush_r>
   44998:	00800174 	movhi	r2,5
   4499c:	10bc8604 	addi	r2,r2,-3560
   449a0:	11000017 	ldw	r4,0(r2)
   449a4:	00455781 	jmpi	45578 <_fwalk_reent>

000449a8 <std>:
   449a8:	00800134 	movhi	r2,4
   449ac:	109ebb04 	addi	r2,r2,31468
   449b0:	20800b15 	stw	r2,44(r4)
   449b4:	00800134 	movhi	r2,4
   449b8:	109ef604 	addi	r2,r2,31704
   449bc:	20800815 	stw	r2,32(r4)
   449c0:	00c00134 	movhi	r3,4
   449c4:	18ded704 	addi	r3,r3,31580
   449c8:	00800134 	movhi	r2,4
   449cc:	109ebd04 	addi	r2,r2,31476
   449d0:	2140030d 	sth	r5,12(r4)
   449d4:	2180038d 	sth	r6,14(r4)
   449d8:	20c00915 	stw	r3,36(r4)
   449dc:	20800a15 	stw	r2,40(r4)
   449e0:	20000015 	stw	zero,0(r4)
   449e4:	20000115 	stw	zero,4(r4)
   449e8:	20000215 	stw	zero,8(r4)
   449ec:	20000415 	stw	zero,16(r4)
   449f0:	20000515 	stw	zero,20(r4)
   449f4:	20000615 	stw	zero,24(r4)
   449f8:	21000715 	stw	r4,28(r4)
   449fc:	f800283a 	ret

00044a00 <__sfp_lock_acquire>:
   44a00:	f800283a 	ret

00044a04 <__sfp_lock_release>:
   44a04:	f800283a 	ret

00044a08 <__sinit_lock_acquire>:
   44a08:	f800283a 	ret

00044a0c <__sinit_lock_release>:
   44a0c:	f800283a 	ret

00044a10 <__sinit>:
   44a10:	20800e17 	ldw	r2,56(r4)
   44a14:	defffd04 	addi	sp,sp,-12
   44a18:	dc400115 	stw	r17,4(sp)
   44a1c:	dc000015 	stw	r16,0(sp)
   44a20:	dfc00215 	stw	ra,8(sp)
   44a24:	04400044 	movi	r17,1
   44a28:	01400104 	movi	r5,4
   44a2c:	000d883a 	mov	r6,zero
   44a30:	2021883a 	mov	r16,r4
   44a34:	2200bb04 	addi	r8,r4,748
   44a38:	200f883a 	mov	r7,r4
   44a3c:	10000526 	beq	r2,zero,44a54 <__sinit+0x44>
   44a40:	dfc00217 	ldw	ra,8(sp)
   44a44:	dc400117 	ldw	r17,4(sp)
   44a48:	dc000017 	ldw	r16,0(sp)
   44a4c:	dec00304 	addi	sp,sp,12
   44a50:	f800283a 	ret
   44a54:	21000117 	ldw	r4,4(r4)
   44a58:	00800134 	movhi	r2,4
   44a5c:	1092bd04 	addi	r2,r2,19188
   44a60:	00c000c4 	movi	r3,3
   44a64:	80800f15 	stw	r2,60(r16)
   44a68:	80c0b915 	stw	r3,740(r16)
   44a6c:	8200ba15 	stw	r8,744(r16)
   44a70:	84400e15 	stw	r17,56(r16)
   44a74:	8000b815 	stw	zero,736(r16)
   44a78:	00449a80 	call	449a8 <std>
   44a7c:	81000217 	ldw	r4,8(r16)
   44a80:	880d883a 	mov	r6,r17
   44a84:	800f883a 	mov	r7,r16
   44a88:	01400284 	movi	r5,10
   44a8c:	00449a80 	call	449a8 <std>
   44a90:	81000317 	ldw	r4,12(r16)
   44a94:	800f883a 	mov	r7,r16
   44a98:	01400484 	movi	r5,18
   44a9c:	01800084 	movi	r6,2
   44aa0:	dfc00217 	ldw	ra,8(sp)
   44aa4:	dc400117 	ldw	r17,4(sp)
   44aa8:	dc000017 	ldw	r16,0(sp)
   44aac:	dec00304 	addi	sp,sp,12
   44ab0:	00449a81 	jmpi	449a8 <std>

00044ab4 <__fp_lock>:
   44ab4:	0005883a 	mov	r2,zero
   44ab8:	f800283a 	ret

00044abc <__fp_unlock>:
   44abc:	0005883a 	mov	r2,zero
   44ac0:	f800283a 	ret

00044ac4 <__fp_unlock_all>:
   44ac4:	00800174 	movhi	r2,5
   44ac8:	10bc8504 	addi	r2,r2,-3564
   44acc:	11000017 	ldw	r4,0(r2)
   44ad0:	01400134 	movhi	r5,4
   44ad4:	2952af04 	addi	r5,r5,19132
   44ad8:	00456401 	jmpi	45640 <_fwalk>

00044adc <__fp_lock_all>:
   44adc:	00800174 	movhi	r2,5
   44ae0:	10bc8504 	addi	r2,r2,-3564
   44ae4:	11000017 	ldw	r4,0(r2)
   44ae8:	01400134 	movhi	r5,4
   44aec:	2952ad04 	addi	r5,r5,19124
   44af0:	00456401 	jmpi	45640 <_fwalk>

00044af4 <_cleanup_r>:
   44af4:	01400134 	movhi	r5,4
   44af8:	295fed04 	addi	r5,r5,32692
   44afc:	00456401 	jmpi	45640 <_fwalk>

00044b00 <_cleanup>:
   44b00:	00800174 	movhi	r2,5
   44b04:	10bc8604 	addi	r2,r2,-3560
   44b08:	11000017 	ldw	r4,0(r2)
   44b0c:	0044af41 	jmpi	44af4 <_cleanup_r>

00044b10 <__sfmoreglue>:
   44b10:	defffc04 	addi	sp,sp,-16
   44b14:	dc000015 	stw	r16,0(sp)
   44b18:	2821883a 	mov	r16,r5
   44b1c:	dc400115 	stw	r17,4(sp)
   44b20:	01401704 	movi	r5,92
   44b24:	2023883a 	mov	r17,r4
   44b28:	8009883a 	mov	r4,r16
   44b2c:	dfc00315 	stw	ra,12(sp)
   44b30:	dcc00215 	stw	r19,8(sp)
   44b34:	004a0e00 	call	4a0e0 <__mulsi3>
   44b38:	11400304 	addi	r5,r2,12
   44b3c:	8809883a 	mov	r4,r17
   44b40:	1027883a 	mov	r19,r2
   44b44:	00459500 	call	45950 <_malloc_r>
   44b48:	10c00304 	addi	r3,r2,12
   44b4c:	1023883a 	mov	r17,r2
   44b50:	1809883a 	mov	r4,r3
   44b54:	980d883a 	mov	r6,r19
   44b58:	000b883a 	mov	r5,zero
   44b5c:	10000b26 	beq	r2,zero,44b8c <__sfmoreglue+0x7c>
   44b60:	14000115 	stw	r16,4(r2)
   44b64:	10c00215 	stw	r3,8(r2)
   44b68:	10000015 	stw	zero,0(r2)
   44b6c:	00462f40 	call	462f4 <memset>
   44b70:	8805883a 	mov	r2,r17
   44b74:	dfc00317 	ldw	ra,12(sp)
   44b78:	dcc00217 	ldw	r19,8(sp)
   44b7c:	dc400117 	ldw	r17,4(sp)
   44b80:	dc000017 	ldw	r16,0(sp)
   44b84:	dec00404 	addi	sp,sp,16
   44b88:	f800283a 	ret
   44b8c:	0023883a 	mov	r17,zero
   44b90:	8805883a 	mov	r2,r17
   44b94:	dfc00317 	ldw	ra,12(sp)
   44b98:	dcc00217 	ldw	r19,8(sp)
   44b9c:	dc400117 	ldw	r17,4(sp)
   44ba0:	dc000017 	ldw	r16,0(sp)
   44ba4:	dec00404 	addi	sp,sp,16
   44ba8:	f800283a 	ret

00044bac <__sfp>:
   44bac:	defffd04 	addi	sp,sp,-12
   44bb0:	00800174 	movhi	r2,5
   44bb4:	10bc8604 	addi	r2,r2,-3560
   44bb8:	dc000015 	stw	r16,0(sp)
   44bbc:	14000017 	ldw	r16,0(r2)
   44bc0:	dc400115 	stw	r17,4(sp)
   44bc4:	dfc00215 	stw	ra,8(sp)
   44bc8:	80800e17 	ldw	r2,56(r16)
   44bcc:	2023883a 	mov	r17,r4
   44bd0:	10002626 	beq	r2,zero,44c6c <__sfp+0xc0>
   44bd4:	8400b804 	addi	r16,r16,736
   44bd8:	80800117 	ldw	r2,4(r16)
   44bdc:	81000217 	ldw	r4,8(r16)
   44be0:	10ffffc4 	addi	r3,r2,-1
   44be4:	18000916 	blt	r3,zero,44c0c <__sfp+0x60>
   44be8:	2080030f 	ldh	r2,12(r4)
   44bec:	10000b26 	beq	r2,zero,44c1c <__sfp+0x70>
   44bf0:	017fffc4 	movi	r5,-1
   44bf4:	00000206 	br	44c00 <__sfp+0x54>
   44bf8:	2080030f 	ldh	r2,12(r4)
   44bfc:	10000726 	beq	r2,zero,44c1c <__sfp+0x70>
   44c00:	18ffffc4 	addi	r3,r3,-1
   44c04:	21001704 	addi	r4,r4,92
   44c08:	197ffb1e 	bne	r3,r5,44bf8 <__sfp+0x4c>
   44c0c:	80800017 	ldw	r2,0(r16)
   44c10:	10001926 	beq	r2,zero,44c78 <__sfp+0xcc>
   44c14:	1021883a 	mov	r16,r2
   44c18:	003fef06 	br	44bd8 <__sfp+0x2c>
   44c1c:	00bfffc4 	movi	r2,-1
   44c20:	00c00044 	movi	r3,1
   44c24:	2080038d 	sth	r2,14(r4)
   44c28:	20c0030d 	sth	r3,12(r4)
   44c2c:	20000015 	stw	zero,0(r4)
   44c30:	20000215 	stw	zero,8(r4)
   44c34:	20000115 	stw	zero,4(r4)
   44c38:	20000415 	stw	zero,16(r4)
   44c3c:	20000515 	stw	zero,20(r4)
   44c40:	20000615 	stw	zero,24(r4)
   44c44:	20000c15 	stw	zero,48(r4)
   44c48:	20000d15 	stw	zero,52(r4)
   44c4c:	20001115 	stw	zero,68(r4)
   44c50:	20001215 	stw	zero,72(r4)
   44c54:	2005883a 	mov	r2,r4
   44c58:	dfc00217 	ldw	ra,8(sp)
   44c5c:	dc400117 	ldw	r17,4(sp)
   44c60:	dc000017 	ldw	r16,0(sp)
   44c64:	dec00304 	addi	sp,sp,12
   44c68:	f800283a 	ret
   44c6c:	8009883a 	mov	r4,r16
   44c70:	0044a100 	call	44a10 <__sinit>
   44c74:	003fd706 	br	44bd4 <__sfp+0x28>
   44c78:	8809883a 	mov	r4,r17
   44c7c:	01400104 	movi	r5,4
   44c80:	0044b100 	call	44b10 <__sfmoreglue>
   44c84:	80800015 	stw	r2,0(r16)
   44c88:	103fe21e 	bne	r2,zero,44c14 <__sfp+0x68>
   44c8c:	00800304 	movi	r2,12
   44c90:	0009883a 	mov	r4,zero
   44c94:	88800015 	stw	r2,0(r17)
   44c98:	003fee06 	br	44c54 <__sfp+0xa8>

00044c9c <_malloc_trim_r>:
   44c9c:	defffb04 	addi	sp,sp,-20
   44ca0:	dcc00315 	stw	r19,12(sp)
   44ca4:	04c00174 	movhi	r19,5
   44ca8:	9cf70104 	addi	r19,r19,-9212
   44cac:	dc800215 	stw	r18,8(sp)
   44cb0:	dc400115 	stw	r17,4(sp)
   44cb4:	dc000015 	stw	r16,0(sp)
   44cb8:	2823883a 	mov	r17,r5
   44cbc:	2025883a 	mov	r18,r4
   44cc0:	dfc00415 	stw	ra,16(sp)
   44cc4:	004b0240 	call	4b024 <__malloc_lock>
   44cc8:	98800217 	ldw	r2,8(r19)
   44ccc:	9009883a 	mov	r4,r18
   44cd0:	000b883a 	mov	r5,zero
   44cd4:	10c00117 	ldw	r3,4(r2)
   44cd8:	00bfff04 	movi	r2,-4
   44cdc:	18a0703a 	and	r16,r3,r2
   44ce0:	8463c83a 	sub	r17,r16,r17
   44ce4:	8c43fbc4 	addi	r17,r17,4079
   44ce8:	8822d33a 	srli	r17,r17,12
   44cec:	0083ffc4 	movi	r2,4095
   44cf0:	8c7fffc4 	addi	r17,r17,-1
   44cf4:	8822933a 	slli	r17,r17,12
   44cf8:	1440060e 	bge	r2,r17,44d14 <_malloc_trim_r+0x78>
   44cfc:	0047a7c0 	call	47a7c <_sbrk_r>
   44d00:	98c00217 	ldw	r3,8(r19)
   44d04:	9009883a 	mov	r4,r18
   44d08:	044bc83a 	sub	r5,zero,r17
   44d0c:	80c7883a 	add	r3,r16,r3
   44d10:	10c00926 	beq	r2,r3,44d38 <_malloc_trim_r+0x9c>
   44d14:	004b0440 	call	4b044 <__malloc_unlock>
   44d18:	0005883a 	mov	r2,zero
   44d1c:	dfc00417 	ldw	ra,16(sp)
   44d20:	dcc00317 	ldw	r19,12(sp)
   44d24:	dc800217 	ldw	r18,8(sp)
   44d28:	dc400117 	ldw	r17,4(sp)
   44d2c:	dc000017 	ldw	r16,0(sp)
   44d30:	dec00504 	addi	sp,sp,20
   44d34:	f800283a 	ret
   44d38:	9009883a 	mov	r4,r18
   44d3c:	0047a7c0 	call	47a7c <_sbrk_r>
   44d40:	844dc83a 	sub	r6,r16,r17
   44d44:	00ffffc4 	movi	r3,-1
   44d48:	9009883a 	mov	r4,r18
   44d4c:	000b883a 	mov	r5,zero
   44d50:	01c00174 	movhi	r7,5
   44d54:	39c33904 	addi	r7,r7,3300
   44d58:	31800054 	ori	r6,r6,1
   44d5c:	10c00926 	beq	r2,r3,44d84 <_malloc_trim_r+0xe8>
   44d60:	38800017 	ldw	r2,0(r7)
   44d64:	98c00217 	ldw	r3,8(r19)
   44d68:	9009883a 	mov	r4,r18
   44d6c:	1445c83a 	sub	r2,r2,r17
   44d70:	38800015 	stw	r2,0(r7)
   44d74:	19800115 	stw	r6,4(r3)
   44d78:	004b0440 	call	4b044 <__malloc_unlock>
   44d7c:	00800044 	movi	r2,1
   44d80:	003fe606 	br	44d1c <_malloc_trim_r+0x80>
   44d84:	0047a7c0 	call	47a7c <_sbrk_r>
   44d88:	99800217 	ldw	r6,8(r19)
   44d8c:	100f883a 	mov	r7,r2
   44d90:	9009883a 	mov	r4,r18
   44d94:	1187c83a 	sub	r3,r2,r6
   44d98:	008003c4 	movi	r2,15
   44d9c:	19400054 	ori	r5,r3,1
   44da0:	10ffdc0e 	bge	r2,r3,44d14 <_malloc_trim_r+0x78>
   44da4:	00800174 	movhi	r2,5
   44da8:	10bc8a04 	addi	r2,r2,-3544
   44dac:	10c00017 	ldw	r3,0(r2)
   44db0:	00800174 	movhi	r2,5
   44db4:	10833904 	addi	r2,r2,3300
   44db8:	31400115 	stw	r5,4(r6)
   44dbc:	38c7c83a 	sub	r3,r7,r3
   44dc0:	10c00015 	stw	r3,0(r2)
   44dc4:	003fd306 	br	44d14 <_malloc_trim_r+0x78>

00044dc8 <_free_r>:
   44dc8:	defffd04 	addi	sp,sp,-12
   44dcc:	dc400115 	stw	r17,4(sp)
   44dd0:	dc000015 	stw	r16,0(sp)
   44dd4:	dfc00215 	stw	ra,8(sp)
   44dd8:	2821883a 	mov	r16,r5
   44ddc:	2023883a 	mov	r17,r4
   44de0:	28005a26 	beq	r5,zero,44f4c <_free_r+0x184>
   44de4:	004b0240 	call	4b024 <__malloc_lock>
   44de8:	823ffe04 	addi	r8,r16,-8
   44dec:	41400117 	ldw	r5,4(r8)
   44df0:	00bfff84 	movi	r2,-2
   44df4:	02800174 	movhi	r10,5
   44df8:	52b70104 	addi	r10,r10,-9212
   44dfc:	288e703a 	and	r7,r5,r2
   44e00:	41cd883a 	add	r6,r8,r7
   44e04:	30c00117 	ldw	r3,4(r6)
   44e08:	51000217 	ldw	r4,8(r10)
   44e0c:	00bfff04 	movi	r2,-4
   44e10:	1892703a 	and	r9,r3,r2
   44e14:	5017883a 	mov	r11,r10
   44e18:	31006726 	beq	r6,r4,44fb8 <_free_r+0x1f0>
   44e1c:	2880004c 	andi	r2,r5,1
   44e20:	1005003a 	cmpeq	r2,r2,zero
   44e24:	32400115 	stw	r9,4(r6)
   44e28:	10001a1e 	bne	r2,zero,44e94 <_free_r+0xcc>
   44e2c:	000b883a 	mov	r5,zero
   44e30:	3247883a 	add	r3,r6,r9
   44e34:	18800117 	ldw	r2,4(r3)
   44e38:	1080004c 	andi	r2,r2,1
   44e3c:	1000231e 	bne	r2,zero,44ecc <_free_r+0x104>
   44e40:	280ac03a 	cmpne	r5,r5,zero
   44e44:	3a4f883a 	add	r7,r7,r9
   44e48:	2800451e 	bne	r5,zero,44f60 <_free_r+0x198>
   44e4c:	31000217 	ldw	r4,8(r6)
   44e50:	00800174 	movhi	r2,5
   44e54:	10b70304 	addi	r2,r2,-9204
   44e58:	20807b26 	beq	r4,r2,45048 <_free_r+0x280>
   44e5c:	30800317 	ldw	r2,12(r6)
   44e60:	3a07883a 	add	r3,r7,r8
   44e64:	19c00015 	stw	r7,0(r3)
   44e68:	11000215 	stw	r4,8(r2)
   44e6c:	20800315 	stw	r2,12(r4)
   44e70:	38800054 	ori	r2,r7,1
   44e74:	40800115 	stw	r2,4(r8)
   44e78:	28001a26 	beq	r5,zero,44ee4 <_free_r+0x11c>
   44e7c:	8809883a 	mov	r4,r17
   44e80:	dfc00217 	ldw	ra,8(sp)
   44e84:	dc400117 	ldw	r17,4(sp)
   44e88:	dc000017 	ldw	r16,0(sp)
   44e8c:	dec00304 	addi	sp,sp,12
   44e90:	004b0441 	jmpi	4b044 <__malloc_unlock>
   44e94:	80bffe17 	ldw	r2,-8(r16)
   44e98:	50c00204 	addi	r3,r10,8
   44e9c:	4091c83a 	sub	r8,r8,r2
   44ea0:	41000217 	ldw	r4,8(r8)
   44ea4:	388f883a 	add	r7,r7,r2
   44ea8:	20c06126 	beq	r4,r3,45030 <_free_r+0x268>
   44eac:	40800317 	ldw	r2,12(r8)
   44eb0:	3247883a 	add	r3,r6,r9
   44eb4:	000b883a 	mov	r5,zero
   44eb8:	11000215 	stw	r4,8(r2)
   44ebc:	20800315 	stw	r2,12(r4)
   44ec0:	18800117 	ldw	r2,4(r3)
   44ec4:	1080004c 	andi	r2,r2,1
   44ec8:	103fdd26 	beq	r2,zero,44e40 <_free_r+0x78>
   44ecc:	38800054 	ori	r2,r7,1
   44ed0:	3a07883a 	add	r3,r7,r8
   44ed4:	280ac03a 	cmpne	r5,r5,zero
   44ed8:	40800115 	stw	r2,4(r8)
   44edc:	19c00015 	stw	r7,0(r3)
   44ee0:	283fe61e 	bne	r5,zero,44e7c <_free_r+0xb4>
   44ee4:	00807fc4 	movi	r2,511
   44ee8:	11c01f2e 	bgeu	r2,r7,44f68 <_free_r+0x1a0>
   44eec:	3806d27a 	srli	r3,r7,9
   44ef0:	1800481e 	bne	r3,zero,45014 <_free_r+0x24c>
   44ef4:	3804d0fa 	srli	r2,r7,3
   44ef8:	100690fa 	slli	r3,r2,3
   44efc:	1acd883a 	add	r6,r3,r11
   44f00:	31400217 	ldw	r5,8(r6)
   44f04:	31405926 	beq	r6,r5,4506c <_free_r+0x2a4>
   44f08:	28800117 	ldw	r2,4(r5)
   44f0c:	00ffff04 	movi	r3,-4
   44f10:	10c4703a 	and	r2,r2,r3
   44f14:	3880022e 	bgeu	r7,r2,44f20 <_free_r+0x158>
   44f18:	29400217 	ldw	r5,8(r5)
   44f1c:	317ffa1e 	bne	r6,r5,44f08 <_free_r+0x140>
   44f20:	29800317 	ldw	r6,12(r5)
   44f24:	41800315 	stw	r6,12(r8)
   44f28:	41400215 	stw	r5,8(r8)
   44f2c:	8809883a 	mov	r4,r17
   44f30:	2a000315 	stw	r8,12(r5)
   44f34:	32000215 	stw	r8,8(r6)
   44f38:	dfc00217 	ldw	ra,8(sp)
   44f3c:	dc400117 	ldw	r17,4(sp)
   44f40:	dc000017 	ldw	r16,0(sp)
   44f44:	dec00304 	addi	sp,sp,12
   44f48:	004b0441 	jmpi	4b044 <__malloc_unlock>
   44f4c:	dfc00217 	ldw	ra,8(sp)
   44f50:	dc400117 	ldw	r17,4(sp)
   44f54:	dc000017 	ldw	r16,0(sp)
   44f58:	dec00304 	addi	sp,sp,12
   44f5c:	f800283a 	ret
   44f60:	31000217 	ldw	r4,8(r6)
   44f64:	003fbd06 	br	44e5c <_free_r+0x94>
   44f68:	3806d0fa 	srli	r3,r7,3
   44f6c:	00800044 	movi	r2,1
   44f70:	51400117 	ldw	r5,4(r10)
   44f74:	180890fa 	slli	r4,r3,3
   44f78:	1807d0ba 	srai	r3,r3,2
   44f7c:	22c9883a 	add	r4,r4,r11
   44f80:	21800217 	ldw	r6,8(r4)
   44f84:	10c4983a 	sll	r2,r2,r3
   44f88:	41000315 	stw	r4,12(r8)
   44f8c:	41800215 	stw	r6,8(r8)
   44f90:	288ab03a 	or	r5,r5,r2
   44f94:	22000215 	stw	r8,8(r4)
   44f98:	8809883a 	mov	r4,r17
   44f9c:	51400115 	stw	r5,4(r10)
   44fa0:	32000315 	stw	r8,12(r6)
   44fa4:	dfc00217 	ldw	ra,8(sp)
   44fa8:	dc400117 	ldw	r17,4(sp)
   44fac:	dc000017 	ldw	r16,0(sp)
   44fb0:	dec00304 	addi	sp,sp,12
   44fb4:	004b0441 	jmpi	4b044 <__malloc_unlock>
   44fb8:	2880004c 	andi	r2,r5,1
   44fbc:	3a4d883a 	add	r6,r7,r9
   44fc0:	1000071e 	bne	r2,zero,44fe0 <_free_r+0x218>
   44fc4:	80bffe17 	ldw	r2,-8(r16)
   44fc8:	4091c83a 	sub	r8,r8,r2
   44fcc:	41000317 	ldw	r4,12(r8)
   44fd0:	40c00217 	ldw	r3,8(r8)
   44fd4:	308d883a 	add	r6,r6,r2
   44fd8:	20c00215 	stw	r3,8(r4)
   44fdc:	19000315 	stw	r4,12(r3)
   44fe0:	00800174 	movhi	r2,5
   44fe4:	10bc8904 	addi	r2,r2,-3548
   44fe8:	11000017 	ldw	r4,0(r2)
   44fec:	30c00054 	ori	r3,r6,1
   44ff0:	52000215 	stw	r8,8(r10)
   44ff4:	40c00115 	stw	r3,4(r8)
   44ff8:	313fa036 	bltu	r6,r4,44e7c <_free_r+0xb4>
   44ffc:	00800174 	movhi	r2,5
   45000:	10832f04 	addi	r2,r2,3260
   45004:	11400017 	ldw	r5,0(r2)
   45008:	8809883a 	mov	r4,r17
   4500c:	0044c9c0 	call	44c9c <_malloc_trim_r>
   45010:	003f9a06 	br	44e7c <_free_r+0xb4>
   45014:	00800104 	movi	r2,4
   45018:	10c0072e 	bgeu	r2,r3,45038 <_free_r+0x270>
   4501c:	00800504 	movi	r2,20
   45020:	10c01936 	bltu	r2,r3,45088 <_free_r+0x2c0>
   45024:	188016c4 	addi	r2,r3,91
   45028:	100690fa 	slli	r3,r2,3
   4502c:	003fb306 	br	44efc <_free_r+0x134>
   45030:	01400044 	movi	r5,1
   45034:	003f7e06 	br	44e30 <_free_r+0x68>
   45038:	3804d1ba 	srli	r2,r7,6
   4503c:	10800e04 	addi	r2,r2,56
   45040:	100690fa 	slli	r3,r2,3
   45044:	003fad06 	br	44efc <_free_r+0x134>
   45048:	22000315 	stw	r8,12(r4)
   4504c:	22000215 	stw	r8,8(r4)
   45050:	3a05883a 	add	r2,r7,r8
   45054:	38c00054 	ori	r3,r7,1
   45058:	11c00015 	stw	r7,0(r2)
   4505c:	41000215 	stw	r4,8(r8)
   45060:	40c00115 	stw	r3,4(r8)
   45064:	41000315 	stw	r4,12(r8)
   45068:	003f8406 	br	44e7c <_free_r+0xb4>
   4506c:	1005d0ba 	srai	r2,r2,2
   45070:	00c00044 	movi	r3,1
   45074:	51000117 	ldw	r4,4(r10)
   45078:	1886983a 	sll	r3,r3,r2
   4507c:	20c8b03a 	or	r4,r4,r3
   45080:	51000115 	stw	r4,4(r10)
   45084:	003fa706 	br	44f24 <_free_r+0x15c>
   45088:	00801504 	movi	r2,84
   4508c:	10c00436 	bltu	r2,r3,450a0 <_free_r+0x2d8>
   45090:	3804d33a 	srli	r2,r7,12
   45094:	10801b84 	addi	r2,r2,110
   45098:	100690fa 	slli	r3,r2,3
   4509c:	003f9706 	br	44efc <_free_r+0x134>
   450a0:	00805504 	movi	r2,340
   450a4:	10c00436 	bltu	r2,r3,450b8 <_free_r+0x2f0>
   450a8:	3804d3fa 	srli	r2,r7,15
   450ac:	10801dc4 	addi	r2,r2,119
   450b0:	100690fa 	slli	r3,r2,3
   450b4:	003f9106 	br	44efc <_free_r+0x134>
   450b8:	00815504 	movi	r2,1364
   450bc:	10c0032e 	bgeu	r2,r3,450cc <_free_r+0x304>
   450c0:	00801f84 	movi	r2,126
   450c4:	00c0fc04 	movi	r3,1008
   450c8:	003f8c06 	br	44efc <_free_r+0x134>
   450cc:	3804d4ba 	srli	r2,r7,18
   450d0:	10801f04 	addi	r2,r2,124
   450d4:	100690fa 	slli	r3,r2,3
   450d8:	003f8806 	br	44efc <_free_r+0x134>

000450dc <__sfvwrite_r>:
   450dc:	30800217 	ldw	r2,8(r6)
   450e0:	defff504 	addi	sp,sp,-44
   450e4:	df000915 	stw	fp,36(sp)
   450e8:	dd800715 	stw	r22,28(sp)
   450ec:	dc800315 	stw	r18,12(sp)
   450f0:	dfc00a15 	stw	ra,40(sp)
   450f4:	ddc00815 	stw	r23,32(sp)
   450f8:	dd400615 	stw	r21,24(sp)
   450fc:	dd000515 	stw	r20,20(sp)
   45100:	dcc00415 	stw	r19,16(sp)
   45104:	dc400215 	stw	r17,8(sp)
   45108:	dc000115 	stw	r16,4(sp)
   4510c:	302d883a 	mov	r22,r6
   45110:	2039883a 	mov	fp,r4
   45114:	2825883a 	mov	r18,r5
   45118:	10001c26 	beq	r2,zero,4518c <__sfvwrite_r+0xb0>
   4511c:	29c0030b 	ldhu	r7,12(r5)
   45120:	3880020c 	andi	r2,r7,8
   45124:	10002726 	beq	r2,zero,451c4 <__sfvwrite_r+0xe8>
   45128:	28800417 	ldw	r2,16(r5)
   4512c:	10002526 	beq	r2,zero,451c4 <__sfvwrite_r+0xe8>
   45130:	3880008c 	andi	r2,r7,2
   45134:	b5400017 	ldw	r21,0(r22)
   45138:	10002826 	beq	r2,zero,451dc <__sfvwrite_r+0x100>
   4513c:	0021883a 	mov	r16,zero
   45140:	0023883a 	mov	r17,zero
   45144:	880d883a 	mov	r6,r17
   45148:	e009883a 	mov	r4,fp
   4514c:	00810004 	movi	r2,1024
   45150:	80006e26 	beq	r16,zero,4530c <__sfvwrite_r+0x230>
   45154:	800f883a 	mov	r7,r16
   45158:	91400717 	ldw	r5,28(r18)
   4515c:	1400012e 	bgeu	r2,r16,45164 <__sfvwrite_r+0x88>
   45160:	100f883a 	mov	r7,r2
   45164:	90c00917 	ldw	r3,36(r18)
   45168:	183ee83a 	callr	r3
   4516c:	1007883a 	mov	r3,r2
   45170:	80a1c83a 	sub	r16,r16,r2
   45174:	88a3883a 	add	r17,r17,r2
   45178:	00806d0e 	bge	zero,r2,45330 <__sfvwrite_r+0x254>
   4517c:	b0800217 	ldw	r2,8(r22)
   45180:	10c5c83a 	sub	r2,r2,r3
   45184:	b0800215 	stw	r2,8(r22)
   45188:	103fee1e 	bne	r2,zero,45144 <__sfvwrite_r+0x68>
   4518c:	0009883a 	mov	r4,zero
   45190:	2005883a 	mov	r2,r4
   45194:	dfc00a17 	ldw	ra,40(sp)
   45198:	df000917 	ldw	fp,36(sp)
   4519c:	ddc00817 	ldw	r23,32(sp)
   451a0:	dd800717 	ldw	r22,28(sp)
   451a4:	dd400617 	ldw	r21,24(sp)
   451a8:	dd000517 	ldw	r20,20(sp)
   451ac:	dcc00417 	ldw	r19,16(sp)
   451b0:	dc800317 	ldw	r18,12(sp)
   451b4:	dc400217 	ldw	r17,8(sp)
   451b8:	dc000117 	ldw	r16,4(sp)
   451bc:	dec00b04 	addi	sp,sp,44
   451c0:	f800283a 	ret
   451c4:	0042e440 	call	42e44 <__swsetup_r>
   451c8:	1000e41e 	bne	r2,zero,4555c <__sfvwrite_r+0x480>
   451cc:	91c0030b 	ldhu	r7,12(r18)
   451d0:	b5400017 	ldw	r21,0(r22)
   451d4:	3880008c 	andi	r2,r7,2
   451d8:	103fd81e 	bne	r2,zero,4513c <__sfvwrite_r+0x60>
   451dc:	3880004c 	andi	r2,r7,1
   451e0:	1005003a 	cmpeq	r2,r2,zero
   451e4:	10005726 	beq	r2,zero,45344 <__sfvwrite_r+0x268>
   451e8:	0029883a 	mov	r20,zero
   451ec:	002f883a 	mov	r23,zero
   451f0:	a0004226 	beq	r20,zero,452fc <__sfvwrite_r+0x220>
   451f4:	3880800c 	andi	r2,r7,512
   451f8:	94000217 	ldw	r16,8(r18)
   451fc:	10008b26 	beq	r2,zero,4542c <__sfvwrite_r+0x350>
   45200:	800d883a 	mov	r6,r16
   45204:	a400a536 	bltu	r20,r16,4549c <__sfvwrite_r+0x3c0>
   45208:	3881200c 	andi	r2,r7,1152
   4520c:	10002726 	beq	r2,zero,452ac <__sfvwrite_r+0x1d0>
   45210:	90800517 	ldw	r2,20(r18)
   45214:	92000417 	ldw	r8,16(r18)
   45218:	91400017 	ldw	r5,0(r18)
   4521c:	1087883a 	add	r3,r2,r2
   45220:	1887883a 	add	r3,r3,r2
   45224:	1808d7fa 	srli	r4,r3,31
   45228:	2a21c83a 	sub	r16,r5,r8
   4522c:	80800044 	addi	r2,r16,1
   45230:	20c9883a 	add	r4,r4,r3
   45234:	2027d07a 	srai	r19,r4,1
   45238:	a085883a 	add	r2,r20,r2
   4523c:	980d883a 	mov	r6,r19
   45240:	9880022e 	bgeu	r19,r2,4524c <__sfvwrite_r+0x170>
   45244:	1027883a 	mov	r19,r2
   45248:	100d883a 	mov	r6,r2
   4524c:	3881000c 	andi	r2,r7,1024
   45250:	1000b826 	beq	r2,zero,45534 <__sfvwrite_r+0x458>
   45254:	300b883a 	mov	r5,r6
   45258:	e009883a 	mov	r4,fp
   4525c:	00459500 	call	45950 <_malloc_r>
   45260:	10003126 	beq	r2,zero,45328 <__sfvwrite_r+0x24c>
   45264:	91400417 	ldw	r5,16(r18)
   45268:	1009883a 	mov	r4,r2
   4526c:	800d883a 	mov	r6,r16
   45270:	1023883a 	mov	r17,r2
   45274:	00461740 	call	46174 <memcpy>
   45278:	90c0030b 	ldhu	r3,12(r18)
   4527c:	00beffc4 	movi	r2,-1025
   45280:	1886703a 	and	r3,r3,r2
   45284:	18c02014 	ori	r3,r3,128
   45288:	90c0030d 	sth	r3,12(r18)
   4528c:	9c07c83a 	sub	r3,r19,r16
   45290:	8c05883a 	add	r2,r17,r16
   45294:	a00d883a 	mov	r6,r20
   45298:	a021883a 	mov	r16,r20
   4529c:	90800015 	stw	r2,0(r18)
   452a0:	90c00215 	stw	r3,8(r18)
   452a4:	94400415 	stw	r17,16(r18)
   452a8:	94c00515 	stw	r19,20(r18)
   452ac:	91000017 	ldw	r4,0(r18)
   452b0:	b80b883a 	mov	r5,r23
   452b4:	a023883a 	mov	r17,r20
   452b8:	00462140 	call	46214 <memmove>
   452bc:	90c00217 	ldw	r3,8(r18)
   452c0:	90800017 	ldw	r2,0(r18)
   452c4:	a027883a 	mov	r19,r20
   452c8:	1c07c83a 	sub	r3,r3,r16
   452cc:	1405883a 	add	r2,r2,r16
   452d0:	90c00215 	stw	r3,8(r18)
   452d4:	a021883a 	mov	r16,r20
   452d8:	90800015 	stw	r2,0(r18)
   452dc:	b0800217 	ldw	r2,8(r22)
   452e0:	1405c83a 	sub	r2,r2,r16
   452e4:	b0800215 	stw	r2,8(r22)
   452e8:	103fa826 	beq	r2,zero,4518c <__sfvwrite_r+0xb0>
   452ec:	a469c83a 	sub	r20,r20,r17
   452f0:	91c0030b 	ldhu	r7,12(r18)
   452f4:	bcef883a 	add	r23,r23,r19
   452f8:	a03fbe1e 	bne	r20,zero,451f4 <__sfvwrite_r+0x118>
   452fc:	adc00017 	ldw	r23,0(r21)
   45300:	ad000117 	ldw	r20,4(r21)
   45304:	ad400204 	addi	r21,r21,8
   45308:	003fb906 	br	451f0 <__sfvwrite_r+0x114>
   4530c:	ac400017 	ldw	r17,0(r21)
   45310:	ac000117 	ldw	r16,4(r21)
   45314:	ad400204 	addi	r21,r21,8
   45318:	003f8a06 	br	45144 <__sfvwrite_r+0x68>
   4531c:	91400417 	ldw	r5,16(r18)
   45320:	e009883a 	mov	r4,fp
   45324:	0044dc80 	call	44dc8 <_free_r>
   45328:	00800304 	movi	r2,12
   4532c:	e0800015 	stw	r2,0(fp)
   45330:	9080030b 	ldhu	r2,12(r18)
   45334:	013fffc4 	movi	r4,-1
   45338:	10801014 	ori	r2,r2,64
   4533c:	9080030d 	sth	r2,12(r18)
   45340:	003f9306 	br	45190 <__sfvwrite_r+0xb4>
   45344:	0027883a 	mov	r19,zero
   45348:	002f883a 	mov	r23,zero
   4534c:	d8000015 	stw	zero,0(sp)
   45350:	0029883a 	mov	r20,zero
   45354:	98001e26 	beq	r19,zero,453d0 <__sfvwrite_r+0x2f4>
   45358:	d8c00017 	ldw	r3,0(sp)
   4535c:	1804c03a 	cmpne	r2,r3,zero
   45360:	10005e26 	beq	r2,zero,454dc <__sfvwrite_r+0x400>
   45364:	9821883a 	mov	r16,r19
   45368:	a4c0012e 	bgeu	r20,r19,45370 <__sfvwrite_r+0x294>
   4536c:	a021883a 	mov	r16,r20
   45370:	91000017 	ldw	r4,0(r18)
   45374:	90800417 	ldw	r2,16(r18)
   45378:	91800217 	ldw	r6,8(r18)
   4537c:	91c00517 	ldw	r7,20(r18)
   45380:	1100022e 	bgeu	r2,r4,4538c <__sfvwrite_r+0x2b0>
   45384:	31e3883a 	add	r17,r6,r7
   45388:	8c001616 	blt	r17,r16,453e4 <__sfvwrite_r+0x308>
   4538c:	81c03816 	blt	r16,r7,45470 <__sfvwrite_r+0x394>
   45390:	90c00917 	ldw	r3,36(r18)
   45394:	91400717 	ldw	r5,28(r18)
   45398:	e009883a 	mov	r4,fp
   4539c:	b80d883a 	mov	r6,r23
   453a0:	183ee83a 	callr	r3
   453a4:	1023883a 	mov	r17,r2
   453a8:	00bfe10e 	bge	zero,r2,45330 <__sfvwrite_r+0x254>
   453ac:	a469c83a 	sub	r20,r20,r17
   453b0:	a0001826 	beq	r20,zero,45414 <__sfvwrite_r+0x338>
   453b4:	b0800217 	ldw	r2,8(r22)
   453b8:	1445c83a 	sub	r2,r2,r17
   453bc:	b0800215 	stw	r2,8(r22)
   453c0:	103f7226 	beq	r2,zero,4518c <__sfvwrite_r+0xb0>
   453c4:	9c67c83a 	sub	r19,r19,r17
   453c8:	bc6f883a 	add	r23,r23,r17
   453cc:	983fe21e 	bne	r19,zero,45358 <__sfvwrite_r+0x27c>
   453d0:	adc00017 	ldw	r23,0(r21)
   453d4:	acc00117 	ldw	r19,4(r21)
   453d8:	ad400204 	addi	r21,r21,8
   453dc:	d8000015 	stw	zero,0(sp)
   453e0:	003fdc06 	br	45354 <__sfvwrite_r+0x278>
   453e4:	b80b883a 	mov	r5,r23
   453e8:	880d883a 	mov	r6,r17
   453ec:	00462140 	call	46214 <memmove>
   453f0:	90c00017 	ldw	r3,0(r18)
   453f4:	e009883a 	mov	r4,fp
   453f8:	900b883a 	mov	r5,r18
   453fc:	1c47883a 	add	r3,r3,r17
   45400:	90c00015 	stw	r3,0(r18)
   45404:	00447780 	call	44778 <_fflush_r>
   45408:	103fc91e 	bne	r2,zero,45330 <__sfvwrite_r+0x254>
   4540c:	a469c83a 	sub	r20,r20,r17
   45410:	a03fe81e 	bne	r20,zero,453b4 <__sfvwrite_r+0x2d8>
   45414:	e009883a 	mov	r4,fp
   45418:	900b883a 	mov	r5,r18
   4541c:	00447780 	call	44778 <_fflush_r>
   45420:	103fc31e 	bne	r2,zero,45330 <__sfvwrite_r+0x254>
   45424:	d8000015 	stw	zero,0(sp)
   45428:	003fe206 	br	453b4 <__sfvwrite_r+0x2d8>
   4542c:	91000017 	ldw	r4,0(r18)
   45430:	90800417 	ldw	r2,16(r18)
   45434:	1100022e 	bgeu	r2,r4,45440 <__sfvwrite_r+0x364>
   45438:	8023883a 	mov	r17,r16
   4543c:	85003136 	bltu	r16,r20,45504 <__sfvwrite_r+0x428>
   45440:	91c00517 	ldw	r7,20(r18)
   45444:	a1c01836 	bltu	r20,r7,454a8 <__sfvwrite_r+0x3cc>
   45448:	90c00917 	ldw	r3,36(r18)
   4544c:	91400717 	ldw	r5,28(r18)
   45450:	e009883a 	mov	r4,fp
   45454:	b80d883a 	mov	r6,r23
   45458:	183ee83a 	callr	r3
   4545c:	1021883a 	mov	r16,r2
   45460:	00bfb30e 	bge	zero,r2,45330 <__sfvwrite_r+0x254>
   45464:	1023883a 	mov	r17,r2
   45468:	1027883a 	mov	r19,r2
   4546c:	003f9b06 	br	452dc <__sfvwrite_r+0x200>
   45470:	b80b883a 	mov	r5,r23
   45474:	800d883a 	mov	r6,r16
   45478:	00462140 	call	46214 <memmove>
   4547c:	90c00217 	ldw	r3,8(r18)
   45480:	90800017 	ldw	r2,0(r18)
   45484:	8023883a 	mov	r17,r16
   45488:	1c07c83a 	sub	r3,r3,r16
   4548c:	1405883a 	add	r2,r2,r16
   45490:	90c00215 	stw	r3,8(r18)
   45494:	90800015 	stw	r2,0(r18)
   45498:	003fc406 	br	453ac <__sfvwrite_r+0x2d0>
   4549c:	a00d883a 	mov	r6,r20
   454a0:	a021883a 	mov	r16,r20
   454a4:	003f8106 	br	452ac <__sfvwrite_r+0x1d0>
   454a8:	b80b883a 	mov	r5,r23
   454ac:	a00d883a 	mov	r6,r20
   454b0:	00462140 	call	46214 <memmove>
   454b4:	90c00217 	ldw	r3,8(r18)
   454b8:	90800017 	ldw	r2,0(r18)
   454bc:	a021883a 	mov	r16,r20
   454c0:	1d07c83a 	sub	r3,r3,r20
   454c4:	1505883a 	add	r2,r2,r20
   454c8:	a023883a 	mov	r17,r20
   454cc:	a027883a 	mov	r19,r20
   454d0:	90c00215 	stw	r3,8(r18)
   454d4:	90800015 	stw	r2,0(r18)
   454d8:	003f8006 	br	452dc <__sfvwrite_r+0x200>
   454dc:	b809883a 	mov	r4,r23
   454e0:	01400284 	movi	r5,10
   454e4:	980d883a 	mov	r6,r19
   454e8:	00460900 	call	46090 <memchr>
   454ec:	10001726 	beq	r2,zero,4554c <__sfvwrite_r+0x470>
   454f0:	15c5c83a 	sub	r2,r2,r23
   454f4:	15000044 	addi	r20,r2,1
   454f8:	00800044 	movi	r2,1
   454fc:	d8800015 	stw	r2,0(sp)
   45500:	003f9806 	br	45364 <__sfvwrite_r+0x288>
   45504:	b80b883a 	mov	r5,r23
   45508:	800d883a 	mov	r6,r16
   4550c:	00462140 	call	46214 <memmove>
   45510:	90c00017 	ldw	r3,0(r18)
   45514:	e009883a 	mov	r4,fp
   45518:	900b883a 	mov	r5,r18
   4551c:	1c07883a 	add	r3,r3,r16
   45520:	90c00015 	stw	r3,0(r18)
   45524:	8027883a 	mov	r19,r16
   45528:	00447780 	call	44778 <_fflush_r>
   4552c:	103f6b26 	beq	r2,zero,452dc <__sfvwrite_r+0x200>
   45530:	003f7f06 	br	45330 <__sfvwrite_r+0x254>
   45534:	400b883a 	mov	r5,r8
   45538:	e009883a 	mov	r4,fp
   4553c:	00474180 	call	47418 <_realloc_r>
   45540:	103f7626 	beq	r2,zero,4531c <__sfvwrite_r+0x240>
   45544:	1023883a 	mov	r17,r2
   45548:	003f5006 	br	4528c <__sfvwrite_r+0x1b0>
   4554c:	00c00044 	movi	r3,1
   45550:	9d000044 	addi	r20,r19,1
   45554:	d8c00015 	stw	r3,0(sp)
   45558:	003f8206 	br	45364 <__sfvwrite_r+0x288>
   4555c:	9080030b 	ldhu	r2,12(r18)
   45560:	00c00244 	movi	r3,9
   45564:	013fffc4 	movi	r4,-1
   45568:	10801014 	ori	r2,r2,64
   4556c:	9080030d 	sth	r2,12(r18)
   45570:	e0c00015 	stw	r3,0(fp)
   45574:	003f0606 	br	45190 <__sfvwrite_r+0xb4>

00045578 <_fwalk_reent>:
   45578:	defff704 	addi	sp,sp,-36
   4557c:	dcc00315 	stw	r19,12(sp)
   45580:	24c0b804 	addi	r19,r4,736
   45584:	dd800615 	stw	r22,24(sp)
   45588:	dd400515 	stw	r21,20(sp)
   4558c:	dfc00815 	stw	ra,32(sp)
   45590:	ddc00715 	stw	r23,28(sp)
   45594:	dd000415 	stw	r20,16(sp)
   45598:	dc800215 	stw	r18,8(sp)
   4559c:	dc400115 	stw	r17,4(sp)
   455a0:	dc000015 	stw	r16,0(sp)
   455a4:	202b883a 	mov	r21,r4
   455a8:	282d883a 	mov	r22,r5
   455ac:	0044a000 	call	44a00 <__sfp_lock_acquire>
   455b0:	98002126 	beq	r19,zero,45638 <_fwalk_reent+0xc0>
   455b4:	002f883a 	mov	r23,zero
   455b8:	9c800117 	ldw	r18,4(r19)
   455bc:	9c000217 	ldw	r16,8(r19)
   455c0:	90bfffc4 	addi	r2,r18,-1
   455c4:	10000d16 	blt	r2,zero,455fc <_fwalk_reent+0x84>
   455c8:	0023883a 	mov	r17,zero
   455cc:	053fffc4 	movi	r20,-1
   455d0:	8080030f 	ldh	r2,12(r16)
   455d4:	8c400044 	addi	r17,r17,1
   455d8:	10000626 	beq	r2,zero,455f4 <_fwalk_reent+0x7c>
   455dc:	8080038f 	ldh	r2,14(r16)
   455e0:	800b883a 	mov	r5,r16
   455e4:	a809883a 	mov	r4,r21
   455e8:	15000226 	beq	r2,r20,455f4 <_fwalk_reent+0x7c>
   455ec:	b03ee83a 	callr	r22
   455f0:	b8aeb03a 	or	r23,r23,r2
   455f4:	84001704 	addi	r16,r16,92
   455f8:	947ff51e 	bne	r18,r17,455d0 <_fwalk_reent+0x58>
   455fc:	9cc00017 	ldw	r19,0(r19)
   45600:	983fed1e 	bne	r19,zero,455b8 <_fwalk_reent+0x40>
   45604:	0044a040 	call	44a04 <__sfp_lock_release>
   45608:	b805883a 	mov	r2,r23
   4560c:	dfc00817 	ldw	ra,32(sp)
   45610:	ddc00717 	ldw	r23,28(sp)
   45614:	dd800617 	ldw	r22,24(sp)
   45618:	dd400517 	ldw	r21,20(sp)
   4561c:	dd000417 	ldw	r20,16(sp)
   45620:	dcc00317 	ldw	r19,12(sp)
   45624:	dc800217 	ldw	r18,8(sp)
   45628:	dc400117 	ldw	r17,4(sp)
   4562c:	dc000017 	ldw	r16,0(sp)
   45630:	dec00904 	addi	sp,sp,36
   45634:	f800283a 	ret
   45638:	002f883a 	mov	r23,zero
   4563c:	003ff106 	br	45604 <_fwalk_reent+0x8c>

00045640 <_fwalk>:
   45640:	defff804 	addi	sp,sp,-32
   45644:	dcc00315 	stw	r19,12(sp)
   45648:	24c0b804 	addi	r19,r4,736
   4564c:	dd400515 	stw	r21,20(sp)
   45650:	dfc00715 	stw	ra,28(sp)
   45654:	dd800615 	stw	r22,24(sp)
   45658:	dd000415 	stw	r20,16(sp)
   4565c:	dc800215 	stw	r18,8(sp)
   45660:	dc400115 	stw	r17,4(sp)
   45664:	dc000015 	stw	r16,0(sp)
   45668:	282b883a 	mov	r21,r5
   4566c:	0044a000 	call	44a00 <__sfp_lock_acquire>
   45670:	98001f26 	beq	r19,zero,456f0 <_fwalk+0xb0>
   45674:	002d883a 	mov	r22,zero
   45678:	9c800117 	ldw	r18,4(r19)
   4567c:	9c000217 	ldw	r16,8(r19)
   45680:	90bfffc4 	addi	r2,r18,-1
   45684:	10000c16 	blt	r2,zero,456b8 <_fwalk+0x78>
   45688:	0023883a 	mov	r17,zero
   4568c:	053fffc4 	movi	r20,-1
   45690:	8080030f 	ldh	r2,12(r16)
   45694:	8c400044 	addi	r17,r17,1
   45698:	10000526 	beq	r2,zero,456b0 <_fwalk+0x70>
   4569c:	8080038f 	ldh	r2,14(r16)
   456a0:	8009883a 	mov	r4,r16
   456a4:	15000226 	beq	r2,r20,456b0 <_fwalk+0x70>
   456a8:	a83ee83a 	callr	r21
   456ac:	b0acb03a 	or	r22,r22,r2
   456b0:	84001704 	addi	r16,r16,92
   456b4:	947ff61e 	bne	r18,r17,45690 <_fwalk+0x50>
   456b8:	9cc00017 	ldw	r19,0(r19)
   456bc:	983fee1e 	bne	r19,zero,45678 <_fwalk+0x38>
   456c0:	0044a040 	call	44a04 <__sfp_lock_release>
   456c4:	b005883a 	mov	r2,r22
   456c8:	dfc00717 	ldw	ra,28(sp)
   456cc:	dd800617 	ldw	r22,24(sp)
   456d0:	dd400517 	ldw	r21,20(sp)
   456d4:	dd000417 	ldw	r20,16(sp)
   456d8:	dcc00317 	ldw	r19,12(sp)
   456dc:	dc800217 	ldw	r18,8(sp)
   456e0:	dc400117 	ldw	r17,4(sp)
   456e4:	dc000017 	ldw	r16,0(sp)
   456e8:	dec00804 	addi	sp,sp,32
   456ec:	f800283a 	ret
   456f0:	002d883a 	mov	r22,zero
   456f4:	003ff206 	br	456c0 <_fwalk+0x80>

000456f8 <__locale_charset>:
   456f8:	d0a00317 	ldw	r2,-32756(gp)
   456fc:	f800283a 	ret

00045700 <_localeconv_r>:
   45700:	00800174 	movhi	r2,5
   45704:	10b55704 	addi	r2,r2,-10916
   45708:	f800283a 	ret

0004570c <localeconv>:
   4570c:	00800174 	movhi	r2,5
   45710:	10bc8504 	addi	r2,r2,-3564
   45714:	11000017 	ldw	r4,0(r2)
   45718:	00457001 	jmpi	45700 <_localeconv_r>

0004571c <_setlocale_r>:
   4571c:	defffc04 	addi	sp,sp,-16
   45720:	00c00174 	movhi	r3,5
   45724:	18f55204 	addi	r3,r3,-10936
   45728:	dc800215 	stw	r18,8(sp)
   4572c:	dc400115 	stw	r17,4(sp)
   45730:	dc000015 	stw	r16,0(sp)
   45734:	2023883a 	mov	r17,r4
   45738:	2825883a 	mov	r18,r5
   4573c:	dfc00315 	stw	ra,12(sp)
   45740:	3021883a 	mov	r16,r6
   45744:	3009883a 	mov	r4,r6
   45748:	180b883a 	mov	r5,r3
   4574c:	30000926 	beq	r6,zero,45774 <_setlocale_r+0x58>
   45750:	0047c380 	call	47c38 <strcmp>
   45754:	8009883a 	mov	r4,r16
   45758:	01400174 	movhi	r5,5
   4575c:	29753d04 	addi	r5,r5,-11020
   45760:	10000b1e 	bne	r2,zero,45790 <_setlocale_r+0x74>
   45764:	8c000d15 	stw	r16,52(r17)
   45768:	8c800c15 	stw	r18,48(r17)
   4576c:	00c00174 	movhi	r3,5
   45770:	18f55204 	addi	r3,r3,-10936
   45774:	1805883a 	mov	r2,r3
   45778:	dfc00317 	ldw	ra,12(sp)
   4577c:	dc800217 	ldw	r18,8(sp)
   45780:	dc400117 	ldw	r17,4(sp)
   45784:	dc000017 	ldw	r16,0(sp)
   45788:	dec00404 	addi	sp,sp,16
   4578c:	f800283a 	ret
   45790:	0047c380 	call	47c38 <strcmp>
   45794:	0007883a 	mov	r3,zero
   45798:	103ff226 	beq	r2,zero,45764 <_setlocale_r+0x48>
   4579c:	003ff506 	br	45774 <_setlocale_r+0x58>

000457a0 <setlocale>:
   457a0:	01800174 	movhi	r6,5
   457a4:	31bc8504 	addi	r6,r6,-3564
   457a8:	2007883a 	mov	r3,r4
   457ac:	31000017 	ldw	r4,0(r6)
   457b0:	280d883a 	mov	r6,r5
   457b4:	180b883a 	mov	r5,r3
   457b8:	004571c1 	jmpi	4571c <_setlocale_r>

000457bc <__smakebuf_r>:
   457bc:	2880030b 	ldhu	r2,12(r5)
   457c0:	deffed04 	addi	sp,sp,-76
   457c4:	dc401015 	stw	r17,64(sp)
   457c8:	1080008c 	andi	r2,r2,2
   457cc:	dc000f15 	stw	r16,60(sp)
   457d0:	dfc01215 	stw	ra,72(sp)
   457d4:	dc801115 	stw	r18,68(sp)
   457d8:	2821883a 	mov	r16,r5
   457dc:	2023883a 	mov	r17,r4
   457e0:	10000b26 	beq	r2,zero,45810 <__smakebuf_r+0x54>
   457e4:	28c010c4 	addi	r3,r5,67
   457e8:	00800044 	movi	r2,1
   457ec:	28800515 	stw	r2,20(r5)
   457f0:	28c00415 	stw	r3,16(r5)
   457f4:	28c00015 	stw	r3,0(r5)
   457f8:	dfc01217 	ldw	ra,72(sp)
   457fc:	dc801117 	ldw	r18,68(sp)
   45800:	dc401017 	ldw	r17,64(sp)
   45804:	dc000f17 	ldw	r16,60(sp)
   45808:	dec01304 	addi	sp,sp,76
   4580c:	f800283a 	ret
   45810:	2940038f 	ldh	r5,14(r5)
   45814:	28002116 	blt	r5,zero,4589c <__smakebuf_r+0xe0>
   45818:	d80d883a 	mov	r6,sp
   4581c:	0047fc80 	call	47fc8 <_fstat_r>
   45820:	10001e16 	blt	r2,zero,4589c <__smakebuf_r+0xe0>
   45824:	d8800117 	ldw	r2,4(sp)
   45828:	00e00014 	movui	r3,32768
   4582c:	113c000c 	andi	r4,r2,61440
   45830:	20c03126 	beq	r4,r3,458f8 <__smakebuf_r+0x13c>
   45834:	8080030b 	ldhu	r2,12(r16)
   45838:	00c80004 	movi	r3,8192
   4583c:	10820014 	ori	r2,r2,2048
   45840:	8080030d 	sth	r2,12(r16)
   45844:	20c01e26 	beq	r4,r3,458c0 <__smakebuf_r+0x104>
   45848:	04810004 	movi	r18,1024
   4584c:	8809883a 	mov	r4,r17
   45850:	900b883a 	mov	r5,r18
   45854:	00459500 	call	45950 <_malloc_r>
   45858:	1009883a 	mov	r4,r2
   4585c:	10003126 	beq	r2,zero,45924 <__smakebuf_r+0x168>
   45860:	80c0030b 	ldhu	r3,12(r16)
   45864:	00800134 	movhi	r2,4
   45868:	1092bd04 	addi	r2,r2,19188
   4586c:	88800f15 	stw	r2,60(r17)
   45870:	18c02014 	ori	r3,r3,128
   45874:	84800515 	stw	r18,20(r16)
   45878:	80c0030d 	sth	r3,12(r16)
   4587c:	81000415 	stw	r4,16(r16)
   45880:	81000015 	stw	r4,0(r16)
   45884:	dfc01217 	ldw	ra,72(sp)
   45888:	dc801117 	ldw	r18,68(sp)
   4588c:	dc401017 	ldw	r17,64(sp)
   45890:	dc000f17 	ldw	r16,60(sp)
   45894:	dec01304 	addi	sp,sp,76
   45898:	f800283a 	ret
   4589c:	80c0030b 	ldhu	r3,12(r16)
   458a0:	1880200c 	andi	r2,r3,128
   458a4:	10000426 	beq	r2,zero,458b8 <__smakebuf_r+0xfc>
   458a8:	04801004 	movi	r18,64
   458ac:	18820014 	ori	r2,r3,2048
   458b0:	8080030d 	sth	r2,12(r16)
   458b4:	003fe506 	br	4584c <__smakebuf_r+0x90>
   458b8:	04810004 	movi	r18,1024
   458bc:	003ffb06 	br	458ac <__smakebuf_r+0xf0>
   458c0:	8140038f 	ldh	r5,14(r16)
   458c4:	8809883a 	mov	r4,r17
   458c8:	004803c0 	call	4803c <_isatty_r>
   458cc:	103fde26 	beq	r2,zero,45848 <__smakebuf_r+0x8c>
   458d0:	8080030b 	ldhu	r2,12(r16)
   458d4:	80c010c4 	addi	r3,r16,67
   458d8:	04810004 	movi	r18,1024
   458dc:	10800054 	ori	r2,r2,1
   458e0:	8080030d 	sth	r2,12(r16)
   458e4:	00800044 	movi	r2,1
   458e8:	80c00415 	stw	r3,16(r16)
   458ec:	80800515 	stw	r2,20(r16)
   458f0:	80c00015 	stw	r3,0(r16)
   458f4:	003fd506 	br	4584c <__smakebuf_r+0x90>
   458f8:	80c00a17 	ldw	r3,40(r16)
   458fc:	00800134 	movhi	r2,4
   45900:	109ebd04 	addi	r2,r2,31476
   45904:	18bfcb1e 	bne	r3,r2,45834 <__smakebuf_r+0x78>
   45908:	8080030b 	ldhu	r2,12(r16)
   4590c:	00c10004 	movi	r3,1024
   45910:	1825883a 	mov	r18,r3
   45914:	10c4b03a 	or	r2,r2,r3
   45918:	8080030d 	sth	r2,12(r16)
   4591c:	80c01315 	stw	r3,76(r16)
   45920:	003fca06 	br	4584c <__smakebuf_r+0x90>
   45924:	8100030b 	ldhu	r4,12(r16)
   45928:	2080800c 	andi	r2,r4,512
   4592c:	103fb21e 	bne	r2,zero,457f8 <__smakebuf_r+0x3c>
   45930:	80c010c4 	addi	r3,r16,67
   45934:	21000094 	ori	r4,r4,2
   45938:	00800044 	movi	r2,1
   4593c:	80800515 	stw	r2,20(r16)
   45940:	8100030d 	sth	r4,12(r16)
   45944:	80c00415 	stw	r3,16(r16)
   45948:	80c00015 	stw	r3,0(r16)
   4594c:	003faa06 	br	457f8 <__smakebuf_r+0x3c>

00045950 <_malloc_r>:
   45950:	defff604 	addi	sp,sp,-40
   45954:	28c002c4 	addi	r3,r5,11
   45958:	00800584 	movi	r2,22
   4595c:	dc800215 	stw	r18,8(sp)
   45960:	dfc00915 	stw	ra,36(sp)
   45964:	df000815 	stw	fp,32(sp)
   45968:	ddc00715 	stw	r23,28(sp)
   4596c:	dd800615 	stw	r22,24(sp)
   45970:	dd400515 	stw	r21,20(sp)
   45974:	dd000415 	stw	r20,16(sp)
   45978:	dcc00315 	stw	r19,12(sp)
   4597c:	dc400115 	stw	r17,4(sp)
   45980:	dc000015 	stw	r16,0(sp)
   45984:	2025883a 	mov	r18,r4
   45988:	10c01236 	bltu	r2,r3,459d4 <_malloc_r+0x84>
   4598c:	04400404 	movi	r17,16
   45990:	8940142e 	bgeu	r17,r5,459e4 <_malloc_r+0x94>
   45994:	00800304 	movi	r2,12
   45998:	0007883a 	mov	r3,zero
   4599c:	90800015 	stw	r2,0(r18)
   459a0:	1805883a 	mov	r2,r3
   459a4:	dfc00917 	ldw	ra,36(sp)
   459a8:	df000817 	ldw	fp,32(sp)
   459ac:	ddc00717 	ldw	r23,28(sp)
   459b0:	dd800617 	ldw	r22,24(sp)
   459b4:	dd400517 	ldw	r21,20(sp)
   459b8:	dd000417 	ldw	r20,16(sp)
   459bc:	dcc00317 	ldw	r19,12(sp)
   459c0:	dc800217 	ldw	r18,8(sp)
   459c4:	dc400117 	ldw	r17,4(sp)
   459c8:	dc000017 	ldw	r16,0(sp)
   459cc:	dec00a04 	addi	sp,sp,40
   459d0:	f800283a 	ret
   459d4:	00bffe04 	movi	r2,-8
   459d8:	18a2703a 	and	r17,r3,r2
   459dc:	883fed16 	blt	r17,zero,45994 <_malloc_r+0x44>
   459e0:	897fec36 	bltu	r17,r5,45994 <_malloc_r+0x44>
   459e4:	9009883a 	mov	r4,r18
   459e8:	004b0240 	call	4b024 <__malloc_lock>
   459ec:	00807dc4 	movi	r2,503
   459f0:	14402b2e 	bgeu	r2,r17,45aa0 <_malloc_r+0x150>
   459f4:	8806d27a 	srli	r3,r17,9
   459f8:	18003f1e 	bne	r3,zero,45af8 <_malloc_r+0x1a8>
   459fc:	880cd0fa 	srli	r6,r17,3
   45a00:	300490fa 	slli	r2,r6,3
   45a04:	02c00174 	movhi	r11,5
   45a08:	5af70104 	addi	r11,r11,-9212
   45a0c:	12cb883a 	add	r5,r2,r11
   45a10:	2c000317 	ldw	r16,12(r5)
   45a14:	580f883a 	mov	r7,r11
   45a18:	2c00041e 	bne	r5,r16,45a2c <_malloc_r+0xdc>
   45a1c:	00000a06 	br	45a48 <_malloc_r+0xf8>
   45a20:	1800860e 	bge	r3,zero,45c3c <_malloc_r+0x2ec>
   45a24:	84000317 	ldw	r16,12(r16)
   45a28:	2c000726 	beq	r5,r16,45a48 <_malloc_r+0xf8>
   45a2c:	80800117 	ldw	r2,4(r16)
   45a30:	00ffff04 	movi	r3,-4
   45a34:	10c8703a 	and	r4,r2,r3
   45a38:	2447c83a 	sub	r3,r4,r17
   45a3c:	008003c4 	movi	r2,15
   45a40:	10fff70e 	bge	r2,r3,45a20 <_malloc_r+0xd0>
   45a44:	31bfffc4 	addi	r6,r6,-1
   45a48:	32400044 	addi	r9,r6,1
   45a4c:	02800174 	movhi	r10,5
   45a50:	52b70304 	addi	r10,r10,-9204
   45a54:	54000217 	ldw	r16,8(r10)
   45a58:	8280a026 	beq	r16,r10,45cdc <_malloc_r+0x38c>
   45a5c:	80800117 	ldw	r2,4(r16)
   45a60:	00ffff04 	movi	r3,-4
   45a64:	10ca703a 	and	r5,r2,r3
   45a68:	2c4dc83a 	sub	r6,r5,r17
   45a6c:	008003c4 	movi	r2,15
   45a70:	11808316 	blt	r2,r6,45c80 <_malloc_r+0x330>
   45a74:	52800315 	stw	r10,12(r10)
   45a78:	52800215 	stw	r10,8(r10)
   45a7c:	30002916 	blt	r6,zero,45b24 <_malloc_r+0x1d4>
   45a80:	8147883a 	add	r3,r16,r5
   45a84:	18800117 	ldw	r2,4(r3)
   45a88:	9009883a 	mov	r4,r18
   45a8c:	10800054 	ori	r2,r2,1
   45a90:	18800115 	stw	r2,4(r3)
   45a94:	004b0440 	call	4b044 <__malloc_unlock>
   45a98:	80c00204 	addi	r3,r16,8
   45a9c:	003fc006 	br	459a0 <_malloc_r+0x50>
   45aa0:	02c00174 	movhi	r11,5
   45aa4:	5af70104 	addi	r11,r11,-9212
   45aa8:	8ac5883a 	add	r2,r17,r11
   45aac:	14000317 	ldw	r16,12(r2)
   45ab0:	580f883a 	mov	r7,r11
   45ab4:	8806d0fa 	srli	r3,r17,3
   45ab8:	14006c26 	beq	r2,r16,45c6c <_malloc_r+0x31c>
   45abc:	80c00117 	ldw	r3,4(r16)
   45ac0:	00bfff04 	movi	r2,-4
   45ac4:	81800317 	ldw	r6,12(r16)
   45ac8:	1886703a 	and	r3,r3,r2
   45acc:	80c7883a 	add	r3,r16,r3
   45ad0:	18800117 	ldw	r2,4(r3)
   45ad4:	81400217 	ldw	r5,8(r16)
   45ad8:	9009883a 	mov	r4,r18
   45adc:	10800054 	ori	r2,r2,1
   45ae0:	18800115 	stw	r2,4(r3)
   45ae4:	31400215 	stw	r5,8(r6)
   45ae8:	29800315 	stw	r6,12(r5)
   45aec:	004b0440 	call	4b044 <__malloc_unlock>
   45af0:	80c00204 	addi	r3,r16,8
   45af4:	003faa06 	br	459a0 <_malloc_r+0x50>
   45af8:	00800104 	movi	r2,4
   45afc:	10c0052e 	bgeu	r2,r3,45b14 <_malloc_r+0x1c4>
   45b00:	00800504 	movi	r2,20
   45b04:	10c07836 	bltu	r2,r3,45ce8 <_malloc_r+0x398>
   45b08:	198016c4 	addi	r6,r3,91
   45b0c:	300490fa 	slli	r2,r6,3
   45b10:	003fbc06 	br	45a04 <_malloc_r+0xb4>
   45b14:	8804d1ba 	srli	r2,r17,6
   45b18:	11800e04 	addi	r6,r2,56
   45b1c:	300490fa 	slli	r2,r6,3
   45b20:	003fb806 	br	45a04 <_malloc_r+0xb4>
   45b24:	00807fc4 	movi	r2,511
   45b28:	1140bb36 	bltu	r2,r5,45e18 <_malloc_r+0x4c8>
   45b2c:	2806d0fa 	srli	r3,r5,3
   45b30:	573ffe04 	addi	fp,r10,-8
   45b34:	00800044 	movi	r2,1
   45b38:	180890fa 	slli	r4,r3,3
   45b3c:	1807d0ba 	srai	r3,r3,2
   45b40:	e1c00117 	ldw	r7,4(fp)
   45b44:	5909883a 	add	r4,r11,r4
   45b48:	21400217 	ldw	r5,8(r4)
   45b4c:	10c4983a 	sll	r2,r2,r3
   45b50:	81000315 	stw	r4,12(r16)
   45b54:	81400215 	stw	r5,8(r16)
   45b58:	388eb03a 	or	r7,r7,r2
   45b5c:	2c000315 	stw	r16,12(r5)
   45b60:	24000215 	stw	r16,8(r4)
   45b64:	e1c00115 	stw	r7,4(fp)
   45b68:	4807883a 	mov	r3,r9
   45b6c:	4800cd16 	blt	r9,zero,45ea4 <_malloc_r+0x554>
   45b70:	1807d0ba 	srai	r3,r3,2
   45b74:	00800044 	movi	r2,1
   45b78:	10c8983a 	sll	r4,r2,r3
   45b7c:	39004436 	bltu	r7,r4,45c90 <_malloc_r+0x340>
   45b80:	21c4703a 	and	r2,r4,r7
   45b84:	10000a1e 	bne	r2,zero,45bb0 <_malloc_r+0x260>
   45b88:	2109883a 	add	r4,r4,r4
   45b8c:	00bfff04 	movi	r2,-4
   45b90:	4884703a 	and	r2,r9,r2
   45b94:	3906703a 	and	r3,r7,r4
   45b98:	12400104 	addi	r9,r2,4
   45b9c:	1800041e 	bne	r3,zero,45bb0 <_malloc_r+0x260>
   45ba0:	2109883a 	add	r4,r4,r4
   45ba4:	3904703a 	and	r2,r7,r4
   45ba8:	4a400104 	addi	r9,r9,4
   45bac:	103ffc26 	beq	r2,zero,45ba0 <_malloc_r+0x250>
   45bb0:	480490fa 	slli	r2,r9,3
   45bb4:	4819883a 	mov	r12,r9
   45bb8:	023fff04 	movi	r8,-4
   45bbc:	589b883a 	add	r13,r11,r2
   45bc0:	6807883a 	mov	r3,r13
   45bc4:	014003c4 	movi	r5,15
   45bc8:	1c000317 	ldw	r16,12(r3)
   45bcc:	1c00041e 	bne	r3,r16,45be0 <_malloc_r+0x290>
   45bd0:	0000a706 	br	45e70 <_malloc_r+0x520>
   45bd4:	3000ab0e 	bge	r6,zero,45e84 <_malloc_r+0x534>
   45bd8:	84000317 	ldw	r16,12(r16)
   45bdc:	1c00a426 	beq	r3,r16,45e70 <_malloc_r+0x520>
   45be0:	80800117 	ldw	r2,4(r16)
   45be4:	1204703a 	and	r2,r2,r8
   45be8:	144dc83a 	sub	r6,r2,r17
   45bec:	29bff90e 	bge	r5,r6,45bd4 <_malloc_r+0x284>
   45bf0:	81000317 	ldw	r4,12(r16)
   45bf4:	80c00217 	ldw	r3,8(r16)
   45bf8:	89400054 	ori	r5,r17,1
   45bfc:	8445883a 	add	r2,r16,r17
   45c00:	20c00215 	stw	r3,8(r4)
   45c04:	19000315 	stw	r4,12(r3)
   45c08:	81400115 	stw	r5,4(r16)
   45c0c:	1187883a 	add	r3,r2,r6
   45c10:	31000054 	ori	r4,r6,1
   45c14:	50800315 	stw	r2,12(r10)
   45c18:	50800215 	stw	r2,8(r10)
   45c1c:	19800015 	stw	r6,0(r3)
   45c20:	11000115 	stw	r4,4(r2)
   45c24:	12800215 	stw	r10,8(r2)
   45c28:	12800315 	stw	r10,12(r2)
   45c2c:	9009883a 	mov	r4,r18
   45c30:	004b0440 	call	4b044 <__malloc_unlock>
   45c34:	80c00204 	addi	r3,r16,8
   45c38:	003f5906 	br	459a0 <_malloc_r+0x50>
   45c3c:	8109883a 	add	r4,r16,r4
   45c40:	20800117 	ldw	r2,4(r4)
   45c44:	80c00217 	ldw	r3,8(r16)
   45c48:	81400317 	ldw	r5,12(r16)
   45c4c:	10800054 	ori	r2,r2,1
   45c50:	20800115 	stw	r2,4(r4)
   45c54:	28c00215 	stw	r3,8(r5)
   45c58:	19400315 	stw	r5,12(r3)
   45c5c:	9009883a 	mov	r4,r18
   45c60:	004b0440 	call	4b044 <__malloc_unlock>
   45c64:	80c00204 	addi	r3,r16,8
   45c68:	003f4d06 	br	459a0 <_malloc_r+0x50>
   45c6c:	80800204 	addi	r2,r16,8
   45c70:	14000317 	ldw	r16,12(r2)
   45c74:	143f911e 	bne	r2,r16,45abc <_malloc_r+0x16c>
   45c78:	1a400084 	addi	r9,r3,2
   45c7c:	003f7306 	br	45a4c <_malloc_r+0xfc>
   45c80:	88c00054 	ori	r3,r17,1
   45c84:	8445883a 	add	r2,r16,r17
   45c88:	80c00115 	stw	r3,4(r16)
   45c8c:	003fdf06 	br	45c0c <_malloc_r+0x2bc>
   45c90:	e4000217 	ldw	r16,8(fp)
   45c94:	00bfff04 	movi	r2,-4
   45c98:	80c00117 	ldw	r3,4(r16)
   45c9c:	802d883a 	mov	r22,r16
   45ca0:	18aa703a 	and	r21,r3,r2
   45ca4:	ac401636 	bltu	r21,r17,45d00 <_malloc_r+0x3b0>
   45ca8:	ac49c83a 	sub	r4,r21,r17
   45cac:	008003c4 	movi	r2,15
   45cb0:	1100130e 	bge	r2,r4,45d00 <_malloc_r+0x3b0>
   45cb4:	88800054 	ori	r2,r17,1
   45cb8:	8447883a 	add	r3,r16,r17
   45cbc:	80800115 	stw	r2,4(r16)
   45cc0:	20800054 	ori	r2,r4,1
   45cc4:	18800115 	stw	r2,4(r3)
   45cc8:	e0c00215 	stw	r3,8(fp)
   45ccc:	9009883a 	mov	r4,r18
   45cd0:	004b0440 	call	4b044 <__malloc_unlock>
   45cd4:	80c00204 	addi	r3,r16,8
   45cd8:	003f3106 	br	459a0 <_malloc_r+0x50>
   45cdc:	39c00117 	ldw	r7,4(r7)
   45ce0:	573ffe04 	addi	fp,r10,-8
   45ce4:	003fa006 	br	45b68 <_malloc_r+0x218>
   45ce8:	00801504 	movi	r2,84
   45cec:	10c06736 	bltu	r2,r3,45e8c <_malloc_r+0x53c>
   45cf0:	8804d33a 	srli	r2,r17,12
   45cf4:	11801b84 	addi	r6,r2,110
   45cf8:	300490fa 	slli	r2,r6,3
   45cfc:	003f4106 	br	45a04 <_malloc_r+0xb4>
   45d00:	d0a6aa17 	ldw	r2,-25944(gp)
   45d04:	d0e00517 	ldw	r3,-32748(gp)
   45d08:	053fffc4 	movi	r20,-1
   45d0c:	10800404 	addi	r2,r2,16
   45d10:	88a7883a 	add	r19,r17,r2
   45d14:	1d000326 	beq	r3,r20,45d24 <_malloc_r+0x3d4>
   45d18:	98c3ffc4 	addi	r3,r19,4095
   45d1c:	00bc0004 	movi	r2,-4096
   45d20:	18a6703a 	and	r19,r3,r2
   45d24:	9009883a 	mov	r4,r18
   45d28:	980b883a 	mov	r5,r19
   45d2c:	0047a7c0 	call	47a7c <_sbrk_r>
   45d30:	1009883a 	mov	r4,r2
   45d34:	15000426 	beq	r2,r20,45d48 <_malloc_r+0x3f8>
   45d38:	854b883a 	add	r5,r16,r21
   45d3c:	1029883a 	mov	r20,r2
   45d40:	11405a2e 	bgeu	r2,r5,45eac <_malloc_r+0x55c>
   45d44:	87000c26 	beq	r16,fp,45d78 <_malloc_r+0x428>
   45d48:	e4000217 	ldw	r16,8(fp)
   45d4c:	80c00117 	ldw	r3,4(r16)
   45d50:	00bfff04 	movi	r2,-4
   45d54:	1884703a 	and	r2,r3,r2
   45d58:	14400336 	bltu	r2,r17,45d68 <_malloc_r+0x418>
   45d5c:	1449c83a 	sub	r4,r2,r17
   45d60:	008003c4 	movi	r2,15
   45d64:	113fd316 	blt	r2,r4,45cb4 <_malloc_r+0x364>
   45d68:	9009883a 	mov	r4,r18
   45d6c:	004b0440 	call	4b044 <__malloc_unlock>
   45d70:	0007883a 	mov	r3,zero
   45d74:	003f0a06 	br	459a0 <_malloc_r+0x50>
   45d78:	05c00174 	movhi	r23,5
   45d7c:	bdc33904 	addi	r23,r23,3300
   45d80:	b8800017 	ldw	r2,0(r23)
   45d84:	988d883a 	add	r6,r19,r2
   45d88:	b9800015 	stw	r6,0(r23)
   45d8c:	d0e00517 	ldw	r3,-32748(gp)
   45d90:	00bfffc4 	movi	r2,-1
   45d94:	18808e26 	beq	r3,r2,45fd0 <_malloc_r+0x680>
   45d98:	2145c83a 	sub	r2,r4,r5
   45d9c:	3085883a 	add	r2,r6,r2
   45da0:	b8800015 	stw	r2,0(r23)
   45da4:	20c001cc 	andi	r3,r4,7
   45da8:	18005f1e 	bne	r3,zero,45f28 <_malloc_r+0x5d8>
   45dac:	000b883a 	mov	r5,zero
   45db0:	a4c5883a 	add	r2,r20,r19
   45db4:	1083ffcc 	andi	r2,r2,4095
   45db8:	00c40004 	movi	r3,4096
   45dbc:	1887c83a 	sub	r3,r3,r2
   45dc0:	28e7883a 	add	r19,r5,r3
   45dc4:	9009883a 	mov	r4,r18
   45dc8:	980b883a 	mov	r5,r19
   45dcc:	0047a7c0 	call	47a7c <_sbrk_r>
   45dd0:	1007883a 	mov	r3,r2
   45dd4:	00bfffc4 	movi	r2,-1
   45dd8:	18807a26 	beq	r3,r2,45fc4 <_malloc_r+0x674>
   45ddc:	1d05c83a 	sub	r2,r3,r20
   45de0:	9885883a 	add	r2,r19,r2
   45de4:	10c00054 	ori	r3,r2,1
   45de8:	b8800017 	ldw	r2,0(r23)
   45dec:	a021883a 	mov	r16,r20
   45df0:	a0c00115 	stw	r3,4(r20)
   45df4:	9885883a 	add	r2,r19,r2
   45df8:	b8800015 	stw	r2,0(r23)
   45dfc:	e5000215 	stw	r20,8(fp)
   45e00:	b7003626 	beq	r22,fp,45edc <_malloc_r+0x58c>
   45e04:	018003c4 	movi	r6,15
   45e08:	35404b36 	bltu	r6,r21,45f38 <_malloc_r+0x5e8>
   45e0c:	00800044 	movi	r2,1
   45e10:	a0800115 	stw	r2,4(r20)
   45e14:	003fcd06 	br	45d4c <_malloc_r+0x3fc>
   45e18:	2808d27a 	srli	r4,r5,9
   45e1c:	2000371e 	bne	r4,zero,45efc <_malloc_r+0x5ac>
   45e20:	2808d0fa 	srli	r4,r5,3
   45e24:	200690fa 	slli	r3,r4,3
   45e28:	1ad1883a 	add	r8,r3,r11
   45e2c:	41800217 	ldw	r6,8(r8)
   45e30:	41805b26 	beq	r8,r6,45fa0 <_malloc_r+0x650>
   45e34:	30800117 	ldw	r2,4(r6)
   45e38:	00ffff04 	movi	r3,-4
   45e3c:	10c4703a 	and	r2,r2,r3
   45e40:	2880022e 	bgeu	r5,r2,45e4c <_malloc_r+0x4fc>
   45e44:	31800217 	ldw	r6,8(r6)
   45e48:	41bffa1e 	bne	r8,r6,45e34 <_malloc_r+0x4e4>
   45e4c:	32000317 	ldw	r8,12(r6)
   45e50:	39c00117 	ldw	r7,4(r7)
   45e54:	82000315 	stw	r8,12(r16)
   45e58:	81800215 	stw	r6,8(r16)
   45e5c:	07000174 	movhi	fp,5
   45e60:	e7370104 	addi	fp,fp,-9212
   45e64:	34000315 	stw	r16,12(r6)
   45e68:	44000215 	stw	r16,8(r8)
   45e6c:	003f3e06 	br	45b68 <_malloc_r+0x218>
   45e70:	63000044 	addi	r12,r12,1
   45e74:	608000cc 	andi	r2,r12,3
   45e78:	10005d26 	beq	r2,zero,45ff0 <_malloc_r+0x6a0>
   45e7c:	18c00204 	addi	r3,r3,8
   45e80:	003f5106 	br	45bc8 <_malloc_r+0x278>
   45e84:	8089883a 	add	r4,r16,r2
   45e88:	003f6d06 	br	45c40 <_malloc_r+0x2f0>
   45e8c:	00805504 	movi	r2,340
   45e90:	10c02036 	bltu	r2,r3,45f14 <_malloc_r+0x5c4>
   45e94:	8804d3fa 	srli	r2,r17,15
   45e98:	11801dc4 	addi	r6,r2,119
   45e9c:	300490fa 	slli	r2,r6,3
   45ea0:	003ed806 	br	45a04 <_malloc_r+0xb4>
   45ea4:	48c000c4 	addi	r3,r9,3
   45ea8:	003f3106 	br	45b70 <_malloc_r+0x220>
   45eac:	05c00174 	movhi	r23,5
   45eb0:	bdc33904 	addi	r23,r23,3300
   45eb4:	b8800017 	ldw	r2,0(r23)
   45eb8:	988d883a 	add	r6,r19,r2
   45ebc:	b9800015 	stw	r6,0(r23)
   45ec0:	293fb21e 	bne	r5,r4,45d8c <_malloc_r+0x43c>
   45ec4:	2083ffcc 	andi	r2,r4,4095
   45ec8:	103fb01e 	bne	r2,zero,45d8c <_malloc_r+0x43c>
   45ecc:	e4000217 	ldw	r16,8(fp)
   45ed0:	9d45883a 	add	r2,r19,r21
   45ed4:	10800054 	ori	r2,r2,1
   45ed8:	80800115 	stw	r2,4(r16)
   45edc:	b8c00017 	ldw	r3,0(r23)
   45ee0:	d0a6ab17 	ldw	r2,-25940(gp)
   45ee4:	10c0012e 	bgeu	r2,r3,45eec <_malloc_r+0x59c>
   45ee8:	d0e6ab15 	stw	r3,-25940(gp)
   45eec:	d0a6ac17 	ldw	r2,-25936(gp)
   45ef0:	10ff962e 	bgeu	r2,r3,45d4c <_malloc_r+0x3fc>
   45ef4:	d0e6ac15 	stw	r3,-25936(gp)
   45ef8:	003f9406 	br	45d4c <_malloc_r+0x3fc>
   45efc:	00800104 	movi	r2,4
   45f00:	11001e36 	bltu	r2,r4,45f7c <_malloc_r+0x62c>
   45f04:	2804d1ba 	srli	r2,r5,6
   45f08:	11000e04 	addi	r4,r2,56
   45f0c:	200690fa 	slli	r3,r4,3
   45f10:	003fc506 	br	45e28 <_malloc_r+0x4d8>
   45f14:	00815504 	movi	r2,1364
   45f18:	10c01d2e 	bgeu	r2,r3,45f90 <_malloc_r+0x640>
   45f1c:	01801f84 	movi	r6,126
   45f20:	0080fc04 	movi	r2,1008
   45f24:	003eb706 	br	45a04 <_malloc_r+0xb4>
   45f28:	00800204 	movi	r2,8
   45f2c:	10cbc83a 	sub	r5,r2,r3
   45f30:	2169883a 	add	r20,r4,r5
   45f34:	003f9e06 	br	45db0 <_malloc_r+0x460>
   45f38:	00bffe04 	movi	r2,-8
   45f3c:	a93ffd04 	addi	r4,r21,-12
   45f40:	2088703a 	and	r4,r4,r2
   45f44:	b10b883a 	add	r5,r22,r4
   45f48:	00c00144 	movi	r3,5
   45f4c:	28c00215 	stw	r3,8(r5)
   45f50:	28c00115 	stw	r3,4(r5)
   45f54:	b0800117 	ldw	r2,4(r22)
   45f58:	1080004c 	andi	r2,r2,1
   45f5c:	2084b03a 	or	r2,r4,r2
   45f60:	b0800115 	stw	r2,4(r22)
   45f64:	313fdd2e 	bgeu	r6,r4,45edc <_malloc_r+0x58c>
   45f68:	b1400204 	addi	r5,r22,8
   45f6c:	9009883a 	mov	r4,r18
   45f70:	0044dc80 	call	44dc8 <_free_r>
   45f74:	e4000217 	ldw	r16,8(fp)
   45f78:	003fd806 	br	45edc <_malloc_r+0x58c>
   45f7c:	00800504 	movi	r2,20
   45f80:	11001536 	bltu	r2,r4,45fd8 <_malloc_r+0x688>
   45f84:	210016c4 	addi	r4,r4,91
   45f88:	200690fa 	slli	r3,r4,3
   45f8c:	003fa606 	br	45e28 <_malloc_r+0x4d8>
   45f90:	8804d4ba 	srli	r2,r17,18
   45f94:	11801f04 	addi	r6,r2,124
   45f98:	300490fa 	slli	r2,r6,3
   45f9c:	003e9906 	br	45a04 <_malloc_r+0xb4>
   45fa0:	2009d0ba 	srai	r4,r4,2
   45fa4:	01400174 	movhi	r5,5
   45fa8:	29770104 	addi	r5,r5,-9212
   45fac:	00c00044 	movi	r3,1
   45fb0:	28800117 	ldw	r2,4(r5)
   45fb4:	1906983a 	sll	r3,r3,r4
   45fb8:	10c4b03a 	or	r2,r2,r3
   45fbc:	28800115 	stw	r2,4(r5)
   45fc0:	003fa306 	br	45e50 <_malloc_r+0x500>
   45fc4:	0027883a 	mov	r19,zero
   45fc8:	00c00044 	movi	r3,1
   45fcc:	003f8606 	br	45de8 <_malloc_r+0x498>
   45fd0:	d1200515 	stw	r4,-32748(gp)
   45fd4:	003f7306 	br	45da4 <_malloc_r+0x454>
   45fd8:	00801504 	movi	r2,84
   45fdc:	11001936 	bltu	r2,r4,46044 <_malloc_r+0x6f4>
   45fe0:	2804d33a 	srli	r2,r5,12
   45fe4:	11001b84 	addi	r4,r2,110
   45fe8:	200690fa 	slli	r3,r4,3
   45fec:	003f8e06 	br	45e28 <_malloc_r+0x4d8>
   45ff0:	480b883a 	mov	r5,r9
   45ff4:	6807883a 	mov	r3,r13
   45ff8:	288000cc 	andi	r2,r5,3
   45ffc:	18fffe04 	addi	r3,r3,-8
   46000:	297fffc4 	addi	r5,r5,-1
   46004:	10001526 	beq	r2,zero,4605c <_malloc_r+0x70c>
   46008:	18800217 	ldw	r2,8(r3)
   4600c:	10fffa26 	beq	r2,r3,45ff8 <_malloc_r+0x6a8>
   46010:	2109883a 	add	r4,r4,r4
   46014:	393f1e36 	bltu	r7,r4,45c90 <_malloc_r+0x340>
   46018:	203f1d26 	beq	r4,zero,45c90 <_malloc_r+0x340>
   4601c:	21c4703a 	and	r2,r4,r7
   46020:	10000226 	beq	r2,zero,4602c <_malloc_r+0x6dc>
   46024:	6013883a 	mov	r9,r12
   46028:	003ee106 	br	45bb0 <_malloc_r+0x260>
   4602c:	2109883a 	add	r4,r4,r4
   46030:	3904703a 	and	r2,r7,r4
   46034:	63000104 	addi	r12,r12,4
   46038:	103ffc26 	beq	r2,zero,4602c <_malloc_r+0x6dc>
   4603c:	6013883a 	mov	r9,r12
   46040:	003edb06 	br	45bb0 <_malloc_r+0x260>
   46044:	00805504 	movi	r2,340
   46048:	11000836 	bltu	r2,r4,4606c <_malloc_r+0x71c>
   4604c:	2804d3fa 	srli	r2,r5,15
   46050:	11001dc4 	addi	r4,r2,119
   46054:	200690fa 	slli	r3,r4,3
   46058:	003f7306 	br	45e28 <_malloc_r+0x4d8>
   4605c:	0104303a 	nor	r2,zero,r4
   46060:	388e703a 	and	r7,r7,r2
   46064:	e1c00115 	stw	r7,4(fp)
   46068:	003fe906 	br	46010 <_malloc_r+0x6c0>
   4606c:	00815504 	movi	r2,1364
   46070:	1100032e 	bgeu	r2,r4,46080 <_malloc_r+0x730>
   46074:	01001f84 	movi	r4,126
   46078:	00c0fc04 	movi	r3,1008
   4607c:	003f6a06 	br	45e28 <_malloc_r+0x4d8>
   46080:	2804d4ba 	srli	r2,r5,18
   46084:	11001f04 	addi	r4,r2,124
   46088:	200690fa 	slli	r3,r4,3
   4608c:	003f6606 	br	45e28 <_malloc_r+0x4d8>

00046090 <memchr>:
   46090:	008000c4 	movi	r2,3
   46094:	29403fcc 	andi	r5,r5,255
   46098:	2007883a 	mov	r3,r4
   4609c:	1180022e 	bgeu	r2,r6,460a8 <memchr+0x18>
   460a0:	2084703a 	and	r2,r4,r2
   460a4:	10000b26 	beq	r2,zero,460d4 <memchr+0x44>
   460a8:	313fffc4 	addi	r4,r6,-1
   460ac:	3000051e 	bne	r6,zero,460c4 <memchr+0x34>
   460b0:	00002c06 	br	46164 <memchr+0xd4>
   460b4:	213fffc4 	addi	r4,r4,-1
   460b8:	00bfffc4 	movi	r2,-1
   460bc:	18c00044 	addi	r3,r3,1
   460c0:	20802826 	beq	r4,r2,46164 <memchr+0xd4>
   460c4:	18800003 	ldbu	r2,0(r3)
   460c8:	28bffa1e 	bne	r5,r2,460b4 <memchr+0x24>
   460cc:	1805883a 	mov	r2,r3
   460d0:	f800283a 	ret
   460d4:	0011883a 	mov	r8,zero
   460d8:	0007883a 	mov	r3,zero
   460dc:	01c00104 	movi	r7,4
   460e0:	4004923a 	slli	r2,r8,8
   460e4:	18c00044 	addi	r3,r3,1
   460e8:	1151883a 	add	r8,r2,r5
   460ec:	19fffc1e 	bne	r3,r7,460e0 <memchr+0x50>
   460f0:	02bfbff4 	movhi	r10,65279
   460f4:	52bfbfc4 	addi	r10,r10,-257
   460f8:	02602074 	movhi	r9,32897
   460fc:	4a602004 	addi	r9,r9,-32640
   46100:	02c000c4 	movi	r11,3
   46104:	20800017 	ldw	r2,0(r4)
   46108:	31bfff04 	addi	r6,r6,-4
   4610c:	200f883a 	mov	r7,r4
   46110:	1204f03a 	xor	r2,r2,r8
   46114:	1287883a 	add	r3,r2,r10
   46118:	1a46703a 	and	r3,r3,r9
   4611c:	0084303a 	nor	r2,zero,r2
   46120:	10c4703a 	and	r2,r2,r3
   46124:	10000b26 	beq	r2,zero,46154 <memchr+0xc4>
   46128:	20800003 	ldbu	r2,0(r4)
   4612c:	28800f26 	beq	r5,r2,4616c <memchr+0xdc>
   46130:	20800043 	ldbu	r2,1(r4)
   46134:	21c00044 	addi	r7,r4,1
   46138:	28800c26 	beq	r5,r2,4616c <memchr+0xdc>
   4613c:	20800083 	ldbu	r2,2(r4)
   46140:	21c00084 	addi	r7,r4,2
   46144:	28800926 	beq	r5,r2,4616c <memchr+0xdc>
   46148:	208000c3 	ldbu	r2,3(r4)
   4614c:	21c000c4 	addi	r7,r4,3
   46150:	28800626 	beq	r5,r2,4616c <memchr+0xdc>
   46154:	21000104 	addi	r4,r4,4
   46158:	59bfea36 	bltu	r11,r6,46104 <memchr+0x74>
   4615c:	2007883a 	mov	r3,r4
   46160:	003fd106 	br	460a8 <memchr+0x18>
   46164:	0005883a 	mov	r2,zero
   46168:	f800283a 	ret
   4616c:	3805883a 	mov	r2,r7
   46170:	f800283a 	ret

00046174 <memcpy>:
   46174:	01c003c4 	movi	r7,15
   46178:	2007883a 	mov	r3,r4
   4617c:	3980032e 	bgeu	r7,r6,4618c <memcpy+0x18>
   46180:	2904b03a 	or	r2,r5,r4
   46184:	108000cc 	andi	r2,r2,3
   46188:	10000926 	beq	r2,zero,461b0 <memcpy+0x3c>
   4618c:	30000626 	beq	r6,zero,461a8 <memcpy+0x34>
   46190:	30cd883a 	add	r6,r6,r3
   46194:	28800003 	ldbu	r2,0(r5)
   46198:	29400044 	addi	r5,r5,1
   4619c:	18800005 	stb	r2,0(r3)
   461a0:	18c00044 	addi	r3,r3,1
   461a4:	30fffb1e 	bne	r6,r3,46194 <memcpy+0x20>
   461a8:	2005883a 	mov	r2,r4
   461ac:	f800283a 	ret
   461b0:	3811883a 	mov	r8,r7
   461b4:	200f883a 	mov	r7,r4
   461b8:	28c00017 	ldw	r3,0(r5)
   461bc:	31bffc04 	addi	r6,r6,-16
   461c0:	38c00015 	stw	r3,0(r7)
   461c4:	28800117 	ldw	r2,4(r5)
   461c8:	38800115 	stw	r2,4(r7)
   461cc:	28c00217 	ldw	r3,8(r5)
   461d0:	38c00215 	stw	r3,8(r7)
   461d4:	28800317 	ldw	r2,12(r5)
   461d8:	29400404 	addi	r5,r5,16
   461dc:	38800315 	stw	r2,12(r7)
   461e0:	39c00404 	addi	r7,r7,16
   461e4:	41bff436 	bltu	r8,r6,461b8 <memcpy+0x44>
   461e8:	008000c4 	movi	r2,3
   461ec:	1180072e 	bgeu	r2,r6,4620c <memcpy+0x98>
   461f0:	1007883a 	mov	r3,r2
   461f4:	28800017 	ldw	r2,0(r5)
   461f8:	31bfff04 	addi	r6,r6,-4
   461fc:	29400104 	addi	r5,r5,4
   46200:	38800015 	stw	r2,0(r7)
   46204:	39c00104 	addi	r7,r7,4
   46208:	19bffa36 	bltu	r3,r6,461f4 <memcpy+0x80>
   4620c:	3807883a 	mov	r3,r7
   46210:	003fde06 	br	4618c <memcpy+0x18>

00046214 <memmove>:
   46214:	2807883a 	mov	r3,r5
   46218:	2011883a 	mov	r8,r4
   4621c:	29000c2e 	bgeu	r5,r4,46250 <memmove+0x3c>
   46220:	298f883a 	add	r7,r5,r6
   46224:	21c00a2e 	bgeu	r4,r7,46250 <memmove+0x3c>
   46228:	30000726 	beq	r6,zero,46248 <memmove+0x34>
   4622c:	2187883a 	add	r3,r4,r6
   46230:	198dc83a 	sub	r6,r3,r6
   46234:	39ffffc4 	addi	r7,r7,-1
   46238:	38800003 	ldbu	r2,0(r7)
   4623c:	18ffffc4 	addi	r3,r3,-1
   46240:	18800005 	stb	r2,0(r3)
   46244:	19bffb1e 	bne	r3,r6,46234 <memmove+0x20>
   46248:	2005883a 	mov	r2,r4
   4624c:	f800283a 	ret
   46250:	01c003c4 	movi	r7,15
   46254:	39800a36 	bltu	r7,r6,46280 <memmove+0x6c>
   46258:	303ffb26 	beq	r6,zero,46248 <memmove+0x34>
   4625c:	400f883a 	mov	r7,r8
   46260:	320d883a 	add	r6,r6,r8
   46264:	28800003 	ldbu	r2,0(r5)
   46268:	29400044 	addi	r5,r5,1
   4626c:	38800005 	stb	r2,0(r7)
   46270:	39c00044 	addi	r7,r7,1
   46274:	39bffb1e 	bne	r7,r6,46264 <memmove+0x50>
   46278:	2005883a 	mov	r2,r4
   4627c:	f800283a 	ret
   46280:	1904b03a 	or	r2,r3,r4
   46284:	108000cc 	andi	r2,r2,3
   46288:	103ff31e 	bne	r2,zero,46258 <memmove+0x44>
   4628c:	3811883a 	mov	r8,r7
   46290:	180b883a 	mov	r5,r3
   46294:	200f883a 	mov	r7,r4
   46298:	28c00017 	ldw	r3,0(r5)
   4629c:	31bffc04 	addi	r6,r6,-16
   462a0:	38c00015 	stw	r3,0(r7)
   462a4:	28800117 	ldw	r2,4(r5)
   462a8:	38800115 	stw	r2,4(r7)
   462ac:	28c00217 	ldw	r3,8(r5)
   462b0:	38c00215 	stw	r3,8(r7)
   462b4:	28800317 	ldw	r2,12(r5)
   462b8:	29400404 	addi	r5,r5,16
   462bc:	38800315 	stw	r2,12(r7)
   462c0:	39c00404 	addi	r7,r7,16
   462c4:	41bff436 	bltu	r8,r6,46298 <memmove+0x84>
   462c8:	008000c4 	movi	r2,3
   462cc:	1180072e 	bgeu	r2,r6,462ec <memmove+0xd8>
   462d0:	1007883a 	mov	r3,r2
   462d4:	28800017 	ldw	r2,0(r5)
   462d8:	31bfff04 	addi	r6,r6,-4
   462dc:	29400104 	addi	r5,r5,4
   462e0:	38800015 	stw	r2,0(r7)
   462e4:	39c00104 	addi	r7,r7,4
   462e8:	19bffa36 	bltu	r3,r6,462d4 <memmove+0xc0>
   462ec:	3811883a 	mov	r8,r7
   462f0:	003fd906 	br	46258 <memmove+0x44>

000462f4 <memset>:
   462f4:	008000c4 	movi	r2,3
   462f8:	29403fcc 	andi	r5,r5,255
   462fc:	2007883a 	mov	r3,r4
   46300:	1180022e 	bgeu	r2,r6,4630c <memset+0x18>
   46304:	2084703a 	and	r2,r4,r2
   46308:	10000826 	beq	r2,zero,4632c <memset+0x38>
   4630c:	30000526 	beq	r6,zero,46324 <memset+0x30>
   46310:	2805883a 	mov	r2,r5
   46314:	30cd883a 	add	r6,r6,r3
   46318:	18800005 	stb	r2,0(r3)
   4631c:	18c00044 	addi	r3,r3,1
   46320:	19bffd1e 	bne	r3,r6,46318 <memset+0x24>
   46324:	2005883a 	mov	r2,r4
   46328:	f800283a 	ret
   4632c:	2804923a 	slli	r2,r5,8
   46330:	020003c4 	movi	r8,15
   46334:	200f883a 	mov	r7,r4
   46338:	2884b03a 	or	r2,r5,r2
   4633c:	1006943a 	slli	r3,r2,16
   46340:	10c6b03a 	or	r3,r2,r3
   46344:	41800a2e 	bgeu	r8,r6,46370 <memset+0x7c>
   46348:	4005883a 	mov	r2,r8
   4634c:	31bffc04 	addi	r6,r6,-16
   46350:	38c00015 	stw	r3,0(r7)
   46354:	38c00115 	stw	r3,4(r7)
   46358:	38c00215 	stw	r3,8(r7)
   4635c:	38c00315 	stw	r3,12(r7)
   46360:	39c00404 	addi	r7,r7,16
   46364:	11bff936 	bltu	r2,r6,4634c <memset+0x58>
   46368:	008000c4 	movi	r2,3
   4636c:	1180052e 	bgeu	r2,r6,46384 <memset+0x90>
   46370:	31bfff04 	addi	r6,r6,-4
   46374:	008000c4 	movi	r2,3
   46378:	38c00015 	stw	r3,0(r7)
   4637c:	39c00104 	addi	r7,r7,4
   46380:	11bffb36 	bltu	r2,r6,46370 <memset+0x7c>
   46384:	3807883a 	mov	r3,r7
   46388:	003fe006 	br	4630c <memset+0x18>

0004638c <_Bfree>:
   4638c:	28000826 	beq	r5,zero,463b0 <_Bfree+0x24>
   46390:	28800117 	ldw	r2,4(r5)
   46394:	21001317 	ldw	r4,76(r4)
   46398:	1085883a 	add	r2,r2,r2
   4639c:	1085883a 	add	r2,r2,r2
   463a0:	1105883a 	add	r2,r2,r4
   463a4:	10c00017 	ldw	r3,0(r2)
   463a8:	28c00015 	stw	r3,0(r5)
   463ac:	11400015 	stw	r5,0(r2)
   463b0:	f800283a 	ret

000463b4 <__hi0bits>:
   463b4:	20bfffec 	andhi	r2,r4,65535
   463b8:	10001426 	beq	r2,zero,4640c <__hi0bits+0x58>
   463bc:	0007883a 	mov	r3,zero
   463c0:	20bfc02c 	andhi	r2,r4,65280
   463c4:	1000021e 	bne	r2,zero,463d0 <__hi0bits+0x1c>
   463c8:	2008923a 	slli	r4,r4,8
   463cc:	18c00204 	addi	r3,r3,8
   463d0:	20bc002c 	andhi	r2,r4,61440
   463d4:	1000021e 	bne	r2,zero,463e0 <__hi0bits+0x2c>
   463d8:	2008913a 	slli	r4,r4,4
   463dc:	18c00104 	addi	r3,r3,4
   463e0:	20b0002c 	andhi	r2,r4,49152
   463e4:	1000031e 	bne	r2,zero,463f4 <__hi0bits+0x40>
   463e8:	2105883a 	add	r2,r4,r4
   463ec:	18c00084 	addi	r3,r3,2
   463f0:	1089883a 	add	r4,r2,r2
   463f4:	20000316 	blt	r4,zero,46404 <__hi0bits+0x50>
   463f8:	2090002c 	andhi	r2,r4,16384
   463fc:	10000626 	beq	r2,zero,46418 <__hi0bits+0x64>
   46400:	18c00044 	addi	r3,r3,1
   46404:	1805883a 	mov	r2,r3
   46408:	f800283a 	ret
   4640c:	2008943a 	slli	r4,r4,16
   46410:	00c00404 	movi	r3,16
   46414:	003fea06 	br	463c0 <__hi0bits+0xc>
   46418:	00c00804 	movi	r3,32
   4641c:	1805883a 	mov	r2,r3
   46420:	f800283a 	ret

00046424 <__lo0bits>:
   46424:	20c00017 	ldw	r3,0(r4)
   46428:	188001cc 	andi	r2,r3,7
   4642c:	10000a26 	beq	r2,zero,46458 <__lo0bits+0x34>
   46430:	1880004c 	andi	r2,r3,1
   46434:	1005003a 	cmpeq	r2,r2,zero
   46438:	10002126 	beq	r2,zero,464c0 <__lo0bits+0x9c>
   4643c:	1880008c 	andi	r2,r3,2
   46440:	1000251e 	bne	r2,zero,464d8 <__lo0bits+0xb4>
   46444:	1804d0ba 	srli	r2,r3,2
   46448:	01400084 	movi	r5,2
   4644c:	20800015 	stw	r2,0(r4)
   46450:	2805883a 	mov	r2,r5
   46454:	f800283a 	ret
   46458:	18bfffcc 	andi	r2,r3,65535
   4645c:	10001526 	beq	r2,zero,464b4 <__lo0bits+0x90>
   46460:	000b883a 	mov	r5,zero
   46464:	18803fcc 	andi	r2,r3,255
   46468:	1000021e 	bne	r2,zero,46474 <__lo0bits+0x50>
   4646c:	1806d23a 	srli	r3,r3,8
   46470:	29400204 	addi	r5,r5,8
   46474:	188003cc 	andi	r2,r3,15
   46478:	1000021e 	bne	r2,zero,46484 <__lo0bits+0x60>
   4647c:	1806d13a 	srli	r3,r3,4
   46480:	29400104 	addi	r5,r5,4
   46484:	188000cc 	andi	r2,r3,3
   46488:	1000021e 	bne	r2,zero,46494 <__lo0bits+0x70>
   4648c:	1806d0ba 	srli	r3,r3,2
   46490:	29400084 	addi	r5,r5,2
   46494:	1880004c 	andi	r2,r3,1
   46498:	1000031e 	bne	r2,zero,464a8 <__lo0bits+0x84>
   4649c:	1806d07a 	srli	r3,r3,1
   464a0:	18000a26 	beq	r3,zero,464cc <__lo0bits+0xa8>
   464a4:	29400044 	addi	r5,r5,1
   464a8:	2805883a 	mov	r2,r5
   464ac:	20c00015 	stw	r3,0(r4)
   464b0:	f800283a 	ret
   464b4:	1806d43a 	srli	r3,r3,16
   464b8:	01400404 	movi	r5,16
   464bc:	003fe906 	br	46464 <__lo0bits+0x40>
   464c0:	000b883a 	mov	r5,zero
   464c4:	2805883a 	mov	r2,r5
   464c8:	f800283a 	ret
   464cc:	01400804 	movi	r5,32
   464d0:	2805883a 	mov	r2,r5
   464d4:	f800283a 	ret
   464d8:	1804d07a 	srli	r2,r3,1
   464dc:	01400044 	movi	r5,1
   464e0:	20800015 	stw	r2,0(r4)
   464e4:	003fda06 	br	46450 <__lo0bits+0x2c>

000464e8 <__mcmp>:
   464e8:	20800417 	ldw	r2,16(r4)
   464ec:	28c00417 	ldw	r3,16(r5)
   464f0:	10cfc83a 	sub	r7,r2,r3
   464f4:	38000c1e 	bne	r7,zero,46528 <__mcmp+0x40>
   464f8:	18c5883a 	add	r2,r3,r3
   464fc:	1085883a 	add	r2,r2,r2
   46500:	10c00504 	addi	r3,r2,20
   46504:	21000504 	addi	r4,r4,20
   46508:	28cb883a 	add	r5,r5,r3
   4650c:	2085883a 	add	r2,r4,r2
   46510:	10bfff04 	addi	r2,r2,-4
   46514:	297fff04 	addi	r5,r5,-4
   46518:	11800017 	ldw	r6,0(r2)
   4651c:	28c00017 	ldw	r3,0(r5)
   46520:	30c0031e 	bne	r6,r3,46530 <__mcmp+0x48>
   46524:	20bffa36 	bltu	r4,r2,46510 <__mcmp+0x28>
   46528:	3805883a 	mov	r2,r7
   4652c:	f800283a 	ret
   46530:	30c00336 	bltu	r6,r3,46540 <__mcmp+0x58>
   46534:	01c00044 	movi	r7,1
   46538:	3805883a 	mov	r2,r7
   4653c:	f800283a 	ret
   46540:	01ffffc4 	movi	r7,-1
   46544:	003ff806 	br	46528 <__mcmp+0x40>

00046548 <__ulp>:
   46548:	295ffc2c 	andhi	r5,r5,32752
   4654c:	013f3034 	movhi	r4,64704
   46550:	290b883a 	add	r5,r5,r4
   46554:	0145c83a 	sub	r2,zero,r5
   46558:	1007d53a 	srai	r3,r2,20
   4655c:	000d883a 	mov	r6,zero
   46560:	0140040e 	bge	zero,r5,46574 <__ulp+0x2c>
   46564:	280f883a 	mov	r7,r5
   46568:	3807883a 	mov	r3,r7
   4656c:	3005883a 	mov	r2,r6
   46570:	f800283a 	ret
   46574:	008004c4 	movi	r2,19
   46578:	193ffb04 	addi	r4,r3,-20
   4657c:	10c00c0e 	bge	r2,r3,465b0 <__ulp+0x68>
   46580:	008007c4 	movi	r2,31
   46584:	1107c83a 	sub	r3,r2,r4
   46588:	00800784 	movi	r2,30
   4658c:	01400044 	movi	r5,1
   46590:	11000216 	blt	r2,r4,4659c <__ulp+0x54>
   46594:	00800044 	movi	r2,1
   46598:	10ca983a 	sll	r5,r2,r3
   4659c:	000f883a 	mov	r7,zero
   465a0:	280d883a 	mov	r6,r5
   465a4:	3807883a 	mov	r3,r7
   465a8:	3005883a 	mov	r2,r6
   465ac:	f800283a 	ret
   465b0:	00800234 	movhi	r2,8
   465b4:	10cfd83a 	sra	r7,r2,r3
   465b8:	000d883a 	mov	r6,zero
   465bc:	3005883a 	mov	r2,r6
   465c0:	3807883a 	mov	r3,r7
   465c4:	f800283a 	ret

000465c8 <__b2d>:
   465c8:	20800417 	ldw	r2,16(r4)
   465cc:	defff904 	addi	sp,sp,-28
   465d0:	dd000415 	stw	r20,16(sp)
   465d4:	1085883a 	add	r2,r2,r2
   465d8:	25000504 	addi	r20,r4,20
   465dc:	1085883a 	add	r2,r2,r2
   465e0:	dc000015 	stw	r16,0(sp)
   465e4:	a0a1883a 	add	r16,r20,r2
   465e8:	dd400515 	stw	r21,20(sp)
   465ec:	857fff17 	ldw	r21,-4(r16)
   465f0:	dc400115 	stw	r17,4(sp)
   465f4:	dfc00615 	stw	ra,24(sp)
   465f8:	a809883a 	mov	r4,r21
   465fc:	2823883a 	mov	r17,r5
   46600:	dcc00315 	stw	r19,12(sp)
   46604:	dc800215 	stw	r18,8(sp)
   46608:	00463b40 	call	463b4 <__hi0bits>
   4660c:	100b883a 	mov	r5,r2
   46610:	00800804 	movi	r2,32
   46614:	1145c83a 	sub	r2,r2,r5
   46618:	88800015 	stw	r2,0(r17)
   4661c:	00800284 	movi	r2,10
   46620:	80ffff04 	addi	r3,r16,-4
   46624:	11401416 	blt	r2,r5,46678 <__b2d+0xb0>
   46628:	008002c4 	movi	r2,11
   4662c:	1149c83a 	sub	r4,r2,r5
   46630:	a0c02736 	bltu	r20,r3,466d0 <__b2d+0x108>
   46634:	000d883a 	mov	r6,zero
   46638:	28800544 	addi	r2,r5,21
   4663c:	a906d83a 	srl	r3,r21,r4
   46640:	a884983a 	sll	r2,r21,r2
   46644:	1ccffc34 	orhi	r19,r3,16368
   46648:	11a4b03a 	or	r18,r2,r6
   4664c:	9005883a 	mov	r2,r18
   46650:	9807883a 	mov	r3,r19
   46654:	dfc00617 	ldw	ra,24(sp)
   46658:	dd400517 	ldw	r21,20(sp)
   4665c:	dd000417 	ldw	r20,16(sp)
   46660:	dcc00317 	ldw	r19,12(sp)
   46664:	dc800217 	ldw	r18,8(sp)
   46668:	dc400117 	ldw	r17,4(sp)
   4666c:	dc000017 	ldw	r16,0(sp)
   46670:	dec00704 	addi	sp,sp,28
   46674:	f800283a 	ret
   46678:	a0c00e36 	bltu	r20,r3,466b4 <__b2d+0xec>
   4667c:	293ffd44 	addi	r4,r5,-11
   46680:	000d883a 	mov	r6,zero
   46684:	20000f26 	beq	r4,zero,466c4 <__b2d+0xfc>
   46688:	00800804 	movi	r2,32
   4668c:	110bc83a 	sub	r5,r2,r4
   46690:	a0c01236 	bltu	r20,r3,466dc <__b2d+0x114>
   46694:	000f883a 	mov	r7,zero
   46698:	a904983a 	sll	r2,r21,r4
   4669c:	3146d83a 	srl	r3,r6,r5
   466a0:	3108983a 	sll	r4,r6,r4
   466a4:	108ffc34 	orhi	r2,r2,16368
   466a8:	18a6b03a 	or	r19,r3,r2
   466ac:	3924b03a 	or	r18,r7,r4
   466b0:	003fe606 	br	4664c <__b2d+0x84>
   466b4:	293ffd44 	addi	r4,r5,-11
   466b8:	81bffe17 	ldw	r6,-8(r16)
   466bc:	80fffe04 	addi	r3,r16,-8
   466c0:	203ff11e 	bne	r4,zero,46688 <__b2d+0xc0>
   466c4:	accffc34 	orhi	r19,r21,16368
   466c8:	3025883a 	mov	r18,r6
   466cc:	003fdf06 	br	4664c <__b2d+0x84>
   466d0:	18bfff17 	ldw	r2,-4(r3)
   466d4:	110cd83a 	srl	r6,r2,r4
   466d8:	003fd706 	br	46638 <__b2d+0x70>
   466dc:	18bfff17 	ldw	r2,-4(r3)
   466e0:	114ed83a 	srl	r7,r2,r5
   466e4:	003fec06 	br	46698 <__b2d+0xd0>

000466e8 <__ratio>:
   466e8:	defff904 	addi	sp,sp,-28
   466ec:	dc400215 	stw	r17,8(sp)
   466f0:	2823883a 	mov	r17,r5
   466f4:	d80b883a 	mov	r5,sp
   466f8:	dfc00615 	stw	ra,24(sp)
   466fc:	dd000515 	stw	r20,20(sp)
   46700:	dcc00415 	stw	r19,16(sp)
   46704:	dc800315 	stw	r18,12(sp)
   46708:	2025883a 	mov	r18,r4
   4670c:	00465c80 	call	465c8 <__b2d>
   46710:	8809883a 	mov	r4,r17
   46714:	d9400104 	addi	r5,sp,4
   46718:	1027883a 	mov	r19,r2
   4671c:	1829883a 	mov	r20,r3
   46720:	00465c80 	call	465c8 <__b2d>
   46724:	89000417 	ldw	r4,16(r17)
   46728:	91c00417 	ldw	r7,16(r18)
   4672c:	d9800117 	ldw	r6,4(sp)
   46730:	180b883a 	mov	r5,r3
   46734:	390fc83a 	sub	r7,r7,r4
   46738:	1009883a 	mov	r4,r2
   4673c:	d8800017 	ldw	r2,0(sp)
   46740:	380e917a 	slli	r7,r7,5
   46744:	2011883a 	mov	r8,r4
   46748:	1185c83a 	sub	r2,r2,r6
   4674c:	11c5883a 	add	r2,r2,r7
   46750:	1006953a 	slli	r3,r2,20
   46754:	2813883a 	mov	r9,r5
   46758:	00800d0e 	bge	zero,r2,46790 <__ratio+0xa8>
   4675c:	1d29883a 	add	r20,r3,r20
   46760:	a00b883a 	mov	r5,r20
   46764:	480f883a 	mov	r7,r9
   46768:	9809883a 	mov	r4,r19
   4676c:	400d883a 	mov	r6,r8
   46770:	00497300 	call	49730 <__divdf3>
   46774:	dfc00617 	ldw	ra,24(sp)
   46778:	dd000517 	ldw	r20,20(sp)
   4677c:	dcc00417 	ldw	r19,16(sp)
   46780:	dc800317 	ldw	r18,12(sp)
   46784:	dc400217 	ldw	r17,8(sp)
   46788:	dec00704 	addi	sp,sp,28
   4678c:	f800283a 	ret
   46790:	28d3c83a 	sub	r9,r5,r3
   46794:	003ff206 	br	46760 <__ratio+0x78>

00046798 <_mprec_log10>:
   46798:	defffe04 	addi	sp,sp,-8
   4679c:	008005c4 	movi	r2,23
   467a0:	dc000015 	stw	r16,0(sp)
   467a4:	dfc00115 	stw	ra,4(sp)
   467a8:	2021883a 	mov	r16,r4
   467ac:	11000c16 	blt	r2,r4,467e0 <_mprec_log10+0x48>
   467b0:	200490fa 	slli	r2,r4,3
   467b4:	00c00174 	movhi	r3,5
   467b8:	18f56304 	addi	r3,r3,-10868
   467bc:	10c5883a 	add	r2,r2,r3
   467c0:	12400117 	ldw	r9,4(r2)
   467c4:	12000017 	ldw	r8,0(r2)
   467c8:	4807883a 	mov	r3,r9
   467cc:	4005883a 	mov	r2,r8
   467d0:	dfc00117 	ldw	ra,4(sp)
   467d4:	dc000017 	ldw	r16,0(sp)
   467d8:	dec00204 	addi	sp,sp,8
   467dc:	f800283a 	ret
   467e0:	0011883a 	mov	r8,zero
   467e4:	024ffc34 	movhi	r9,16368
   467e8:	0005883a 	mov	r2,zero
   467ec:	00d00934 	movhi	r3,16420
   467f0:	480b883a 	mov	r5,r9
   467f4:	4009883a 	mov	r4,r8
   467f8:	180f883a 	mov	r7,r3
   467fc:	100d883a 	mov	r6,r2
   46800:	004936c0 	call	4936c <__muldf3>
   46804:	843fffc4 	addi	r16,r16,-1
   46808:	1011883a 	mov	r8,r2
   4680c:	1813883a 	mov	r9,r3
   46810:	803ff51e 	bne	r16,zero,467e8 <_mprec_log10+0x50>
   46814:	4005883a 	mov	r2,r8
   46818:	4807883a 	mov	r3,r9
   4681c:	dfc00117 	ldw	ra,4(sp)
   46820:	dc000017 	ldw	r16,0(sp)
   46824:	dec00204 	addi	sp,sp,8
   46828:	f800283a 	ret

0004682c <__copybits>:
   4682c:	297fffc4 	addi	r5,r5,-1
   46830:	30800417 	ldw	r2,16(r6)
   46834:	280bd17a 	srai	r5,r5,5
   46838:	31800504 	addi	r6,r6,20
   4683c:	1085883a 	add	r2,r2,r2
   46840:	294b883a 	add	r5,r5,r5
   46844:	294b883a 	add	r5,r5,r5
   46848:	1085883a 	add	r2,r2,r2
   4684c:	290b883a 	add	r5,r5,r4
   46850:	3087883a 	add	r3,r6,r2
   46854:	29400104 	addi	r5,r5,4
   46858:	30c0052e 	bgeu	r6,r3,46870 <__copybits+0x44>
   4685c:	30800017 	ldw	r2,0(r6)
   46860:	31800104 	addi	r6,r6,4
   46864:	20800015 	stw	r2,0(r4)
   46868:	21000104 	addi	r4,r4,4
   4686c:	30fffb36 	bltu	r6,r3,4685c <__copybits+0x30>
   46870:	2140032e 	bgeu	r4,r5,46880 <__copybits+0x54>
   46874:	20000015 	stw	zero,0(r4)
   46878:	21000104 	addi	r4,r4,4
   4687c:	217ffd36 	bltu	r4,r5,46874 <__copybits+0x48>
   46880:	f800283a 	ret

00046884 <__any_on>:
   46884:	20800417 	ldw	r2,16(r4)
   46888:	2807d17a 	srai	r3,r5,5
   4688c:	21000504 	addi	r4,r4,20
   46890:	10c00d0e 	bge	r2,r3,468c8 <__any_on+0x44>
   46894:	1085883a 	add	r2,r2,r2
   46898:	1085883a 	add	r2,r2,r2
   4689c:	208d883a 	add	r6,r4,r2
   468a0:	2180182e 	bgeu	r4,r6,46904 <__any_on+0x80>
   468a4:	30bfff17 	ldw	r2,-4(r6)
   468a8:	30ffff04 	addi	r3,r6,-4
   468ac:	1000041e 	bne	r2,zero,468c0 <__any_on+0x3c>
   468b0:	20c0142e 	bgeu	r4,r3,46904 <__any_on+0x80>
   468b4:	18ffff04 	addi	r3,r3,-4
   468b8:	18800017 	ldw	r2,0(r3)
   468bc:	103ffc26 	beq	r2,zero,468b0 <__any_on+0x2c>
   468c0:	00800044 	movi	r2,1
   468c4:	f800283a 	ret
   468c8:	18800a0e 	bge	r3,r2,468f4 <__any_on+0x70>
   468cc:	294007cc 	andi	r5,r5,31
   468d0:	28000826 	beq	r5,zero,468f4 <__any_on+0x70>
   468d4:	18c5883a 	add	r2,r3,r3
   468d8:	1085883a 	add	r2,r2,r2
   468dc:	208d883a 	add	r6,r4,r2
   468e0:	30c00017 	ldw	r3,0(r6)
   468e4:	1944d83a 	srl	r2,r3,r5
   468e8:	1144983a 	sll	r2,r2,r5
   468ec:	18bff41e 	bne	r3,r2,468c0 <__any_on+0x3c>
   468f0:	003feb06 	br	468a0 <__any_on+0x1c>
   468f4:	18c5883a 	add	r2,r3,r3
   468f8:	1085883a 	add	r2,r2,r2
   468fc:	208d883a 	add	r6,r4,r2
   46900:	003fe706 	br	468a0 <__any_on+0x1c>
   46904:	0005883a 	mov	r2,zero
   46908:	f800283a 	ret

0004690c <_Balloc>:
   4690c:	20c01317 	ldw	r3,76(r4)
   46910:	defffb04 	addi	sp,sp,-20
   46914:	dcc00315 	stw	r19,12(sp)
   46918:	dc800215 	stw	r18,8(sp)
   4691c:	dfc00415 	stw	ra,16(sp)
   46920:	2825883a 	mov	r18,r5
   46924:	dc400115 	stw	r17,4(sp)
   46928:	dc000015 	stw	r16,0(sp)
   4692c:	2027883a 	mov	r19,r4
   46930:	01800404 	movi	r6,16
   46934:	01400104 	movi	r5,4
   46938:	18001726 	beq	r3,zero,46998 <_Balloc+0x8c>
   4693c:	01400044 	movi	r5,1
   46940:	9485883a 	add	r2,r18,r18
   46944:	2ca2983a 	sll	r17,r5,r18
   46948:	1085883a 	add	r2,r2,r2
   4694c:	10c7883a 	add	r3,r2,r3
   46950:	1c000017 	ldw	r16,0(r3)
   46954:	8c4d883a 	add	r6,r17,r17
   46958:	318d883a 	add	r6,r6,r6
   4695c:	9809883a 	mov	r4,r19
   46960:	31800504 	addi	r6,r6,20
   46964:	80001226 	beq	r16,zero,469b0 <_Balloc+0xa4>
   46968:	80800017 	ldw	r2,0(r16)
   4696c:	18800015 	stw	r2,0(r3)
   46970:	80000415 	stw	zero,16(r16)
   46974:	80000315 	stw	zero,12(r16)
   46978:	8005883a 	mov	r2,r16
   4697c:	dfc00417 	ldw	ra,16(sp)
   46980:	dcc00317 	ldw	r19,12(sp)
   46984:	dc800217 	ldw	r18,8(sp)
   46988:	dc400117 	ldw	r17,4(sp)
   4698c:	dc000017 	ldw	r16,0(sp)
   46990:	dec00504 	addi	sp,sp,20
   46994:	f800283a 	ret
   46998:	0047d6c0 	call	47d6c <_calloc_r>
   4699c:	1007883a 	mov	r3,r2
   469a0:	0021883a 	mov	r16,zero
   469a4:	98801315 	stw	r2,76(r19)
   469a8:	103fe41e 	bne	r2,zero,4693c <_Balloc+0x30>
   469ac:	003ff206 	br	46978 <_Balloc+0x6c>
   469b0:	0047d6c0 	call	47d6c <_calloc_r>
   469b4:	103ff026 	beq	r2,zero,46978 <_Balloc+0x6c>
   469b8:	1021883a 	mov	r16,r2
   469bc:	14800115 	stw	r18,4(r2)
   469c0:	14400215 	stw	r17,8(r2)
   469c4:	003fea06 	br	46970 <_Balloc+0x64>

000469c8 <__d2b>:
   469c8:	defff504 	addi	sp,sp,-44
   469cc:	dcc00515 	stw	r19,20(sp)
   469d0:	04c00044 	movi	r19,1
   469d4:	dc000215 	stw	r16,8(sp)
   469d8:	2821883a 	mov	r16,r5
   469dc:	980b883a 	mov	r5,r19
   469e0:	ddc00915 	stw	r23,36(sp)
   469e4:	dd800815 	stw	r22,32(sp)
   469e8:	dd400715 	stw	r21,28(sp)
   469ec:	dd000615 	stw	r20,24(sp)
   469f0:	dc800415 	stw	r18,16(sp)
   469f4:	dc400315 	stw	r17,12(sp)
   469f8:	dfc00a15 	stw	ra,40(sp)
   469fc:	3023883a 	mov	r17,r6
   46a00:	382d883a 	mov	r22,r7
   46a04:	ddc00b17 	ldw	r23,44(sp)
   46a08:	004690c0 	call	4690c <_Balloc>
   46a0c:	1025883a 	mov	r18,r2
   46a10:	00a00034 	movhi	r2,32768
   46a14:	10bfffc4 	addi	r2,r2,-1
   46a18:	8888703a 	and	r4,r17,r2
   46a1c:	202ad53a 	srli	r21,r4,20
   46a20:	00800434 	movhi	r2,16
   46a24:	10bfffc4 	addi	r2,r2,-1
   46a28:	8886703a 	and	r3,r17,r2
   46a2c:	a829003a 	cmpeq	r20,r21,zero
   46a30:	800b883a 	mov	r5,r16
   46a34:	d8c00115 	stw	r3,4(sp)
   46a38:	94000504 	addi	r16,r18,20
   46a3c:	a000021e 	bne	r20,zero,46a48 <__d2b+0x80>
   46a40:	18c00434 	orhi	r3,r3,16
   46a44:	d8c00115 	stw	r3,4(sp)
   46a48:	28002726 	beq	r5,zero,46ae8 <__d2b+0x120>
   46a4c:	d809883a 	mov	r4,sp
   46a50:	d9400015 	stw	r5,0(sp)
   46a54:	00464240 	call	46424 <__lo0bits>
   46a58:	100d883a 	mov	r6,r2
   46a5c:	10003526 	beq	r2,zero,46b34 <__d2b+0x16c>
   46a60:	d8c00117 	ldw	r3,4(sp)
   46a64:	00800804 	movi	r2,32
   46a68:	1185c83a 	sub	r2,r2,r6
   46a6c:	d9000017 	ldw	r4,0(sp)
   46a70:	1886983a 	sll	r3,r3,r2
   46a74:	1906b03a 	or	r3,r3,r4
   46a78:	90c00515 	stw	r3,20(r18)
   46a7c:	d8c00117 	ldw	r3,4(sp)
   46a80:	1986d83a 	srl	r3,r3,r6
   46a84:	d8c00115 	stw	r3,4(sp)
   46a88:	180b003a 	cmpeq	r5,r3,zero
   46a8c:	00800084 	movi	r2,2
   46a90:	114bc83a 	sub	r5,r2,r5
   46a94:	80c00115 	stw	r3,4(r16)
   46a98:	91400415 	stw	r5,16(r18)
   46a9c:	a0001a1e 	bne	r20,zero,46b08 <__d2b+0x140>
   46aa0:	3545883a 	add	r2,r6,r21
   46aa4:	10bef344 	addi	r2,r2,-1075
   46aa8:	00c00d44 	movi	r3,53
   46aac:	b0800015 	stw	r2,0(r22)
   46ab0:	1987c83a 	sub	r3,r3,r6
   46ab4:	b8c00015 	stw	r3,0(r23)
   46ab8:	9005883a 	mov	r2,r18
   46abc:	dfc00a17 	ldw	ra,40(sp)
   46ac0:	ddc00917 	ldw	r23,36(sp)
   46ac4:	dd800817 	ldw	r22,32(sp)
   46ac8:	dd400717 	ldw	r21,28(sp)
   46acc:	dd000617 	ldw	r20,24(sp)
   46ad0:	dcc00517 	ldw	r19,20(sp)
   46ad4:	dc800417 	ldw	r18,16(sp)
   46ad8:	dc400317 	ldw	r17,12(sp)
   46adc:	dc000217 	ldw	r16,8(sp)
   46ae0:	dec00b04 	addi	sp,sp,44
   46ae4:	f800283a 	ret
   46ae8:	d9000104 	addi	r4,sp,4
   46aec:	00464240 	call	46424 <__lo0bits>
   46af0:	11800804 	addi	r6,r2,32
   46af4:	d8800117 	ldw	r2,4(sp)
   46af8:	94c00415 	stw	r19,16(r18)
   46afc:	980b883a 	mov	r5,r19
   46b00:	90800515 	stw	r2,20(r18)
   46b04:	a03fe626 	beq	r20,zero,46aa0 <__d2b+0xd8>
   46b08:	2945883a 	add	r2,r5,r5
   46b0c:	1085883a 	add	r2,r2,r2
   46b10:	1405883a 	add	r2,r2,r16
   46b14:	113fff17 	ldw	r4,-4(r2)
   46b18:	30fef384 	addi	r3,r6,-1074
   46b1c:	2820917a 	slli	r16,r5,5
   46b20:	b0c00015 	stw	r3,0(r22)
   46b24:	00463b40 	call	463b4 <__hi0bits>
   46b28:	80a1c83a 	sub	r16,r16,r2
   46b2c:	bc000015 	stw	r16,0(r23)
   46b30:	003fe106 	br	46ab8 <__d2b+0xf0>
   46b34:	d8800017 	ldw	r2,0(sp)
   46b38:	90800515 	stw	r2,20(r18)
   46b3c:	d8c00117 	ldw	r3,4(sp)
   46b40:	003fd106 	br	46a88 <__d2b+0xc0>

00046b44 <__mdiff>:
   46b44:	defffb04 	addi	sp,sp,-20
   46b48:	dc000015 	stw	r16,0(sp)
   46b4c:	2821883a 	mov	r16,r5
   46b50:	dc800215 	stw	r18,8(sp)
   46b54:	300b883a 	mov	r5,r6
   46b58:	2025883a 	mov	r18,r4
   46b5c:	8009883a 	mov	r4,r16
   46b60:	dc400115 	stw	r17,4(sp)
   46b64:	dfc00415 	stw	ra,16(sp)
   46b68:	dcc00315 	stw	r19,12(sp)
   46b6c:	3023883a 	mov	r17,r6
   46b70:	00464e80 	call	464e8 <__mcmp>
   46b74:	10004226 	beq	r2,zero,46c80 <__mdiff+0x13c>
   46b78:	10005016 	blt	r2,zero,46cbc <__mdiff+0x178>
   46b7c:	0027883a 	mov	r19,zero
   46b80:	81400117 	ldw	r5,4(r16)
   46b84:	9009883a 	mov	r4,r18
   46b88:	004690c0 	call	4690c <_Balloc>
   46b8c:	1019883a 	mov	r12,r2
   46b90:	82800417 	ldw	r10,16(r16)
   46b94:	88800417 	ldw	r2,16(r17)
   46b98:	81800504 	addi	r6,r16,20
   46b9c:	5287883a 	add	r3,r10,r10
   46ba0:	1085883a 	add	r2,r2,r2
   46ba4:	18c7883a 	add	r3,r3,r3
   46ba8:	1085883a 	add	r2,r2,r2
   46bac:	8a000504 	addi	r8,r17,20
   46bb0:	64c00315 	stw	r19,12(r12)
   46bb4:	30db883a 	add	r13,r6,r3
   46bb8:	4097883a 	add	r11,r8,r2
   46bbc:	61c00504 	addi	r7,r12,20
   46bc0:	0013883a 	mov	r9,zero
   46bc4:	31000017 	ldw	r4,0(r6)
   46bc8:	41400017 	ldw	r5,0(r8)
   46bcc:	42000104 	addi	r8,r8,4
   46bd0:	20bfffcc 	andi	r2,r4,65535
   46bd4:	28ffffcc 	andi	r3,r5,65535
   46bd8:	10c5c83a 	sub	r2,r2,r3
   46bdc:	1245883a 	add	r2,r2,r9
   46be0:	2008d43a 	srli	r4,r4,16
   46be4:	280ad43a 	srli	r5,r5,16
   46be8:	1007d43a 	srai	r3,r2,16
   46bec:	3880000d 	sth	r2,0(r7)
   46bf0:	2149c83a 	sub	r4,r4,r5
   46bf4:	20c9883a 	add	r4,r4,r3
   46bf8:	3900008d 	sth	r4,2(r7)
   46bfc:	31800104 	addi	r6,r6,4
   46c00:	39c00104 	addi	r7,r7,4
   46c04:	2013d43a 	srai	r9,r4,16
   46c08:	42ffee36 	bltu	r8,r11,46bc4 <__mdiff+0x80>
   46c0c:	33400c2e 	bgeu	r6,r13,46c40 <__mdiff+0xfc>
   46c10:	30800017 	ldw	r2,0(r6)
   46c14:	31800104 	addi	r6,r6,4
   46c18:	10ffffcc 	andi	r3,r2,65535
   46c1c:	1a47883a 	add	r3,r3,r9
   46c20:	1004d43a 	srli	r2,r2,16
   46c24:	1809d43a 	srai	r4,r3,16
   46c28:	38c0000d 	sth	r3,0(r7)
   46c2c:	1105883a 	add	r2,r2,r4
   46c30:	3880008d 	sth	r2,2(r7)
   46c34:	1013d43a 	srai	r9,r2,16
   46c38:	39c00104 	addi	r7,r7,4
   46c3c:	337ff436 	bltu	r6,r13,46c10 <__mdiff+0xcc>
   46c40:	38bfff17 	ldw	r2,-4(r7)
   46c44:	38ffff04 	addi	r3,r7,-4
   46c48:	1000041e 	bne	r2,zero,46c5c <__mdiff+0x118>
   46c4c:	18ffff04 	addi	r3,r3,-4
   46c50:	18800017 	ldw	r2,0(r3)
   46c54:	52bfffc4 	addi	r10,r10,-1
   46c58:	103ffc26 	beq	r2,zero,46c4c <__mdiff+0x108>
   46c5c:	6005883a 	mov	r2,r12
   46c60:	62800415 	stw	r10,16(r12)
   46c64:	dfc00417 	ldw	ra,16(sp)
   46c68:	dcc00317 	ldw	r19,12(sp)
   46c6c:	dc800217 	ldw	r18,8(sp)
   46c70:	dc400117 	ldw	r17,4(sp)
   46c74:	dc000017 	ldw	r16,0(sp)
   46c78:	dec00504 	addi	sp,sp,20
   46c7c:	f800283a 	ret
   46c80:	9009883a 	mov	r4,r18
   46c84:	000b883a 	mov	r5,zero
   46c88:	004690c0 	call	4690c <_Balloc>
   46c8c:	1019883a 	mov	r12,r2
   46c90:	00800044 	movi	r2,1
   46c94:	60800415 	stw	r2,16(r12)
   46c98:	6005883a 	mov	r2,r12
   46c9c:	60000515 	stw	zero,20(r12)
   46ca0:	dfc00417 	ldw	ra,16(sp)
   46ca4:	dcc00317 	ldw	r19,12(sp)
   46ca8:	dc800217 	ldw	r18,8(sp)
   46cac:	dc400117 	ldw	r17,4(sp)
   46cb0:	dc000017 	ldw	r16,0(sp)
   46cb4:	dec00504 	addi	sp,sp,20
   46cb8:	f800283a 	ret
   46cbc:	880d883a 	mov	r6,r17
   46cc0:	04c00044 	movi	r19,1
   46cc4:	8023883a 	mov	r17,r16
   46cc8:	3021883a 	mov	r16,r6
   46ccc:	003fac06 	br	46b80 <__mdiff+0x3c>

00046cd0 <__lshift>:
   46cd0:	defff904 	addi	sp,sp,-28
   46cd4:	28800417 	ldw	r2,16(r5)
   46cd8:	dc000015 	stw	r16,0(sp)
   46cdc:	3021d17a 	srai	r16,r6,5
   46ce0:	28c00217 	ldw	r3,8(r5)
   46ce4:	10800044 	addi	r2,r2,1
   46ce8:	dc400115 	stw	r17,4(sp)
   46cec:	80a3883a 	add	r17,r16,r2
   46cf0:	dd400515 	stw	r21,20(sp)
   46cf4:	dd000415 	stw	r20,16(sp)
   46cf8:	dc800215 	stw	r18,8(sp)
   46cfc:	dfc00615 	stw	ra,24(sp)
   46d00:	2825883a 	mov	r18,r5
   46d04:	dcc00315 	stw	r19,12(sp)
   46d08:	3029883a 	mov	r20,r6
   46d0c:	202b883a 	mov	r21,r4
   46d10:	29400117 	ldw	r5,4(r5)
   46d14:	1c40030e 	bge	r3,r17,46d24 <__lshift+0x54>
   46d18:	18c7883a 	add	r3,r3,r3
   46d1c:	29400044 	addi	r5,r5,1
   46d20:	1c7ffd16 	blt	r3,r17,46d18 <__lshift+0x48>
   46d24:	a809883a 	mov	r4,r21
   46d28:	004690c0 	call	4690c <_Balloc>
   46d2c:	1027883a 	mov	r19,r2
   46d30:	11400504 	addi	r5,r2,20
   46d34:	0400090e 	bge	zero,r16,46d5c <__lshift+0x8c>
   46d38:	2805883a 	mov	r2,r5
   46d3c:	0007883a 	mov	r3,zero
   46d40:	18c00044 	addi	r3,r3,1
   46d44:	10000015 	stw	zero,0(r2)
   46d48:	10800104 	addi	r2,r2,4
   46d4c:	80fffc1e 	bne	r16,r3,46d40 <__lshift+0x70>
   46d50:	8405883a 	add	r2,r16,r16
   46d54:	1085883a 	add	r2,r2,r2
   46d58:	288b883a 	add	r5,r5,r2
   46d5c:	90800417 	ldw	r2,16(r18)
   46d60:	91000504 	addi	r4,r18,20
   46d64:	a18007cc 	andi	r6,r20,31
   46d68:	1085883a 	add	r2,r2,r2
   46d6c:	1085883a 	add	r2,r2,r2
   46d70:	208f883a 	add	r7,r4,r2
   46d74:	30001e26 	beq	r6,zero,46df0 <__lshift+0x120>
   46d78:	00800804 	movi	r2,32
   46d7c:	1191c83a 	sub	r8,r2,r6
   46d80:	0007883a 	mov	r3,zero
   46d84:	20800017 	ldw	r2,0(r4)
   46d88:	1184983a 	sll	r2,r2,r6
   46d8c:	1884b03a 	or	r2,r3,r2
   46d90:	28800015 	stw	r2,0(r5)
   46d94:	20c00017 	ldw	r3,0(r4)
   46d98:	21000104 	addi	r4,r4,4
   46d9c:	29400104 	addi	r5,r5,4
   46da0:	1a06d83a 	srl	r3,r3,r8
   46da4:	21fff736 	bltu	r4,r7,46d84 <__lshift+0xb4>
   46da8:	28c00015 	stw	r3,0(r5)
   46dac:	18000126 	beq	r3,zero,46db4 <__lshift+0xe4>
   46db0:	8c400044 	addi	r17,r17,1
   46db4:	88bfffc4 	addi	r2,r17,-1
   46db8:	98800415 	stw	r2,16(r19)
   46dbc:	a809883a 	mov	r4,r21
   46dc0:	900b883a 	mov	r5,r18
   46dc4:	004638c0 	call	4638c <_Bfree>
   46dc8:	9805883a 	mov	r2,r19
   46dcc:	dfc00617 	ldw	ra,24(sp)
   46dd0:	dd400517 	ldw	r21,20(sp)
   46dd4:	dd000417 	ldw	r20,16(sp)
   46dd8:	dcc00317 	ldw	r19,12(sp)
   46ddc:	dc800217 	ldw	r18,8(sp)
   46de0:	dc400117 	ldw	r17,4(sp)
   46de4:	dc000017 	ldw	r16,0(sp)
   46de8:	dec00704 	addi	sp,sp,28
   46dec:	f800283a 	ret
   46df0:	20800017 	ldw	r2,0(r4)
   46df4:	21000104 	addi	r4,r4,4
   46df8:	28800015 	stw	r2,0(r5)
   46dfc:	29400104 	addi	r5,r5,4
   46e00:	21ffec2e 	bgeu	r4,r7,46db4 <__lshift+0xe4>
   46e04:	20800017 	ldw	r2,0(r4)
   46e08:	21000104 	addi	r4,r4,4
   46e0c:	28800015 	stw	r2,0(r5)
   46e10:	29400104 	addi	r5,r5,4
   46e14:	21fff636 	bltu	r4,r7,46df0 <__lshift+0x120>
   46e18:	003fe606 	br	46db4 <__lshift+0xe4>

00046e1c <__multiply>:
   46e1c:	defff004 	addi	sp,sp,-64
   46e20:	dc800815 	stw	r18,32(sp)
   46e24:	dc400715 	stw	r17,28(sp)
   46e28:	2c800417 	ldw	r18,16(r5)
   46e2c:	34400417 	ldw	r17,16(r6)
   46e30:	dcc00915 	stw	r19,36(sp)
   46e34:	dc000615 	stw	r16,24(sp)
   46e38:	dfc00f15 	stw	ra,60(sp)
   46e3c:	df000e15 	stw	fp,56(sp)
   46e40:	ddc00d15 	stw	r23,52(sp)
   46e44:	dd800c15 	stw	r22,48(sp)
   46e48:	dd400b15 	stw	r21,44(sp)
   46e4c:	dd000a15 	stw	r20,40(sp)
   46e50:	2821883a 	mov	r16,r5
   46e54:	3027883a 	mov	r19,r6
   46e58:	9440040e 	bge	r18,r17,46e6c <__multiply+0x50>
   46e5c:	8825883a 	mov	r18,r17
   46e60:	2c400417 	ldw	r17,16(r5)
   46e64:	2827883a 	mov	r19,r5
   46e68:	3021883a 	mov	r16,r6
   46e6c:	80800217 	ldw	r2,8(r16)
   46e70:	9447883a 	add	r3,r18,r17
   46e74:	d8c00415 	stw	r3,16(sp)
   46e78:	81400117 	ldw	r5,4(r16)
   46e7c:	10c0010e 	bge	r2,r3,46e84 <__multiply+0x68>
   46e80:	29400044 	addi	r5,r5,1
   46e84:	004690c0 	call	4690c <_Balloc>
   46e88:	d8800515 	stw	r2,20(sp)
   46e8c:	d9000417 	ldw	r4,16(sp)
   46e90:	d8c00517 	ldw	r3,20(sp)
   46e94:	2105883a 	add	r2,r4,r4
   46e98:	1085883a 	add	r2,r2,r2
   46e9c:	19000504 	addi	r4,r3,20
   46ea0:	2085883a 	add	r2,r4,r2
   46ea4:	d8800315 	stw	r2,12(sp)
   46ea8:	2080052e 	bgeu	r4,r2,46ec0 <__multiply+0xa4>
   46eac:	2005883a 	mov	r2,r4
   46eb0:	d8c00317 	ldw	r3,12(sp)
   46eb4:	10000015 	stw	zero,0(r2)
   46eb8:	10800104 	addi	r2,r2,4
   46ebc:	10fffc36 	bltu	r2,r3,46eb0 <__multiply+0x94>
   46ec0:	8c45883a 	add	r2,r17,r17
   46ec4:	9487883a 	add	r3,r18,r18
   46ec8:	9dc00504 	addi	r23,r19,20
   46ecc:	1085883a 	add	r2,r2,r2
   46ed0:	84000504 	addi	r16,r16,20
   46ed4:	18c7883a 	add	r3,r3,r3
   46ed8:	b885883a 	add	r2,r23,r2
   46edc:	dc000015 	stw	r16,0(sp)
   46ee0:	d8800215 	stw	r2,8(sp)
   46ee4:	80f9883a 	add	fp,r16,r3
   46ee8:	b880432e 	bgeu	r23,r2,46ff8 <__multiply+0x1dc>
   46eec:	d9000115 	stw	r4,4(sp)
   46ef0:	b9000017 	ldw	r4,0(r23)
   46ef4:	253fffcc 	andi	r20,r4,65535
   46ef8:	a0001a26 	beq	r20,zero,46f64 <__multiply+0x148>
   46efc:	dcc00017 	ldw	r19,0(sp)
   46f00:	dc800117 	ldw	r18,4(sp)
   46f04:	002b883a 	mov	r21,zero
   46f08:	9c400017 	ldw	r17,0(r19)
   46f0c:	94000017 	ldw	r16,0(r18)
   46f10:	a009883a 	mov	r4,r20
   46f14:	897fffcc 	andi	r5,r17,65535
   46f18:	004a0e00 	call	4a0e0 <__mulsi3>
   46f1c:	880ad43a 	srli	r5,r17,16
   46f20:	80ffffcc 	andi	r3,r16,65535
   46f24:	a8c7883a 	add	r3,r21,r3
   46f28:	a009883a 	mov	r4,r20
   46f2c:	10e3883a 	add	r17,r2,r3
   46f30:	8020d43a 	srli	r16,r16,16
   46f34:	004a0e00 	call	4a0e0 <__mulsi3>
   46f38:	8806d43a 	srli	r3,r17,16
   46f3c:	1405883a 	add	r2,r2,r16
   46f40:	9cc00104 	addi	r19,r19,4
   46f44:	1887883a 	add	r3,r3,r2
   46f48:	90c0008d 	sth	r3,2(r18)
   46f4c:	9440000d 	sth	r17,0(r18)
   46f50:	182ad43a 	srli	r21,r3,16
   46f54:	94800104 	addi	r18,r18,4
   46f58:	9f3feb36 	bltu	r19,fp,46f08 <__multiply+0xec>
   46f5c:	95400015 	stw	r21,0(r18)
   46f60:	b9000017 	ldw	r4,0(r23)
   46f64:	202ad43a 	srli	r21,r4,16
   46f68:	a8001c26 	beq	r21,zero,46fdc <__multiply+0x1c0>
   46f6c:	d9000117 	ldw	r4,4(sp)
   46f70:	dd000017 	ldw	r20,0(sp)
   46f74:	002d883a 	mov	r22,zero
   46f78:	24c00017 	ldw	r19,0(r4)
   46f7c:	2025883a 	mov	r18,r4
   46f80:	9823883a 	mov	r17,r19
   46f84:	a4000017 	ldw	r16,0(r20)
   46f88:	a809883a 	mov	r4,r21
   46f8c:	a5000104 	addi	r20,r20,4
   46f90:	817fffcc 	andi	r5,r16,65535
   46f94:	004a0e00 	call	4a0e0 <__mulsi3>
   46f98:	8806d43a 	srli	r3,r17,16
   46f9c:	800ad43a 	srli	r5,r16,16
   46fa0:	94c0000d 	sth	r19,0(r18)
   46fa4:	b0c7883a 	add	r3,r22,r3
   46fa8:	10e1883a 	add	r16,r2,r3
   46fac:	9400008d 	sth	r16,2(r18)
   46fb0:	a809883a 	mov	r4,r21
   46fb4:	94800104 	addi	r18,r18,4
   46fb8:	004a0e00 	call	4a0e0 <__mulsi3>
   46fbc:	94400017 	ldw	r17,0(r18)
   46fc0:	8020d43a 	srli	r16,r16,16
   46fc4:	88ffffcc 	andi	r3,r17,65535
   46fc8:	10c5883a 	add	r2,r2,r3
   46fcc:	80a7883a 	add	r19,r16,r2
   46fd0:	982cd43a 	srli	r22,r19,16
   46fd4:	a73feb36 	bltu	r20,fp,46f84 <__multiply+0x168>
   46fd8:	94c00015 	stw	r19,0(r18)
   46fdc:	d8800217 	ldw	r2,8(sp)
   46fe0:	bdc00104 	addi	r23,r23,4
   46fe4:	b880042e 	bgeu	r23,r2,46ff8 <__multiply+0x1dc>
   46fe8:	d8c00117 	ldw	r3,4(sp)
   46fec:	18c00104 	addi	r3,r3,4
   46ff0:	d8c00115 	stw	r3,4(sp)
   46ff4:	003fbe06 	br	46ef0 <__multiply+0xd4>
   46ff8:	d9000417 	ldw	r4,16(sp)
   46ffc:	01000c0e 	bge	zero,r4,47030 <__multiply+0x214>
   47000:	d8c00317 	ldw	r3,12(sp)
   47004:	18bfff17 	ldw	r2,-4(r3)
   47008:	18ffff04 	addi	r3,r3,-4
   4700c:	10000326 	beq	r2,zero,4701c <__multiply+0x200>
   47010:	00000706 	br	47030 <__multiply+0x214>
   47014:	18800017 	ldw	r2,0(r3)
   47018:	1000051e 	bne	r2,zero,47030 <__multiply+0x214>
   4701c:	d9000417 	ldw	r4,16(sp)
   47020:	18ffff04 	addi	r3,r3,-4
   47024:	213fffc4 	addi	r4,r4,-1
   47028:	d9000415 	stw	r4,16(sp)
   4702c:	203ff91e 	bne	r4,zero,47014 <__multiply+0x1f8>
   47030:	d8800417 	ldw	r2,16(sp)
   47034:	d8c00517 	ldw	r3,20(sp)
   47038:	18800415 	stw	r2,16(r3)
   4703c:	1805883a 	mov	r2,r3
   47040:	dfc00f17 	ldw	ra,60(sp)
   47044:	df000e17 	ldw	fp,56(sp)
   47048:	ddc00d17 	ldw	r23,52(sp)
   4704c:	dd800c17 	ldw	r22,48(sp)
   47050:	dd400b17 	ldw	r21,44(sp)
   47054:	dd000a17 	ldw	r20,40(sp)
   47058:	dcc00917 	ldw	r19,36(sp)
   4705c:	dc800817 	ldw	r18,32(sp)
   47060:	dc400717 	ldw	r17,28(sp)
   47064:	dc000617 	ldw	r16,24(sp)
   47068:	dec01004 	addi	sp,sp,64
   4706c:	f800283a 	ret

00047070 <__i2b>:
   47070:	defffd04 	addi	sp,sp,-12
   47074:	dc000015 	stw	r16,0(sp)
   47078:	04000044 	movi	r16,1
   4707c:	dc800115 	stw	r18,4(sp)
   47080:	2825883a 	mov	r18,r5
   47084:	800b883a 	mov	r5,r16
   47088:	dfc00215 	stw	ra,8(sp)
   4708c:	004690c0 	call	4690c <_Balloc>
   47090:	14000415 	stw	r16,16(r2)
   47094:	14800515 	stw	r18,20(r2)
   47098:	dfc00217 	ldw	ra,8(sp)
   4709c:	dc800117 	ldw	r18,4(sp)
   470a0:	dc000017 	ldw	r16,0(sp)
   470a4:	dec00304 	addi	sp,sp,12
   470a8:	f800283a 	ret

000470ac <__multadd>:
   470ac:	defff604 	addi	sp,sp,-40
   470b0:	dd800615 	stw	r22,24(sp)
   470b4:	2d800417 	ldw	r22,16(r5)
   470b8:	df000815 	stw	fp,32(sp)
   470bc:	ddc00715 	stw	r23,28(sp)
   470c0:	dd400515 	stw	r21,20(sp)
   470c4:	dd000415 	stw	r20,16(sp)
   470c8:	dcc00315 	stw	r19,12(sp)
   470cc:	dc800215 	stw	r18,8(sp)
   470d0:	dfc00915 	stw	ra,36(sp)
   470d4:	dc400115 	stw	r17,4(sp)
   470d8:	dc000015 	stw	r16,0(sp)
   470dc:	282f883a 	mov	r23,r5
   470e0:	2039883a 	mov	fp,r4
   470e4:	302b883a 	mov	r21,r6
   470e8:	3829883a 	mov	r20,r7
   470ec:	2c800504 	addi	r18,r5,20
   470f0:	0027883a 	mov	r19,zero
   470f4:	94400017 	ldw	r17,0(r18)
   470f8:	a80b883a 	mov	r5,r21
   470fc:	9cc00044 	addi	r19,r19,1
   47100:	893fffcc 	andi	r4,r17,65535
   47104:	004a0e00 	call	4a0e0 <__mulsi3>
   47108:	8808d43a 	srli	r4,r17,16
   4710c:	1521883a 	add	r16,r2,r20
   47110:	a80b883a 	mov	r5,r21
   47114:	004a0e00 	call	4a0e0 <__mulsi3>
   47118:	8008d43a 	srli	r4,r16,16
   4711c:	843fffcc 	andi	r16,r16,65535
   47120:	1105883a 	add	r2,r2,r4
   47124:	1006943a 	slli	r3,r2,16
   47128:	1028d43a 	srli	r20,r2,16
   4712c:	1c07883a 	add	r3,r3,r16
   47130:	90c00015 	stw	r3,0(r18)
   47134:	94800104 	addi	r18,r18,4
   47138:	9dbfee16 	blt	r19,r22,470f4 <__multadd+0x48>
   4713c:	a0000826 	beq	r20,zero,47160 <__multadd+0xb4>
   47140:	b8800217 	ldw	r2,8(r23)
   47144:	b080130e 	bge	r22,r2,47194 <__multadd+0xe8>
   47148:	b585883a 	add	r2,r22,r22
   4714c:	1085883a 	add	r2,r2,r2
   47150:	15c5883a 	add	r2,r2,r23
   47154:	b0c00044 	addi	r3,r22,1
   47158:	15000515 	stw	r20,20(r2)
   4715c:	b8c00415 	stw	r3,16(r23)
   47160:	b805883a 	mov	r2,r23
   47164:	dfc00917 	ldw	ra,36(sp)
   47168:	df000817 	ldw	fp,32(sp)
   4716c:	ddc00717 	ldw	r23,28(sp)
   47170:	dd800617 	ldw	r22,24(sp)
   47174:	dd400517 	ldw	r21,20(sp)
   47178:	dd000417 	ldw	r20,16(sp)
   4717c:	dcc00317 	ldw	r19,12(sp)
   47180:	dc800217 	ldw	r18,8(sp)
   47184:	dc400117 	ldw	r17,4(sp)
   47188:	dc000017 	ldw	r16,0(sp)
   4718c:	dec00a04 	addi	sp,sp,40
   47190:	f800283a 	ret
   47194:	b9400117 	ldw	r5,4(r23)
   47198:	e009883a 	mov	r4,fp
   4719c:	29400044 	addi	r5,r5,1
   471a0:	004690c0 	call	4690c <_Balloc>
   471a4:	b9800417 	ldw	r6,16(r23)
   471a8:	b9400304 	addi	r5,r23,12
   471ac:	11000304 	addi	r4,r2,12
   471b0:	318d883a 	add	r6,r6,r6
   471b4:	318d883a 	add	r6,r6,r6
   471b8:	31800204 	addi	r6,r6,8
   471bc:	1023883a 	mov	r17,r2
   471c0:	00461740 	call	46174 <memcpy>
   471c4:	b80b883a 	mov	r5,r23
   471c8:	e009883a 	mov	r4,fp
   471cc:	004638c0 	call	4638c <_Bfree>
   471d0:	882f883a 	mov	r23,r17
   471d4:	003fdc06 	br	47148 <__multadd+0x9c>

000471d8 <__pow5mult>:
   471d8:	defffa04 	addi	sp,sp,-24
   471dc:	308000cc 	andi	r2,r6,3
   471e0:	dd000415 	stw	r20,16(sp)
   471e4:	dcc00315 	stw	r19,12(sp)
   471e8:	dc000015 	stw	r16,0(sp)
   471ec:	dfc00515 	stw	ra,20(sp)
   471f0:	dc800215 	stw	r18,8(sp)
   471f4:	dc400115 	stw	r17,4(sp)
   471f8:	3021883a 	mov	r16,r6
   471fc:	2027883a 	mov	r19,r4
   47200:	2829883a 	mov	r20,r5
   47204:	10002b1e 	bne	r2,zero,472b4 <__pow5mult+0xdc>
   47208:	8025d0ba 	srai	r18,r16,2
   4720c:	90001b26 	beq	r18,zero,4727c <__pow5mult+0xa4>
   47210:	9c001217 	ldw	r16,72(r19)
   47214:	8000081e 	bne	r16,zero,47238 <__pow5mult+0x60>
   47218:	00003006 	br	472dc <__pow5mult+0x104>
   4721c:	800b883a 	mov	r5,r16
   47220:	800d883a 	mov	r6,r16
   47224:	9809883a 	mov	r4,r19
   47228:	90001426 	beq	r18,zero,4727c <__pow5mult+0xa4>
   4722c:	80800017 	ldw	r2,0(r16)
   47230:	10001b26 	beq	r2,zero,472a0 <__pow5mult+0xc8>
   47234:	1021883a 	mov	r16,r2
   47238:	9080004c 	andi	r2,r18,1
   4723c:	1005003a 	cmpeq	r2,r2,zero
   47240:	9025d07a 	srai	r18,r18,1
   47244:	800d883a 	mov	r6,r16
   47248:	9809883a 	mov	r4,r19
   4724c:	a00b883a 	mov	r5,r20
   47250:	103ff21e 	bne	r2,zero,4721c <__pow5mult+0x44>
   47254:	0046e1c0 	call	46e1c <__multiply>
   47258:	a00b883a 	mov	r5,r20
   4725c:	9809883a 	mov	r4,r19
   47260:	1023883a 	mov	r17,r2
   47264:	004638c0 	call	4638c <_Bfree>
   47268:	8829883a 	mov	r20,r17
   4726c:	800b883a 	mov	r5,r16
   47270:	800d883a 	mov	r6,r16
   47274:	9809883a 	mov	r4,r19
   47278:	903fec1e 	bne	r18,zero,4722c <__pow5mult+0x54>
   4727c:	a005883a 	mov	r2,r20
   47280:	dfc00517 	ldw	ra,20(sp)
   47284:	dd000417 	ldw	r20,16(sp)
   47288:	dcc00317 	ldw	r19,12(sp)
   4728c:	dc800217 	ldw	r18,8(sp)
   47290:	dc400117 	ldw	r17,4(sp)
   47294:	dc000017 	ldw	r16,0(sp)
   47298:	dec00604 	addi	sp,sp,24
   4729c:	f800283a 	ret
   472a0:	0046e1c0 	call	46e1c <__multiply>
   472a4:	80800015 	stw	r2,0(r16)
   472a8:	1021883a 	mov	r16,r2
   472ac:	10000015 	stw	zero,0(r2)
   472b0:	003fe106 	br	47238 <__pow5mult+0x60>
   472b4:	1085883a 	add	r2,r2,r2
   472b8:	00c00174 	movhi	r3,5
   472bc:	18f5a904 	addi	r3,r3,-10588
   472c0:	1085883a 	add	r2,r2,r2
   472c4:	10c5883a 	add	r2,r2,r3
   472c8:	11bfff17 	ldw	r6,-4(r2)
   472cc:	000f883a 	mov	r7,zero
   472d0:	00470ac0 	call	470ac <__multadd>
   472d4:	1029883a 	mov	r20,r2
   472d8:	003fcb06 	br	47208 <__pow5mult+0x30>
   472dc:	9809883a 	mov	r4,r19
   472e0:	01409c44 	movi	r5,625
   472e4:	00470700 	call	47070 <__i2b>
   472e8:	98801215 	stw	r2,72(r19)
   472ec:	1021883a 	mov	r16,r2
   472f0:	10000015 	stw	zero,0(r2)
   472f4:	003fd006 	br	47238 <__pow5mult+0x60>

000472f8 <__s2b>:
   472f8:	defff904 	addi	sp,sp,-28
   472fc:	dcc00315 	stw	r19,12(sp)
   47300:	dc800215 	stw	r18,8(sp)
   47304:	2827883a 	mov	r19,r5
   47308:	2025883a 	mov	r18,r4
   4730c:	01400244 	movi	r5,9
   47310:	39000204 	addi	r4,r7,8
   47314:	dd000415 	stw	r20,16(sp)
   47318:	dc400115 	stw	r17,4(sp)
   4731c:	dfc00615 	stw	ra,24(sp)
   47320:	dd400515 	stw	r21,20(sp)
   47324:	dc000015 	stw	r16,0(sp)
   47328:	3829883a 	mov	r20,r7
   4732c:	3023883a 	mov	r17,r6
   47330:	004a0100 	call	4a010 <__divsi3>
   47334:	00c00044 	movi	r3,1
   47338:	1880350e 	bge	r3,r2,47410 <__s2b+0x118>
   4733c:	000b883a 	mov	r5,zero
   47340:	18c7883a 	add	r3,r3,r3
   47344:	29400044 	addi	r5,r5,1
   47348:	18bffd16 	blt	r3,r2,47340 <__s2b+0x48>
   4734c:	9009883a 	mov	r4,r18
   47350:	004690c0 	call	4690c <_Balloc>
   47354:	1011883a 	mov	r8,r2
   47358:	d8800717 	ldw	r2,28(sp)
   4735c:	00c00044 	movi	r3,1
   47360:	01800244 	movi	r6,9
   47364:	40800515 	stw	r2,20(r8)
   47368:	40c00415 	stw	r3,16(r8)
   4736c:	3440260e 	bge	r6,r17,47408 <__s2b+0x110>
   47370:	3021883a 	mov	r16,r6
   47374:	99ab883a 	add	r21,r19,r6
   47378:	9c05883a 	add	r2,r19,r16
   4737c:	11c00007 	ldb	r7,0(r2)
   47380:	400b883a 	mov	r5,r8
   47384:	9009883a 	mov	r4,r18
   47388:	39fff404 	addi	r7,r7,-48
   4738c:	01800284 	movi	r6,10
   47390:	00470ac0 	call	470ac <__multadd>
   47394:	84000044 	addi	r16,r16,1
   47398:	1011883a 	mov	r8,r2
   4739c:	8c3ff61e 	bne	r17,r16,47378 <__s2b+0x80>
   473a0:	ac45883a 	add	r2,r21,r17
   473a4:	117ffe04 	addi	r5,r2,-8
   473a8:	880d883a 	mov	r6,r17
   473ac:	35000c0e 	bge	r6,r20,473e0 <__s2b+0xe8>
   473b0:	a185c83a 	sub	r2,r20,r6
   473b4:	2821883a 	mov	r16,r5
   473b8:	28a3883a 	add	r17,r5,r2
   473bc:	81c00007 	ldb	r7,0(r16)
   473c0:	400b883a 	mov	r5,r8
   473c4:	9009883a 	mov	r4,r18
   473c8:	39fff404 	addi	r7,r7,-48
   473cc:	01800284 	movi	r6,10
   473d0:	00470ac0 	call	470ac <__multadd>
   473d4:	84000044 	addi	r16,r16,1
   473d8:	1011883a 	mov	r8,r2
   473dc:	847ff71e 	bne	r16,r17,473bc <__s2b+0xc4>
   473e0:	4005883a 	mov	r2,r8
   473e4:	dfc00617 	ldw	ra,24(sp)
   473e8:	dd400517 	ldw	r21,20(sp)
   473ec:	dd000417 	ldw	r20,16(sp)
   473f0:	dcc00317 	ldw	r19,12(sp)
   473f4:	dc800217 	ldw	r18,8(sp)
   473f8:	dc400117 	ldw	r17,4(sp)
   473fc:	dc000017 	ldw	r16,0(sp)
   47400:	dec00704 	addi	sp,sp,28
   47404:	f800283a 	ret
   47408:	99400284 	addi	r5,r19,10
   4740c:	003fe706 	br	473ac <__s2b+0xb4>
   47410:	000b883a 	mov	r5,zero
   47414:	003fcd06 	br	4734c <__s2b+0x54>

00047418 <_realloc_r>:
   47418:	defff404 	addi	sp,sp,-48
   4741c:	dd800815 	stw	r22,32(sp)
   47420:	dc800415 	stw	r18,16(sp)
   47424:	dc400315 	stw	r17,12(sp)
   47428:	dfc00b15 	stw	ra,44(sp)
   4742c:	df000a15 	stw	fp,40(sp)
   47430:	ddc00915 	stw	r23,36(sp)
   47434:	dd400715 	stw	r21,28(sp)
   47438:	dd000615 	stw	r20,24(sp)
   4743c:	dcc00515 	stw	r19,20(sp)
   47440:	dc000215 	stw	r16,8(sp)
   47444:	2825883a 	mov	r18,r5
   47448:	3023883a 	mov	r17,r6
   4744c:	202d883a 	mov	r22,r4
   47450:	2800c926 	beq	r5,zero,47778 <_realloc_r+0x360>
   47454:	004b0240 	call	4b024 <__malloc_lock>
   47458:	943ffe04 	addi	r16,r18,-8
   4745c:	88c002c4 	addi	r3,r17,11
   47460:	00800584 	movi	r2,22
   47464:	82000117 	ldw	r8,4(r16)
   47468:	10c01b2e 	bgeu	r2,r3,474d8 <_realloc_r+0xc0>
   4746c:	00bffe04 	movi	r2,-8
   47470:	188e703a 	and	r7,r3,r2
   47474:	3839883a 	mov	fp,r7
   47478:	38001a16 	blt	r7,zero,474e4 <_realloc_r+0xcc>
   4747c:	e4401936 	bltu	fp,r17,474e4 <_realloc_r+0xcc>
   47480:	013fff04 	movi	r4,-4
   47484:	4126703a 	and	r19,r8,r4
   47488:	99c02616 	blt	r19,r7,47524 <_realloc_r+0x10c>
   4748c:	802b883a 	mov	r21,r16
   47490:	9829883a 	mov	r20,r19
   47494:	84000204 	addi	r16,r16,8
   47498:	a80f883a 	mov	r7,r21
   4749c:	a70dc83a 	sub	r6,r20,fp
   474a0:	008003c4 	movi	r2,15
   474a4:	1180c136 	bltu	r2,r6,477ac <_realloc_r+0x394>
   474a8:	38800117 	ldw	r2,4(r7)
   474ac:	a549883a 	add	r4,r20,r21
   474b0:	1080004c 	andi	r2,r2,1
   474b4:	a084b03a 	or	r2,r20,r2
   474b8:	38800115 	stw	r2,4(r7)
   474bc:	20c00117 	ldw	r3,4(r4)
   474c0:	18c00054 	ori	r3,r3,1
   474c4:	20c00115 	stw	r3,4(r4)
   474c8:	b009883a 	mov	r4,r22
   474cc:	004b0440 	call	4b044 <__malloc_unlock>
   474d0:	8023883a 	mov	r17,r16
   474d4:	00000606 	br	474f0 <_realloc_r+0xd8>
   474d8:	01c00404 	movi	r7,16
   474dc:	3839883a 	mov	fp,r7
   474e0:	e47fe72e 	bgeu	fp,r17,47480 <_realloc_r+0x68>
   474e4:	00800304 	movi	r2,12
   474e8:	0023883a 	mov	r17,zero
   474ec:	b0800015 	stw	r2,0(r22)
   474f0:	8805883a 	mov	r2,r17
   474f4:	dfc00b17 	ldw	ra,44(sp)
   474f8:	df000a17 	ldw	fp,40(sp)
   474fc:	ddc00917 	ldw	r23,36(sp)
   47500:	dd800817 	ldw	r22,32(sp)
   47504:	dd400717 	ldw	r21,28(sp)
   47508:	dd000617 	ldw	r20,24(sp)
   4750c:	dcc00517 	ldw	r19,20(sp)
   47510:	dc800417 	ldw	r18,16(sp)
   47514:	dc400317 	ldw	r17,12(sp)
   47518:	dc000217 	ldw	r16,8(sp)
   4751c:	dec00c04 	addi	sp,sp,48
   47520:	f800283a 	ret
   47524:	00800174 	movhi	r2,5
   47528:	10b70104 	addi	r2,r2,-9212
   4752c:	12400217 	ldw	r9,8(r2)
   47530:	84cd883a 	add	r6,r16,r19
   47534:	802b883a 	mov	r21,r16
   47538:	3240b926 	beq	r6,r9,47820 <_realloc_r+0x408>
   4753c:	31400117 	ldw	r5,4(r6)
   47540:	00bfff84 	movi	r2,-2
   47544:	2884703a 	and	r2,r5,r2
   47548:	1185883a 	add	r2,r2,r6
   4754c:	10c00117 	ldw	r3,4(r2)
   47550:	18c0004c 	andi	r3,r3,1
   47554:	1807003a 	cmpeq	r3,r3,zero
   47558:	1800a326 	beq	r3,zero,477e8 <_realloc_r+0x3d0>
   4755c:	2908703a 	and	r4,r5,r4
   47560:	9929883a 	add	r20,r19,r4
   47564:	a1c0a30e 	bge	r20,r7,477f4 <_realloc_r+0x3dc>
   47568:	4080004c 	andi	r2,r8,1
   4756c:	1000551e 	bne	r2,zero,476c4 <_realloc_r+0x2ac>
   47570:	80800017 	ldw	r2,0(r16)
   47574:	80afc83a 	sub	r23,r16,r2
   47578:	b8c00117 	ldw	r3,4(r23)
   4757c:	00bfff04 	movi	r2,-4
   47580:	1884703a 	and	r2,r3,r2
   47584:	30002e26 	beq	r6,zero,47640 <_realloc_r+0x228>
   47588:	3240b926 	beq	r6,r9,47870 <_realloc_r+0x458>
   4758c:	98a9883a 	add	r20,r19,r2
   47590:	2509883a 	add	r4,r4,r20
   47594:	d9000015 	stw	r4,0(sp)
   47598:	21c02a16 	blt	r4,r7,47644 <_realloc_r+0x22c>
   4759c:	30800317 	ldw	r2,12(r6)
   475a0:	30c00217 	ldw	r3,8(r6)
   475a4:	01400904 	movi	r5,36
   475a8:	99bfff04 	addi	r6,r19,-4
   475ac:	18800315 	stw	r2,12(r3)
   475b0:	10c00215 	stw	r3,8(r2)
   475b4:	b9000317 	ldw	r4,12(r23)
   475b8:	b8800217 	ldw	r2,8(r23)
   475bc:	b82b883a 	mov	r21,r23
   475c0:	bc000204 	addi	r16,r23,8
   475c4:	20800215 	stw	r2,8(r4)
   475c8:	11000315 	stw	r4,12(r2)
   475cc:	2980e436 	bltu	r5,r6,47960 <_realloc_r+0x548>
   475d0:	008004c4 	movi	r2,19
   475d4:	9009883a 	mov	r4,r18
   475d8:	8011883a 	mov	r8,r16
   475dc:	11800f2e 	bgeu	r2,r6,4761c <_realloc_r+0x204>
   475e0:	90800017 	ldw	r2,0(r18)
   475e4:	ba000404 	addi	r8,r23,16
   475e8:	91000204 	addi	r4,r18,8
   475ec:	b8800215 	stw	r2,8(r23)
   475f0:	90c00117 	ldw	r3,4(r18)
   475f4:	008006c4 	movi	r2,27
   475f8:	b8c00315 	stw	r3,12(r23)
   475fc:	1180072e 	bgeu	r2,r6,4761c <_realloc_r+0x204>
   47600:	90c00217 	ldw	r3,8(r18)
   47604:	ba000604 	addi	r8,r23,24
   47608:	91000404 	addi	r4,r18,16
   4760c:	b8c00415 	stw	r3,16(r23)
   47610:	90800317 	ldw	r2,12(r18)
   47614:	b8800515 	stw	r2,20(r23)
   47618:	3140e726 	beq	r6,r5,479b8 <_realloc_r+0x5a0>
   4761c:	20800017 	ldw	r2,0(r4)
   47620:	dd000017 	ldw	r20,0(sp)
   47624:	b80f883a 	mov	r7,r23
   47628:	40800015 	stw	r2,0(r8)
   4762c:	20c00117 	ldw	r3,4(r4)
   47630:	40c00115 	stw	r3,4(r8)
   47634:	20800217 	ldw	r2,8(r4)
   47638:	40800215 	stw	r2,8(r8)
   4763c:	003f9706 	br	4749c <_realloc_r+0x84>
   47640:	98a9883a 	add	r20,r19,r2
   47644:	a1c01f16 	blt	r20,r7,476c4 <_realloc_r+0x2ac>
   47648:	b8c00317 	ldw	r3,12(r23)
   4764c:	b8800217 	ldw	r2,8(r23)
   47650:	99bfff04 	addi	r6,r19,-4
   47654:	01400904 	movi	r5,36
   47658:	b82b883a 	mov	r21,r23
   4765c:	18800215 	stw	r2,8(r3)
   47660:	10c00315 	stw	r3,12(r2)
   47664:	bc000204 	addi	r16,r23,8
   47668:	2980c336 	bltu	r5,r6,47978 <_realloc_r+0x560>
   4766c:	008004c4 	movi	r2,19
   47670:	9009883a 	mov	r4,r18
   47674:	8011883a 	mov	r8,r16
   47678:	11800f2e 	bgeu	r2,r6,476b8 <_realloc_r+0x2a0>
   4767c:	90800017 	ldw	r2,0(r18)
   47680:	ba000404 	addi	r8,r23,16
   47684:	91000204 	addi	r4,r18,8
   47688:	b8800215 	stw	r2,8(r23)
   4768c:	90c00117 	ldw	r3,4(r18)
   47690:	008006c4 	movi	r2,27
   47694:	b8c00315 	stw	r3,12(r23)
   47698:	1180072e 	bgeu	r2,r6,476b8 <_realloc_r+0x2a0>
   4769c:	90c00217 	ldw	r3,8(r18)
   476a0:	ba000604 	addi	r8,r23,24
   476a4:	91000404 	addi	r4,r18,16
   476a8:	b8c00415 	stw	r3,16(r23)
   476ac:	90800317 	ldw	r2,12(r18)
   476b0:	b8800515 	stw	r2,20(r23)
   476b4:	3140c726 	beq	r6,r5,479d4 <_realloc_r+0x5bc>
   476b8:	20800017 	ldw	r2,0(r4)
   476bc:	b80f883a 	mov	r7,r23
   476c0:	003fd906 	br	47628 <_realloc_r+0x210>
   476c4:	880b883a 	mov	r5,r17
   476c8:	b009883a 	mov	r4,r22
   476cc:	00459500 	call	45950 <_malloc_r>
   476d0:	1023883a 	mov	r17,r2
   476d4:	10002526 	beq	r2,zero,4776c <_realloc_r+0x354>
   476d8:	80800117 	ldw	r2,4(r16)
   476dc:	00ffff84 	movi	r3,-2
   476e0:	893ffe04 	addi	r4,r17,-8
   476e4:	10c4703a 	and	r2,r2,r3
   476e8:	8085883a 	add	r2,r16,r2
   476ec:	20809526 	beq	r4,r2,47944 <_realloc_r+0x52c>
   476f0:	99bfff04 	addi	r6,r19,-4
   476f4:	01c00904 	movi	r7,36
   476f8:	39804536 	bltu	r7,r6,47810 <_realloc_r+0x3f8>
   476fc:	008004c4 	movi	r2,19
   47700:	9009883a 	mov	r4,r18
   47704:	880b883a 	mov	r5,r17
   47708:	11800f2e 	bgeu	r2,r6,47748 <_realloc_r+0x330>
   4770c:	90800017 	ldw	r2,0(r18)
   47710:	89400204 	addi	r5,r17,8
   47714:	91000204 	addi	r4,r18,8
   47718:	88800015 	stw	r2,0(r17)
   4771c:	90c00117 	ldw	r3,4(r18)
   47720:	008006c4 	movi	r2,27
   47724:	88c00115 	stw	r3,4(r17)
   47728:	1180072e 	bgeu	r2,r6,47748 <_realloc_r+0x330>
   4772c:	90c00217 	ldw	r3,8(r18)
   47730:	89400404 	addi	r5,r17,16
   47734:	91000404 	addi	r4,r18,16
   47738:	88c00215 	stw	r3,8(r17)
   4773c:	90800317 	ldw	r2,12(r18)
   47740:	88800315 	stw	r2,12(r17)
   47744:	31c09126 	beq	r6,r7,4798c <_realloc_r+0x574>
   47748:	20800017 	ldw	r2,0(r4)
   4774c:	28800015 	stw	r2,0(r5)
   47750:	20c00117 	ldw	r3,4(r4)
   47754:	28c00115 	stw	r3,4(r5)
   47758:	20800217 	ldw	r2,8(r4)
   4775c:	28800215 	stw	r2,8(r5)
   47760:	900b883a 	mov	r5,r18
   47764:	b009883a 	mov	r4,r22
   47768:	0044dc80 	call	44dc8 <_free_r>
   4776c:	b009883a 	mov	r4,r22
   47770:	004b0440 	call	4b044 <__malloc_unlock>
   47774:	003f5e06 	br	474f0 <_realloc_r+0xd8>
   47778:	300b883a 	mov	r5,r6
   4777c:	dfc00b17 	ldw	ra,44(sp)
   47780:	df000a17 	ldw	fp,40(sp)
   47784:	ddc00917 	ldw	r23,36(sp)
   47788:	dd800817 	ldw	r22,32(sp)
   4778c:	dd400717 	ldw	r21,28(sp)
   47790:	dd000617 	ldw	r20,24(sp)
   47794:	dcc00517 	ldw	r19,20(sp)
   47798:	dc800417 	ldw	r18,16(sp)
   4779c:	dc400317 	ldw	r17,12(sp)
   477a0:	dc000217 	ldw	r16,8(sp)
   477a4:	dec00c04 	addi	sp,sp,48
   477a8:	00459501 	jmpi	45950 <_malloc_r>
   477ac:	38800117 	ldw	r2,4(r7)
   477b0:	e54b883a 	add	r5,fp,r21
   477b4:	31000054 	ori	r4,r6,1
   477b8:	1080004c 	andi	r2,r2,1
   477bc:	1704b03a 	or	r2,r2,fp
   477c0:	38800115 	stw	r2,4(r7)
   477c4:	29000115 	stw	r4,4(r5)
   477c8:	2987883a 	add	r3,r5,r6
   477cc:	18800117 	ldw	r2,4(r3)
   477d0:	29400204 	addi	r5,r5,8
   477d4:	b009883a 	mov	r4,r22
   477d8:	10800054 	ori	r2,r2,1
   477dc:	18800115 	stw	r2,4(r3)
   477e0:	0044dc80 	call	44dc8 <_free_r>
   477e4:	003f3806 	br	474c8 <_realloc_r+0xb0>
   477e8:	000d883a 	mov	r6,zero
   477ec:	0009883a 	mov	r4,zero
   477f0:	003f5d06 	br	47568 <_realloc_r+0x150>
   477f4:	30c00217 	ldw	r3,8(r6)
   477f8:	30800317 	ldw	r2,12(r6)
   477fc:	800f883a 	mov	r7,r16
   47800:	84000204 	addi	r16,r16,8
   47804:	10c00215 	stw	r3,8(r2)
   47808:	18800315 	stw	r2,12(r3)
   4780c:	003f2306 	br	4749c <_realloc_r+0x84>
   47810:	8809883a 	mov	r4,r17
   47814:	900b883a 	mov	r5,r18
   47818:	00462140 	call	46214 <memmove>
   4781c:	003fd006 	br	47760 <_realloc_r+0x348>
   47820:	30800117 	ldw	r2,4(r6)
   47824:	e0c00404 	addi	r3,fp,16
   47828:	1108703a 	and	r4,r2,r4
   4782c:	9905883a 	add	r2,r19,r4
   47830:	10ff4d16 	blt	r2,r3,47568 <_realloc_r+0x150>
   47834:	1705c83a 	sub	r2,r2,fp
   47838:	870b883a 	add	r5,r16,fp
   4783c:	10800054 	ori	r2,r2,1
   47840:	28800115 	stw	r2,4(r5)
   47844:	80c00117 	ldw	r3,4(r16)
   47848:	00800174 	movhi	r2,5
   4784c:	10b70104 	addi	r2,r2,-9212
   47850:	b009883a 	mov	r4,r22
   47854:	18c0004c 	andi	r3,r3,1
   47858:	e0c6b03a 	or	r3,fp,r3
   4785c:	11400215 	stw	r5,8(r2)
   47860:	80c00115 	stw	r3,4(r16)
   47864:	004b0440 	call	4b044 <__malloc_unlock>
   47868:	84400204 	addi	r17,r16,8
   4786c:	003f2006 	br	474f0 <_realloc_r+0xd8>
   47870:	98a9883a 	add	r20,r19,r2
   47874:	2509883a 	add	r4,r4,r20
   47878:	e0800404 	addi	r2,fp,16
   4787c:	d9000115 	stw	r4,4(sp)
   47880:	20bf7016 	blt	r4,r2,47644 <_realloc_r+0x22c>
   47884:	b8c00317 	ldw	r3,12(r23)
   47888:	b8800217 	ldw	r2,8(r23)
   4788c:	99bfff04 	addi	r6,r19,-4
   47890:	01400904 	movi	r5,36
   47894:	18800215 	stw	r2,8(r3)
   47898:	10c00315 	stw	r3,12(r2)
   4789c:	bc400204 	addi	r17,r23,8
   478a0:	29804136 	bltu	r5,r6,479a8 <_realloc_r+0x590>
   478a4:	008004c4 	movi	r2,19
   478a8:	9009883a 	mov	r4,r18
   478ac:	880f883a 	mov	r7,r17
   478b0:	11800f2e 	bgeu	r2,r6,478f0 <_realloc_r+0x4d8>
   478b4:	90800017 	ldw	r2,0(r18)
   478b8:	b9c00404 	addi	r7,r23,16
   478bc:	91000204 	addi	r4,r18,8
   478c0:	b8800215 	stw	r2,8(r23)
   478c4:	90c00117 	ldw	r3,4(r18)
   478c8:	008006c4 	movi	r2,27
   478cc:	b8c00315 	stw	r3,12(r23)
   478d0:	1180072e 	bgeu	r2,r6,478f0 <_realloc_r+0x4d8>
   478d4:	90c00217 	ldw	r3,8(r18)
   478d8:	b9c00604 	addi	r7,r23,24
   478dc:	91000404 	addi	r4,r18,16
   478e0:	b8c00415 	stw	r3,16(r23)
   478e4:	90800317 	ldw	r2,12(r18)
   478e8:	b8800515 	stw	r2,20(r23)
   478ec:	31404026 	beq	r6,r5,479f0 <_realloc_r+0x5d8>
   478f0:	20800017 	ldw	r2,0(r4)
   478f4:	38800015 	stw	r2,0(r7)
   478f8:	20c00117 	ldw	r3,4(r4)
   478fc:	38c00115 	stw	r3,4(r7)
   47900:	20800217 	ldw	r2,8(r4)
   47904:	38800215 	stw	r2,8(r7)
   47908:	d8c00117 	ldw	r3,4(sp)
   4790c:	bf0b883a 	add	r5,r23,fp
   47910:	b009883a 	mov	r4,r22
   47914:	1f05c83a 	sub	r2,r3,fp
   47918:	10800054 	ori	r2,r2,1
   4791c:	28800115 	stw	r2,4(r5)
   47920:	b8c00117 	ldw	r3,4(r23)
   47924:	00800174 	movhi	r2,5
   47928:	10b70104 	addi	r2,r2,-9212
   4792c:	11400215 	stw	r5,8(r2)
   47930:	18c0004c 	andi	r3,r3,1
   47934:	e0c6b03a 	or	r3,fp,r3
   47938:	b8c00115 	stw	r3,4(r23)
   4793c:	004b0440 	call	4b044 <__malloc_unlock>
   47940:	003eeb06 	br	474f0 <_realloc_r+0xd8>
   47944:	20800117 	ldw	r2,4(r4)
   47948:	00ffff04 	movi	r3,-4
   4794c:	800f883a 	mov	r7,r16
   47950:	10c4703a 	and	r2,r2,r3
   47954:	98a9883a 	add	r20,r19,r2
   47958:	84000204 	addi	r16,r16,8
   4795c:	003ecf06 	br	4749c <_realloc_r+0x84>
   47960:	900b883a 	mov	r5,r18
   47964:	8009883a 	mov	r4,r16
   47968:	00462140 	call	46214 <memmove>
   4796c:	dd000017 	ldw	r20,0(sp)
   47970:	b80f883a 	mov	r7,r23
   47974:	003ec906 	br	4749c <_realloc_r+0x84>
   47978:	900b883a 	mov	r5,r18
   4797c:	8009883a 	mov	r4,r16
   47980:	00462140 	call	46214 <memmove>
   47984:	b80f883a 	mov	r7,r23
   47988:	003ec406 	br	4749c <_realloc_r+0x84>
   4798c:	90c00417 	ldw	r3,16(r18)
   47990:	89400604 	addi	r5,r17,24
   47994:	91000604 	addi	r4,r18,24
   47998:	88c00415 	stw	r3,16(r17)
   4799c:	90800517 	ldw	r2,20(r18)
   479a0:	88800515 	stw	r2,20(r17)
   479a4:	003f6806 	br	47748 <_realloc_r+0x330>
   479a8:	900b883a 	mov	r5,r18
   479ac:	8809883a 	mov	r4,r17
   479b0:	00462140 	call	46214 <memmove>
   479b4:	003fd406 	br	47908 <_realloc_r+0x4f0>
   479b8:	90c00417 	ldw	r3,16(r18)
   479bc:	91000604 	addi	r4,r18,24
   479c0:	ba000804 	addi	r8,r23,32
   479c4:	b8c00615 	stw	r3,24(r23)
   479c8:	90800517 	ldw	r2,20(r18)
   479cc:	b8800715 	stw	r2,28(r23)
   479d0:	003f1206 	br	4761c <_realloc_r+0x204>
   479d4:	90c00417 	ldw	r3,16(r18)
   479d8:	91000604 	addi	r4,r18,24
   479dc:	ba000804 	addi	r8,r23,32
   479e0:	b8c00615 	stw	r3,24(r23)
   479e4:	90800517 	ldw	r2,20(r18)
   479e8:	b8800715 	stw	r2,28(r23)
   479ec:	003f3206 	br	476b8 <_realloc_r+0x2a0>
   479f0:	90c00417 	ldw	r3,16(r18)
   479f4:	91000604 	addi	r4,r18,24
   479f8:	b9c00804 	addi	r7,r23,32
   479fc:	b8c00615 	stw	r3,24(r23)
   47a00:	90800517 	ldw	r2,20(r18)
   47a04:	b8800715 	stw	r2,28(r23)
   47a08:	003fb906 	br	478f0 <_realloc_r+0x4d8>

00047a0c <__isinfd>:
   47a0c:	200d883a 	mov	r6,r4
   47a10:	0109c83a 	sub	r4,zero,r4
   47a14:	2188b03a 	or	r4,r4,r6
   47a18:	2008d7fa 	srli	r4,r4,31
   47a1c:	00a00034 	movhi	r2,32768
   47a20:	10bfffc4 	addi	r2,r2,-1
   47a24:	1144703a 	and	r2,r2,r5
   47a28:	2088b03a 	or	r4,r4,r2
   47a2c:	009ffc34 	movhi	r2,32752
   47a30:	1105c83a 	sub	r2,r2,r4
   47a34:	0087c83a 	sub	r3,zero,r2
   47a38:	10c4b03a 	or	r2,r2,r3
   47a3c:	1004d7fa 	srli	r2,r2,31
   47a40:	00c00044 	movi	r3,1
   47a44:	1885c83a 	sub	r2,r3,r2
   47a48:	f800283a 	ret

00047a4c <__isnand>:
   47a4c:	200d883a 	mov	r6,r4
   47a50:	0109c83a 	sub	r4,zero,r4
   47a54:	2188b03a 	or	r4,r4,r6
   47a58:	2008d7fa 	srli	r4,r4,31
   47a5c:	00a00034 	movhi	r2,32768
   47a60:	10bfffc4 	addi	r2,r2,-1
   47a64:	1144703a 	and	r2,r2,r5
   47a68:	2088b03a 	or	r4,r4,r2
   47a6c:	009ffc34 	movhi	r2,32752
   47a70:	1105c83a 	sub	r2,r2,r4
   47a74:	1004d7fa 	srli	r2,r2,31
   47a78:	f800283a 	ret

00047a7c <_sbrk_r>:
   47a7c:	defffd04 	addi	sp,sp,-12
   47a80:	dc000015 	stw	r16,0(sp)
   47a84:	04000174 	movhi	r16,5
   47a88:	84033204 	addi	r16,r16,3272
   47a8c:	dc400115 	stw	r17,4(sp)
   47a90:	80000015 	stw	zero,0(r16)
   47a94:	2023883a 	mov	r17,r4
   47a98:	2809883a 	mov	r4,r5
   47a9c:	dfc00215 	stw	ra,8(sp)
   47aa0:	004b2600 	call	4b260 <sbrk>
   47aa4:	1007883a 	mov	r3,r2
   47aa8:	00bfffc4 	movi	r2,-1
   47aac:	18800626 	beq	r3,r2,47ac8 <_sbrk_r+0x4c>
   47ab0:	1805883a 	mov	r2,r3
   47ab4:	dfc00217 	ldw	ra,8(sp)
   47ab8:	dc400117 	ldw	r17,4(sp)
   47abc:	dc000017 	ldw	r16,0(sp)
   47ac0:	dec00304 	addi	sp,sp,12
   47ac4:	f800283a 	ret
   47ac8:	80800017 	ldw	r2,0(r16)
   47acc:	103ff826 	beq	r2,zero,47ab0 <_sbrk_r+0x34>
   47ad0:	88800015 	stw	r2,0(r17)
   47ad4:	1805883a 	mov	r2,r3
   47ad8:	dfc00217 	ldw	ra,8(sp)
   47adc:	dc400117 	ldw	r17,4(sp)
   47ae0:	dc000017 	ldw	r16,0(sp)
   47ae4:	dec00304 	addi	sp,sp,12
   47ae8:	f800283a 	ret

00047aec <__sclose>:
   47aec:	2940038f 	ldh	r5,14(r5)
   47af0:	0047e341 	jmpi	47e34 <_close_r>

00047af4 <__sseek>:
   47af4:	defffe04 	addi	sp,sp,-8
   47af8:	dc000015 	stw	r16,0(sp)
   47afc:	2821883a 	mov	r16,r5
   47b00:	2940038f 	ldh	r5,14(r5)
   47b04:	dfc00115 	stw	ra,4(sp)
   47b08:	00480ac0 	call	480ac <_lseek_r>
   47b0c:	1007883a 	mov	r3,r2
   47b10:	00bfffc4 	movi	r2,-1
   47b14:	18800926 	beq	r3,r2,47b3c <__sseek+0x48>
   47b18:	8080030b 	ldhu	r2,12(r16)
   47b1c:	80c01415 	stw	r3,80(r16)
   47b20:	10840014 	ori	r2,r2,4096
   47b24:	8080030d 	sth	r2,12(r16)
   47b28:	1805883a 	mov	r2,r3
   47b2c:	dfc00117 	ldw	ra,4(sp)
   47b30:	dc000017 	ldw	r16,0(sp)
   47b34:	dec00204 	addi	sp,sp,8
   47b38:	f800283a 	ret
   47b3c:	8080030b 	ldhu	r2,12(r16)
   47b40:	10bbffcc 	andi	r2,r2,61439
   47b44:	8080030d 	sth	r2,12(r16)
   47b48:	1805883a 	mov	r2,r3
   47b4c:	dfc00117 	ldw	ra,4(sp)
   47b50:	dc000017 	ldw	r16,0(sp)
   47b54:	dec00204 	addi	sp,sp,8
   47b58:	f800283a 	ret

00047b5c <__swrite>:
   47b5c:	2880030b 	ldhu	r2,12(r5)
   47b60:	defffb04 	addi	sp,sp,-20
   47b64:	dcc00315 	stw	r19,12(sp)
   47b68:	1080400c 	andi	r2,r2,256
   47b6c:	dc800215 	stw	r18,8(sp)
   47b70:	dc400115 	stw	r17,4(sp)
   47b74:	dc000015 	stw	r16,0(sp)
   47b78:	3027883a 	mov	r19,r6
   47b7c:	3825883a 	mov	r18,r7
   47b80:	dfc00415 	stw	ra,16(sp)
   47b84:	2821883a 	mov	r16,r5
   47b88:	000d883a 	mov	r6,zero
   47b8c:	01c00084 	movi	r7,2
   47b90:	2023883a 	mov	r17,r4
   47b94:	10000226 	beq	r2,zero,47ba0 <__swrite+0x44>
   47b98:	2940038f 	ldh	r5,14(r5)
   47b9c:	00480ac0 	call	480ac <_lseek_r>
   47ba0:	8080030b 	ldhu	r2,12(r16)
   47ba4:	8140038f 	ldh	r5,14(r16)
   47ba8:	8809883a 	mov	r4,r17
   47bac:	10bbffcc 	andi	r2,r2,61439
   47bb0:	980d883a 	mov	r6,r19
   47bb4:	900f883a 	mov	r7,r18
   47bb8:	8080030d 	sth	r2,12(r16)
   47bbc:	dfc00417 	ldw	ra,16(sp)
   47bc0:	dcc00317 	ldw	r19,12(sp)
   47bc4:	dc800217 	ldw	r18,8(sp)
   47bc8:	dc400117 	ldw	r17,4(sp)
   47bcc:	dc000017 	ldw	r16,0(sp)
   47bd0:	dec00504 	addi	sp,sp,20
   47bd4:	0047cf41 	jmpi	47cf4 <_write_r>

00047bd8 <__sread>:
   47bd8:	defffe04 	addi	sp,sp,-8
   47bdc:	dc000015 	stw	r16,0(sp)
   47be0:	2821883a 	mov	r16,r5
   47be4:	2940038f 	ldh	r5,14(r5)
   47be8:	dfc00115 	stw	ra,4(sp)
   47bec:	00481240 	call	48124 <_read_r>
   47bf0:	1007883a 	mov	r3,r2
   47bf4:	10000816 	blt	r2,zero,47c18 <__sread+0x40>
   47bf8:	80801417 	ldw	r2,80(r16)
   47bfc:	10c5883a 	add	r2,r2,r3
   47c00:	80801415 	stw	r2,80(r16)
   47c04:	1805883a 	mov	r2,r3
   47c08:	dfc00117 	ldw	ra,4(sp)
   47c0c:	dc000017 	ldw	r16,0(sp)
   47c10:	dec00204 	addi	sp,sp,8
   47c14:	f800283a 	ret
   47c18:	8080030b 	ldhu	r2,12(r16)
   47c1c:	10bbffcc 	andi	r2,r2,61439
   47c20:	8080030d 	sth	r2,12(r16)
   47c24:	1805883a 	mov	r2,r3
   47c28:	dfc00117 	ldw	ra,4(sp)
   47c2c:	dc000017 	ldw	r16,0(sp)
   47c30:	dec00204 	addi	sp,sp,8
   47c34:	f800283a 	ret

00047c38 <strcmp>:
   47c38:	2144b03a 	or	r2,r4,r5
   47c3c:	108000cc 	andi	r2,r2,3
   47c40:	10001d1e 	bne	r2,zero,47cb8 <strcmp+0x80>
   47c44:	200f883a 	mov	r7,r4
   47c48:	28800017 	ldw	r2,0(r5)
   47c4c:	21000017 	ldw	r4,0(r4)
   47c50:	280d883a 	mov	r6,r5
   47c54:	2080161e 	bne	r4,r2,47cb0 <strcmp+0x78>
   47c58:	023fbff4 	movhi	r8,65279
   47c5c:	423fbfc4 	addi	r8,r8,-257
   47c60:	2207883a 	add	r3,r4,r8
   47c64:	01602074 	movhi	r5,32897
   47c68:	29602004 	addi	r5,r5,-32640
   47c6c:	1946703a 	and	r3,r3,r5
   47c70:	0104303a 	nor	r2,zero,r4
   47c74:	10c4703a 	and	r2,r2,r3
   47c78:	10001c1e 	bne	r2,zero,47cec <strcmp+0xb4>
   47c7c:	4013883a 	mov	r9,r8
   47c80:	2811883a 	mov	r8,r5
   47c84:	00000106 	br	47c8c <strcmp+0x54>
   47c88:	1800181e 	bne	r3,zero,47cec <strcmp+0xb4>
   47c8c:	39c00104 	addi	r7,r7,4
   47c90:	39000017 	ldw	r4,0(r7)
   47c94:	31800104 	addi	r6,r6,4
   47c98:	31400017 	ldw	r5,0(r6)
   47c9c:	2245883a 	add	r2,r4,r9
   47ca0:	1204703a 	and	r2,r2,r8
   47ca4:	0106303a 	nor	r3,zero,r4
   47ca8:	1886703a 	and	r3,r3,r2
   47cac:	217ff626 	beq	r4,r5,47c88 <strcmp+0x50>
   47cb0:	3809883a 	mov	r4,r7
   47cb4:	300b883a 	mov	r5,r6
   47cb8:	20c00007 	ldb	r3,0(r4)
   47cbc:	1800051e 	bne	r3,zero,47cd4 <strcmp+0x9c>
   47cc0:	00000606 	br	47cdc <strcmp+0xa4>
   47cc4:	21000044 	addi	r4,r4,1
   47cc8:	20c00007 	ldb	r3,0(r4)
   47ccc:	29400044 	addi	r5,r5,1
   47cd0:	18000226 	beq	r3,zero,47cdc <strcmp+0xa4>
   47cd4:	28800007 	ldb	r2,0(r5)
   47cd8:	18bffa26 	beq	r3,r2,47cc4 <strcmp+0x8c>
   47cdc:	20c00003 	ldbu	r3,0(r4)
   47ce0:	28800003 	ldbu	r2,0(r5)
   47ce4:	1885c83a 	sub	r2,r3,r2
   47ce8:	f800283a 	ret
   47cec:	0005883a 	mov	r2,zero
   47cf0:	f800283a 	ret

00047cf4 <_write_r>:
   47cf4:	defffd04 	addi	sp,sp,-12
   47cf8:	dc000015 	stw	r16,0(sp)
   47cfc:	04000174 	movhi	r16,5
   47d00:	84033204 	addi	r16,r16,3272
   47d04:	dc400115 	stw	r17,4(sp)
   47d08:	80000015 	stw	zero,0(r16)
   47d0c:	2023883a 	mov	r17,r4
   47d10:	2809883a 	mov	r4,r5
   47d14:	300b883a 	mov	r5,r6
   47d18:	380d883a 	mov	r6,r7
   47d1c:	dfc00215 	stw	ra,8(sp)
   47d20:	004b31c0 	call	4b31c <write>
   47d24:	1007883a 	mov	r3,r2
   47d28:	00bfffc4 	movi	r2,-1
   47d2c:	18800626 	beq	r3,r2,47d48 <_write_r+0x54>
   47d30:	1805883a 	mov	r2,r3
   47d34:	dfc00217 	ldw	ra,8(sp)
   47d38:	dc400117 	ldw	r17,4(sp)
   47d3c:	dc000017 	ldw	r16,0(sp)
   47d40:	dec00304 	addi	sp,sp,12
   47d44:	f800283a 	ret
   47d48:	80800017 	ldw	r2,0(r16)
   47d4c:	103ff826 	beq	r2,zero,47d30 <_write_r+0x3c>
   47d50:	88800015 	stw	r2,0(r17)
   47d54:	1805883a 	mov	r2,r3
   47d58:	dfc00217 	ldw	ra,8(sp)
   47d5c:	dc400117 	ldw	r17,4(sp)
   47d60:	dc000017 	ldw	r16,0(sp)
   47d64:	dec00304 	addi	sp,sp,12
   47d68:	f800283a 	ret

00047d6c <_calloc_r>:
   47d6c:	defffe04 	addi	sp,sp,-8
   47d70:	dc400015 	stw	r17,0(sp)
   47d74:	2023883a 	mov	r17,r4
   47d78:	2809883a 	mov	r4,r5
   47d7c:	300b883a 	mov	r5,r6
   47d80:	dfc00115 	stw	ra,4(sp)
   47d84:	004a0e00 	call	4a0e0 <__mulsi3>
   47d88:	100b883a 	mov	r5,r2
   47d8c:	8809883a 	mov	r4,r17
   47d90:	00459500 	call	45950 <_malloc_r>
   47d94:	1023883a 	mov	r17,r2
   47d98:	01c00904 	movi	r7,36
   47d9c:	10000d26 	beq	r2,zero,47dd4 <_calloc_r+0x68>
   47da0:	10ffff17 	ldw	r3,-4(r2)
   47da4:	1009883a 	mov	r4,r2
   47da8:	00bfff04 	movi	r2,-4
   47dac:	1886703a 	and	r3,r3,r2
   47db0:	1887883a 	add	r3,r3,r2
   47db4:	180d883a 	mov	r6,r3
   47db8:	000b883a 	mov	r5,zero
   47dbc:	38c01736 	bltu	r7,r3,47e1c <_calloc_r+0xb0>
   47dc0:	008004c4 	movi	r2,19
   47dc4:	10c00836 	bltu	r2,r3,47de8 <_calloc_r+0x7c>
   47dc8:	20000215 	stw	zero,8(r4)
   47dcc:	20000015 	stw	zero,0(r4)
   47dd0:	20000115 	stw	zero,4(r4)
   47dd4:	8805883a 	mov	r2,r17
   47dd8:	dfc00117 	ldw	ra,4(sp)
   47ddc:	dc400017 	ldw	r17,0(sp)
   47de0:	dec00204 	addi	sp,sp,8
   47de4:	f800283a 	ret
   47de8:	008006c4 	movi	r2,27
   47dec:	88000015 	stw	zero,0(r17)
   47df0:	88000115 	stw	zero,4(r17)
   47df4:	89000204 	addi	r4,r17,8
   47df8:	10fff32e 	bgeu	r2,r3,47dc8 <_calloc_r+0x5c>
   47dfc:	88000215 	stw	zero,8(r17)
   47e00:	88000315 	stw	zero,12(r17)
   47e04:	89000404 	addi	r4,r17,16
   47e08:	19ffef1e 	bne	r3,r7,47dc8 <_calloc_r+0x5c>
   47e0c:	89000604 	addi	r4,r17,24
   47e10:	88000415 	stw	zero,16(r17)
   47e14:	88000515 	stw	zero,20(r17)
   47e18:	003feb06 	br	47dc8 <_calloc_r+0x5c>
   47e1c:	00462f40 	call	462f4 <memset>
   47e20:	8805883a 	mov	r2,r17
   47e24:	dfc00117 	ldw	ra,4(sp)
   47e28:	dc400017 	ldw	r17,0(sp)
   47e2c:	dec00204 	addi	sp,sp,8
   47e30:	f800283a 	ret

00047e34 <_close_r>:
   47e34:	defffd04 	addi	sp,sp,-12
   47e38:	dc000015 	stw	r16,0(sp)
   47e3c:	04000174 	movhi	r16,5
   47e40:	84033204 	addi	r16,r16,3272
   47e44:	dc400115 	stw	r17,4(sp)
   47e48:	80000015 	stw	zero,0(r16)
   47e4c:	2023883a 	mov	r17,r4
   47e50:	2809883a 	mov	r4,r5
   47e54:	dfc00215 	stw	ra,8(sp)
   47e58:	004a7d00 	call	4a7d0 <close>
   47e5c:	1007883a 	mov	r3,r2
   47e60:	00bfffc4 	movi	r2,-1
   47e64:	18800626 	beq	r3,r2,47e80 <_close_r+0x4c>
   47e68:	1805883a 	mov	r2,r3
   47e6c:	dfc00217 	ldw	ra,8(sp)
   47e70:	dc400117 	ldw	r17,4(sp)
   47e74:	dc000017 	ldw	r16,0(sp)
   47e78:	dec00304 	addi	sp,sp,12
   47e7c:	f800283a 	ret
   47e80:	80800017 	ldw	r2,0(r16)
   47e84:	103ff826 	beq	r2,zero,47e68 <_close_r+0x34>
   47e88:	88800015 	stw	r2,0(r17)
   47e8c:	1805883a 	mov	r2,r3
   47e90:	dfc00217 	ldw	ra,8(sp)
   47e94:	dc400117 	ldw	r17,4(sp)
   47e98:	dc000017 	ldw	r16,0(sp)
   47e9c:	dec00304 	addi	sp,sp,12
   47ea0:	f800283a 	ret

00047ea4 <_fclose_r>:
   47ea4:	defffc04 	addi	sp,sp,-16
   47ea8:	dc400115 	stw	r17,4(sp)
   47eac:	dc000015 	stw	r16,0(sp)
   47eb0:	dfc00315 	stw	ra,12(sp)
   47eb4:	dc800215 	stw	r18,8(sp)
   47eb8:	2821883a 	mov	r16,r5
   47ebc:	2023883a 	mov	r17,r4
   47ec0:	28002926 	beq	r5,zero,47f68 <_fclose_r+0xc4>
   47ec4:	0044a000 	call	44a00 <__sfp_lock_acquire>
   47ec8:	88000226 	beq	r17,zero,47ed4 <_fclose_r+0x30>
   47ecc:	88800e17 	ldw	r2,56(r17)
   47ed0:	10002d26 	beq	r2,zero,47f88 <_fclose_r+0xe4>
   47ed4:	8080030f 	ldh	r2,12(r16)
   47ed8:	10002226 	beq	r2,zero,47f64 <_fclose_r+0xc0>
   47edc:	8809883a 	mov	r4,r17
   47ee0:	800b883a 	mov	r5,r16
   47ee4:	00447780 	call	44778 <_fflush_r>
   47ee8:	1025883a 	mov	r18,r2
   47eec:	80800b17 	ldw	r2,44(r16)
   47ef0:	10000426 	beq	r2,zero,47f04 <_fclose_r+0x60>
   47ef4:	81400717 	ldw	r5,28(r16)
   47ef8:	8809883a 	mov	r4,r17
   47efc:	103ee83a 	callr	r2
   47f00:	10002a16 	blt	r2,zero,47fac <_fclose_r+0x108>
   47f04:	8080030b 	ldhu	r2,12(r16)
   47f08:	1080200c 	andi	r2,r2,128
   47f0c:	1000231e 	bne	r2,zero,47f9c <_fclose_r+0xf8>
   47f10:	81400c17 	ldw	r5,48(r16)
   47f14:	28000526 	beq	r5,zero,47f2c <_fclose_r+0x88>
   47f18:	80801004 	addi	r2,r16,64
   47f1c:	28800226 	beq	r5,r2,47f28 <_fclose_r+0x84>
   47f20:	8809883a 	mov	r4,r17
   47f24:	0044dc80 	call	44dc8 <_free_r>
   47f28:	80000c15 	stw	zero,48(r16)
   47f2c:	81401117 	ldw	r5,68(r16)
   47f30:	28000326 	beq	r5,zero,47f40 <_fclose_r+0x9c>
   47f34:	8809883a 	mov	r4,r17
   47f38:	0044dc80 	call	44dc8 <_free_r>
   47f3c:	80001115 	stw	zero,68(r16)
   47f40:	8000030d 	sth	zero,12(r16)
   47f44:	0044a040 	call	44a04 <__sfp_lock_release>
   47f48:	9005883a 	mov	r2,r18
   47f4c:	dfc00317 	ldw	ra,12(sp)
   47f50:	dc800217 	ldw	r18,8(sp)
   47f54:	dc400117 	ldw	r17,4(sp)
   47f58:	dc000017 	ldw	r16,0(sp)
   47f5c:	dec00404 	addi	sp,sp,16
   47f60:	f800283a 	ret
   47f64:	0044a040 	call	44a04 <__sfp_lock_release>
   47f68:	0025883a 	mov	r18,zero
   47f6c:	9005883a 	mov	r2,r18
   47f70:	dfc00317 	ldw	ra,12(sp)
   47f74:	dc800217 	ldw	r18,8(sp)
   47f78:	dc400117 	ldw	r17,4(sp)
   47f7c:	dc000017 	ldw	r16,0(sp)
   47f80:	dec00404 	addi	sp,sp,16
   47f84:	f800283a 	ret
   47f88:	8809883a 	mov	r4,r17
   47f8c:	0044a100 	call	44a10 <__sinit>
   47f90:	8080030f 	ldh	r2,12(r16)
   47f94:	103fd11e 	bne	r2,zero,47edc <_fclose_r+0x38>
   47f98:	003ff206 	br	47f64 <_fclose_r+0xc0>
   47f9c:	81400417 	ldw	r5,16(r16)
   47fa0:	8809883a 	mov	r4,r17
   47fa4:	0044dc80 	call	44dc8 <_free_r>
   47fa8:	003fd906 	br	47f10 <_fclose_r+0x6c>
   47fac:	04bfffc4 	movi	r18,-1
   47fb0:	003fd406 	br	47f04 <_fclose_r+0x60>

00047fb4 <fclose>:
   47fb4:	00800174 	movhi	r2,5
   47fb8:	10bc8504 	addi	r2,r2,-3564
   47fbc:	200b883a 	mov	r5,r4
   47fc0:	11000017 	ldw	r4,0(r2)
   47fc4:	0047ea41 	jmpi	47ea4 <_fclose_r>

00047fc8 <_fstat_r>:
   47fc8:	defffd04 	addi	sp,sp,-12
   47fcc:	dc000015 	stw	r16,0(sp)
   47fd0:	04000174 	movhi	r16,5
   47fd4:	84033204 	addi	r16,r16,3272
   47fd8:	dc400115 	stw	r17,4(sp)
   47fdc:	80000015 	stw	zero,0(r16)
   47fe0:	2023883a 	mov	r17,r4
   47fe4:	2809883a 	mov	r4,r5
   47fe8:	300b883a 	mov	r5,r6
   47fec:	dfc00215 	stw	ra,8(sp)
   47ff0:	004a95c0 	call	4a95c <fstat>
   47ff4:	1007883a 	mov	r3,r2
   47ff8:	00bfffc4 	movi	r2,-1
   47ffc:	18800626 	beq	r3,r2,48018 <_fstat_r+0x50>
   48000:	1805883a 	mov	r2,r3
   48004:	dfc00217 	ldw	ra,8(sp)
   48008:	dc400117 	ldw	r17,4(sp)
   4800c:	dc000017 	ldw	r16,0(sp)
   48010:	dec00304 	addi	sp,sp,12
   48014:	f800283a 	ret
   48018:	80800017 	ldw	r2,0(r16)
   4801c:	103ff826 	beq	r2,zero,48000 <_fstat_r+0x38>
   48020:	88800015 	stw	r2,0(r17)
   48024:	1805883a 	mov	r2,r3
   48028:	dfc00217 	ldw	ra,8(sp)
   4802c:	dc400117 	ldw	r17,4(sp)
   48030:	dc000017 	ldw	r16,0(sp)
   48034:	dec00304 	addi	sp,sp,12
   48038:	f800283a 	ret

0004803c <_isatty_r>:
   4803c:	defffd04 	addi	sp,sp,-12
   48040:	dc000015 	stw	r16,0(sp)
   48044:	04000174 	movhi	r16,5
   48048:	84033204 	addi	r16,r16,3272
   4804c:	dc400115 	stw	r17,4(sp)
   48050:	80000015 	stw	zero,0(r16)
   48054:	2023883a 	mov	r17,r4
   48058:	2809883a 	mov	r4,r5
   4805c:	dfc00215 	stw	ra,8(sp)
   48060:	004ac540 	call	4ac54 <isatty>
   48064:	1007883a 	mov	r3,r2
   48068:	00bfffc4 	movi	r2,-1
   4806c:	18800626 	beq	r3,r2,48088 <_isatty_r+0x4c>
   48070:	1805883a 	mov	r2,r3
   48074:	dfc00217 	ldw	ra,8(sp)
   48078:	dc400117 	ldw	r17,4(sp)
   4807c:	dc000017 	ldw	r16,0(sp)
   48080:	dec00304 	addi	sp,sp,12
   48084:	f800283a 	ret
   48088:	80800017 	ldw	r2,0(r16)
   4808c:	103ff826 	beq	r2,zero,48070 <_isatty_r+0x34>
   48090:	88800015 	stw	r2,0(r17)
   48094:	1805883a 	mov	r2,r3
   48098:	dfc00217 	ldw	ra,8(sp)
   4809c:	dc400117 	ldw	r17,4(sp)
   480a0:	dc000017 	ldw	r16,0(sp)
   480a4:	dec00304 	addi	sp,sp,12
   480a8:	f800283a 	ret

000480ac <_lseek_r>:
   480ac:	defffd04 	addi	sp,sp,-12
   480b0:	dc000015 	stw	r16,0(sp)
   480b4:	04000174 	movhi	r16,5
   480b8:	84033204 	addi	r16,r16,3272
   480bc:	dc400115 	stw	r17,4(sp)
   480c0:	80000015 	stw	zero,0(r16)
   480c4:	2023883a 	mov	r17,r4
   480c8:	2809883a 	mov	r4,r5
   480cc:	300b883a 	mov	r5,r6
   480d0:	380d883a 	mov	r6,r7
   480d4:	dfc00215 	stw	ra,8(sp)
   480d8:	004ae640 	call	4ae64 <lseek>
   480dc:	1007883a 	mov	r3,r2
   480e0:	00bfffc4 	movi	r2,-1
   480e4:	18800626 	beq	r3,r2,48100 <_lseek_r+0x54>
   480e8:	1805883a 	mov	r2,r3
   480ec:	dfc00217 	ldw	ra,8(sp)
   480f0:	dc400117 	ldw	r17,4(sp)
   480f4:	dc000017 	ldw	r16,0(sp)
   480f8:	dec00304 	addi	sp,sp,12
   480fc:	f800283a 	ret
   48100:	80800017 	ldw	r2,0(r16)
   48104:	103ff826 	beq	r2,zero,480e8 <_lseek_r+0x3c>
   48108:	88800015 	stw	r2,0(r17)
   4810c:	1805883a 	mov	r2,r3
   48110:	dfc00217 	ldw	ra,8(sp)
   48114:	dc400117 	ldw	r17,4(sp)
   48118:	dc000017 	ldw	r16,0(sp)
   4811c:	dec00304 	addi	sp,sp,12
   48120:	f800283a 	ret

00048124 <_read_r>:
   48124:	defffd04 	addi	sp,sp,-12
   48128:	dc000015 	stw	r16,0(sp)
   4812c:	04000174 	movhi	r16,5
   48130:	84033204 	addi	r16,r16,3272
   48134:	dc400115 	stw	r17,4(sp)
   48138:	80000015 	stw	zero,0(r16)
   4813c:	2023883a 	mov	r17,r4
   48140:	2809883a 	mov	r4,r5
   48144:	300b883a 	mov	r5,r6
   48148:	380d883a 	mov	r6,r7
   4814c:	dfc00215 	stw	ra,8(sp)
   48150:	004b0640 	call	4b064 <read>
   48154:	1007883a 	mov	r3,r2
   48158:	00bfffc4 	movi	r2,-1
   4815c:	18800626 	beq	r3,r2,48178 <_read_r+0x54>
   48160:	1805883a 	mov	r2,r3
   48164:	dfc00217 	ldw	ra,8(sp)
   48168:	dc400117 	ldw	r17,4(sp)
   4816c:	dc000017 	ldw	r16,0(sp)
   48170:	dec00304 	addi	sp,sp,12
   48174:	f800283a 	ret
   48178:	80800017 	ldw	r2,0(r16)
   4817c:	103ff826 	beq	r2,zero,48160 <_read_r+0x3c>
   48180:	88800015 	stw	r2,0(r17)
   48184:	1805883a 	mov	r2,r3
   48188:	dfc00217 	ldw	ra,8(sp)
   4818c:	dc400117 	ldw	r17,4(sp)
   48190:	dc000017 	ldw	r16,0(sp)
   48194:	dec00304 	addi	sp,sp,12
   48198:	f800283a 	ret

0004819c <__udivdi3>:
   4819c:	defff104 	addi	sp,sp,-60
   481a0:	0015883a 	mov	r10,zero
   481a4:	2005883a 	mov	r2,r4
   481a8:	3011883a 	mov	r8,r6
   481ac:	df000d15 	stw	fp,52(sp)
   481b0:	dd400a15 	stw	r21,40(sp)
   481b4:	dcc00815 	stw	r19,32(sp)
   481b8:	dfc00e15 	stw	ra,56(sp)
   481bc:	ddc00c15 	stw	r23,48(sp)
   481c0:	dd800b15 	stw	r22,44(sp)
   481c4:	dd000915 	stw	r20,36(sp)
   481c8:	dc800715 	stw	r18,28(sp)
   481cc:	dc400615 	stw	r17,24(sp)
   481d0:	dc000515 	stw	r16,20(sp)
   481d4:	da800315 	stw	r10,12(sp)
   481d8:	4027883a 	mov	r19,r8
   481dc:	1039883a 	mov	fp,r2
   481e0:	282b883a 	mov	r21,r5
   481e4:	da800415 	stw	r10,16(sp)
   481e8:	3800401e 	bne	r7,zero,482ec <__udivdi3+0x150>
   481ec:	2a006536 	bltu	r5,r8,48384 <__udivdi3+0x1e8>
   481f0:	4000b526 	beq	r8,zero,484c8 <__udivdi3+0x32c>
   481f4:	00bfffd4 	movui	r2,65535
   481f8:	14c0ad36 	bltu	r2,r19,484b0 <__udivdi3+0x314>
   481fc:	00803fc4 	movi	r2,255
   48200:	14c15e36 	bltu	r2,r19,4877c <__udivdi3+0x5e0>
   48204:	000b883a 	mov	r5,zero
   48208:	0005883a 	mov	r2,zero
   4820c:	9884d83a 	srl	r2,r19,r2
   48210:	01000174 	movhi	r4,5
   48214:	2135b104 	addi	r4,r4,-10556
   48218:	01800804 	movi	r6,32
   4821c:	1105883a 	add	r2,r2,r4
   48220:	10c00003 	ldbu	r3,0(r2)
   48224:	28c7883a 	add	r3,r5,r3
   48228:	30e9c83a 	sub	r20,r6,r3
   4822c:	a0010a1e 	bne	r20,zero,48658 <__udivdi3+0x4bc>
   48230:	982ed43a 	srli	r23,r19,16
   48234:	acebc83a 	sub	r21,r21,r19
   48238:	9dbfffcc 	andi	r22,r19,65535
   4823c:	05000044 	movi	r20,1
   48240:	a809883a 	mov	r4,r21
   48244:	b80b883a 	mov	r5,r23
   48248:	004a0d00 	call	4a0d0 <__udivsi3>
   4824c:	100b883a 	mov	r5,r2
   48250:	b009883a 	mov	r4,r22
   48254:	1021883a 	mov	r16,r2
   48258:	004a0e00 	call	4a0e0 <__mulsi3>
   4825c:	a809883a 	mov	r4,r21
   48260:	b80b883a 	mov	r5,r23
   48264:	1023883a 	mov	r17,r2
   48268:	004a0d80 	call	4a0d8 <__umodsi3>
   4826c:	1004943a 	slli	r2,r2,16
   48270:	e006d43a 	srli	r3,fp,16
   48274:	10c4b03a 	or	r2,r2,r3
   48278:	1440042e 	bgeu	r2,r17,4828c <__udivdi3+0xf0>
   4827c:	14c5883a 	add	r2,r2,r19
   48280:	843fffc4 	addi	r16,r16,-1
   48284:	14c00136 	bltu	r2,r19,4828c <__udivdi3+0xf0>
   48288:	14415c36 	bltu	r2,r17,487fc <__udivdi3+0x660>
   4828c:	1463c83a 	sub	r17,r2,r17
   48290:	8809883a 	mov	r4,r17
   48294:	b80b883a 	mov	r5,r23
   48298:	004a0d00 	call	4a0d0 <__udivsi3>
   4829c:	100b883a 	mov	r5,r2
   482a0:	b009883a 	mov	r4,r22
   482a4:	102b883a 	mov	r21,r2
   482a8:	004a0e00 	call	4a0e0 <__mulsi3>
   482ac:	8809883a 	mov	r4,r17
   482b0:	b80b883a 	mov	r5,r23
   482b4:	1025883a 	mov	r18,r2
   482b8:	004a0d80 	call	4a0d8 <__umodsi3>
   482bc:	1004943a 	slli	r2,r2,16
   482c0:	e0ffffcc 	andi	r3,fp,65535
   482c4:	10c4b03a 	or	r2,r2,r3
   482c8:	1480042e 	bgeu	r2,r18,482dc <__udivdi3+0x140>
   482cc:	9885883a 	add	r2,r19,r2
   482d0:	ad7fffc4 	addi	r21,r21,-1
   482d4:	14c00136 	bltu	r2,r19,482dc <__udivdi3+0x140>
   482d8:	14813c36 	bltu	r2,r18,487cc <__udivdi3+0x630>
   482dc:	8004943a 	slli	r2,r16,16
   482e0:	a009883a 	mov	r4,r20
   482e4:	a884b03a 	or	r2,r21,r2
   482e8:	00001506 	br	48340 <__udivdi3+0x1a4>
   482ec:	380d883a 	mov	r6,r7
   482f0:	29c06c36 	bltu	r5,r7,484a4 <__udivdi3+0x308>
   482f4:	00bfffd4 	movui	r2,65535
   482f8:	11c06436 	bltu	r2,r7,4848c <__udivdi3+0x2f0>
   482fc:	00803fc4 	movi	r2,255
   48300:	11c11836 	bltu	r2,r7,48764 <__udivdi3+0x5c8>
   48304:	000b883a 	mov	r5,zero
   48308:	0005883a 	mov	r2,zero
   4830c:	3084d83a 	srl	r2,r6,r2
   48310:	01000174 	movhi	r4,5
   48314:	2135b104 	addi	r4,r4,-10556
   48318:	01c00804 	movi	r7,32
   4831c:	1105883a 	add	r2,r2,r4
   48320:	10c00003 	ldbu	r3,0(r2)
   48324:	28c7883a 	add	r3,r5,r3
   48328:	38edc83a 	sub	r22,r7,r3
   4832c:	b000731e 	bne	r22,zero,484fc <__udivdi3+0x360>
   48330:	35400136 	bltu	r6,r21,48338 <__udivdi3+0x19c>
   48334:	e4c05b36 	bltu	fp,r19,484a4 <__udivdi3+0x308>
   48338:	00800044 	movi	r2,1
   4833c:	0009883a 	mov	r4,zero
   48340:	d8800315 	stw	r2,12(sp)
   48344:	d9400317 	ldw	r5,12(sp)
   48348:	2007883a 	mov	r3,r4
   4834c:	d9000415 	stw	r4,16(sp)
   48350:	2805883a 	mov	r2,r5
   48354:	dfc00e17 	ldw	ra,56(sp)
   48358:	df000d17 	ldw	fp,52(sp)
   4835c:	ddc00c17 	ldw	r23,48(sp)
   48360:	dd800b17 	ldw	r22,44(sp)
   48364:	dd400a17 	ldw	r21,40(sp)
   48368:	dd000917 	ldw	r20,36(sp)
   4836c:	dcc00817 	ldw	r19,32(sp)
   48370:	dc800717 	ldw	r18,28(sp)
   48374:	dc400617 	ldw	r17,24(sp)
   48378:	dc000517 	ldw	r16,20(sp)
   4837c:	dec00f04 	addi	sp,sp,60
   48380:	f800283a 	ret
   48384:	00bfffd4 	movui	r2,65535
   48388:	12005636 	bltu	r2,r8,484e4 <__udivdi3+0x348>
   4838c:	00803fc4 	movi	r2,255
   48390:	12010036 	bltu	r2,r8,48794 <__udivdi3+0x5f8>
   48394:	000b883a 	mov	r5,zero
   48398:	0005883a 	mov	r2,zero
   4839c:	9884d83a 	srl	r2,r19,r2
   483a0:	01000174 	movhi	r4,5
   483a4:	2135b104 	addi	r4,r4,-10556
   483a8:	01800804 	movi	r6,32
   483ac:	1105883a 	add	r2,r2,r4
   483b0:	10c00003 	ldbu	r3,0(r2)
   483b4:	28c7883a 	add	r3,r5,r3
   483b8:	30cbc83a 	sub	r5,r6,r3
   483bc:	28000626 	beq	r5,zero,483d8 <__udivdi3+0x23c>
   483c0:	3145c83a 	sub	r2,r6,r5
   483c4:	e084d83a 	srl	r2,fp,r2
   483c8:	a946983a 	sll	r3,r21,r5
   483cc:	e178983a 	sll	fp,fp,r5
   483d0:	9966983a 	sll	r19,r19,r5
   483d4:	18aab03a 	or	r21,r3,r2
   483d8:	982ed43a 	srli	r23,r19,16
   483dc:	a809883a 	mov	r4,r21
   483e0:	9cbfffcc 	andi	r18,r19,65535
   483e4:	b80b883a 	mov	r5,r23
   483e8:	004a0d00 	call	4a0d0 <__udivsi3>
   483ec:	100b883a 	mov	r5,r2
   483f0:	9009883a 	mov	r4,r18
   483f4:	1021883a 	mov	r16,r2
   483f8:	004a0e00 	call	4a0e0 <__mulsi3>
   483fc:	a809883a 	mov	r4,r21
   48400:	b80b883a 	mov	r5,r23
   48404:	1023883a 	mov	r17,r2
   48408:	004a0d80 	call	4a0d8 <__umodsi3>
   4840c:	1004943a 	slli	r2,r2,16
   48410:	e006d43a 	srli	r3,fp,16
   48414:	10c4b03a 	or	r2,r2,r3
   48418:	1440042e 	bgeu	r2,r17,4842c <__udivdi3+0x290>
   4841c:	14c5883a 	add	r2,r2,r19
   48420:	843fffc4 	addi	r16,r16,-1
   48424:	14c00136 	bltu	r2,r19,4842c <__udivdi3+0x290>
   48428:	1440ea36 	bltu	r2,r17,487d4 <__udivdi3+0x638>
   4842c:	1463c83a 	sub	r17,r2,r17
   48430:	8809883a 	mov	r4,r17
   48434:	b80b883a 	mov	r5,r23
   48438:	004a0d00 	call	4a0d0 <__udivsi3>
   4843c:	100b883a 	mov	r5,r2
   48440:	9009883a 	mov	r4,r18
   48444:	102b883a 	mov	r21,r2
   48448:	004a0e00 	call	4a0e0 <__mulsi3>
   4844c:	8809883a 	mov	r4,r17
   48450:	b80b883a 	mov	r5,r23
   48454:	1025883a 	mov	r18,r2
   48458:	004a0d80 	call	4a0d8 <__umodsi3>
   4845c:	1004943a 	slli	r2,r2,16
   48460:	e0ffffcc 	andi	r3,fp,65535
   48464:	10c4b03a 	or	r2,r2,r3
   48468:	1480042e 	bgeu	r2,r18,4847c <__udivdi3+0x2e0>
   4846c:	9885883a 	add	r2,r19,r2
   48470:	ad7fffc4 	addi	r21,r21,-1
   48474:	14c00136 	bltu	r2,r19,4847c <__udivdi3+0x2e0>
   48478:	1480d936 	bltu	r2,r18,487e0 <__udivdi3+0x644>
   4847c:	8004943a 	slli	r2,r16,16
   48480:	0009883a 	mov	r4,zero
   48484:	a884b03a 	or	r2,r21,r2
   48488:	003fad06 	br	48340 <__udivdi3+0x1a4>
   4848c:	00804034 	movhi	r2,256
   48490:	10bfffc4 	addi	r2,r2,-1
   48494:	11c0b636 	bltu	r2,r7,48770 <__udivdi3+0x5d4>
   48498:	01400404 	movi	r5,16
   4849c:	2805883a 	mov	r2,r5
   484a0:	003f9a06 	br	4830c <__udivdi3+0x170>
   484a4:	0005883a 	mov	r2,zero
   484a8:	0009883a 	mov	r4,zero
   484ac:	003fa406 	br	48340 <__udivdi3+0x1a4>
   484b0:	00804034 	movhi	r2,256
   484b4:	10bfffc4 	addi	r2,r2,-1
   484b8:	14c0b336 	bltu	r2,r19,48788 <__udivdi3+0x5ec>
   484bc:	01400404 	movi	r5,16
   484c0:	2805883a 	mov	r2,r5
   484c4:	003f5106 	br	4820c <__udivdi3+0x70>
   484c8:	01000044 	movi	r4,1
   484cc:	000b883a 	mov	r5,zero
   484d0:	004a0d00 	call	4a0d0 <__udivsi3>
   484d4:	1027883a 	mov	r19,r2
   484d8:	00bfffd4 	movui	r2,65535
   484dc:	14fff436 	bltu	r2,r19,484b0 <__udivdi3+0x314>
   484e0:	003f4606 	br	481fc <__udivdi3+0x60>
   484e4:	00804034 	movhi	r2,256
   484e8:	10bfffc4 	addi	r2,r2,-1
   484ec:	1200ac36 	bltu	r2,r8,487a0 <__udivdi3+0x604>
   484f0:	01400404 	movi	r5,16
   484f4:	2805883a 	mov	r2,r5
   484f8:	003fa806 	br	4839c <__udivdi3+0x200>
   484fc:	3d85c83a 	sub	r2,r7,r22
   48500:	3588983a 	sll	r4,r6,r22
   48504:	9886d83a 	srl	r3,r19,r2
   48508:	a8a2d83a 	srl	r17,r21,r2
   4850c:	e084d83a 	srl	r2,fp,r2
   48510:	20eeb03a 	or	r23,r4,r3
   48514:	b824d43a 	srli	r18,r23,16
   48518:	ad86983a 	sll	r3,r21,r22
   4851c:	8809883a 	mov	r4,r17
   48520:	900b883a 	mov	r5,r18
   48524:	1886b03a 	or	r3,r3,r2
   48528:	d8c00115 	stw	r3,4(sp)
   4852c:	bc3fffcc 	andi	r16,r23,65535
   48530:	004a0d00 	call	4a0d0 <__udivsi3>
   48534:	100b883a 	mov	r5,r2
   48538:	8009883a 	mov	r4,r16
   4853c:	1029883a 	mov	r20,r2
   48540:	004a0e00 	call	4a0e0 <__mulsi3>
   48544:	900b883a 	mov	r5,r18
   48548:	8809883a 	mov	r4,r17
   4854c:	102b883a 	mov	r21,r2
   48550:	004a0d80 	call	4a0d8 <__umodsi3>
   48554:	d9400117 	ldw	r5,4(sp)
   48558:	1004943a 	slli	r2,r2,16
   4855c:	9da6983a 	sll	r19,r19,r22
   48560:	2806d43a 	srli	r3,r5,16
   48564:	10c4b03a 	or	r2,r2,r3
   48568:	1540032e 	bgeu	r2,r21,48578 <__udivdi3+0x3dc>
   4856c:	15c5883a 	add	r2,r2,r23
   48570:	a53fffc4 	addi	r20,r20,-1
   48574:	15c0912e 	bgeu	r2,r23,487bc <__udivdi3+0x620>
   48578:	1563c83a 	sub	r17,r2,r21
   4857c:	8809883a 	mov	r4,r17
   48580:	900b883a 	mov	r5,r18
   48584:	004a0d00 	call	4a0d0 <__udivsi3>
   48588:	100b883a 	mov	r5,r2
   4858c:	8009883a 	mov	r4,r16
   48590:	102b883a 	mov	r21,r2
   48594:	004a0e00 	call	4a0e0 <__mulsi3>
   48598:	8809883a 	mov	r4,r17
   4859c:	900b883a 	mov	r5,r18
   485a0:	1021883a 	mov	r16,r2
   485a4:	004a0d80 	call	4a0d8 <__umodsi3>
   485a8:	da800117 	ldw	r10,4(sp)
   485ac:	1004943a 	slli	r2,r2,16
   485b0:	50ffffcc 	andi	r3,r10,65535
   485b4:	10c6b03a 	or	r3,r2,r3
   485b8:	1c00032e 	bgeu	r3,r16,485c8 <__udivdi3+0x42c>
   485bc:	1dc7883a 	add	r3,r3,r23
   485c0:	ad7fffc4 	addi	r21,r21,-1
   485c4:	1dc0792e 	bgeu	r3,r23,487ac <__udivdi3+0x610>
   485c8:	a004943a 	slli	r2,r20,16
   485cc:	982ed43a 	srli	r23,r19,16
   485d0:	9cffffcc 	andi	r19,r19,65535
   485d4:	a8a4b03a 	or	r18,r21,r2
   485d8:	947fffcc 	andi	r17,r18,65535
   485dc:	902ad43a 	srli	r21,r18,16
   485e0:	8809883a 	mov	r4,r17
   485e4:	980b883a 	mov	r5,r19
   485e8:	1c21c83a 	sub	r16,r3,r16
   485ec:	004a0e00 	call	4a0e0 <__mulsi3>
   485f0:	8809883a 	mov	r4,r17
   485f4:	b80b883a 	mov	r5,r23
   485f8:	1029883a 	mov	r20,r2
   485fc:	004a0e00 	call	4a0e0 <__mulsi3>
   48600:	980b883a 	mov	r5,r19
   48604:	a809883a 	mov	r4,r21
   48608:	1023883a 	mov	r17,r2
   4860c:	004a0e00 	call	4a0e0 <__mulsi3>
   48610:	a809883a 	mov	r4,r21
   48614:	b80b883a 	mov	r5,r23
   48618:	1027883a 	mov	r19,r2
   4861c:	004a0e00 	call	4a0e0 <__mulsi3>
   48620:	1009883a 	mov	r4,r2
   48624:	a004d43a 	srli	r2,r20,16
   48628:	8ce3883a 	add	r17,r17,r19
   4862c:	1447883a 	add	r3,r2,r17
   48630:	1cc0022e 	bgeu	r3,r19,4863c <__udivdi3+0x4a0>
   48634:	00800074 	movhi	r2,1
   48638:	2089883a 	add	r4,r4,r2
   4863c:	1804d43a 	srli	r2,r3,16
   48640:	2085883a 	add	r2,r4,r2
   48644:	80804436 	bltu	r16,r2,48758 <__udivdi3+0x5bc>
   48648:	80803e26 	beq	r16,r2,48744 <__udivdi3+0x5a8>
   4864c:	9005883a 	mov	r2,r18
   48650:	0009883a 	mov	r4,zero
   48654:	003f3a06 	br	48340 <__udivdi3+0x1a4>
   48658:	9d26983a 	sll	r19,r19,r20
   4865c:	3505c83a 	sub	r2,r6,r20
   48660:	a8a2d83a 	srl	r17,r21,r2
   48664:	982ed43a 	srli	r23,r19,16
   48668:	e084d83a 	srl	r2,fp,r2
   4866c:	ad06983a 	sll	r3,r21,r20
   48670:	8809883a 	mov	r4,r17
   48674:	b80b883a 	mov	r5,r23
   48678:	1886b03a 	or	r3,r3,r2
   4867c:	d8c00015 	stw	r3,0(sp)
   48680:	9dbfffcc 	andi	r22,r19,65535
   48684:	004a0d00 	call	4a0d0 <__udivsi3>
   48688:	100b883a 	mov	r5,r2
   4868c:	b009883a 	mov	r4,r22
   48690:	d8800215 	stw	r2,8(sp)
   48694:	004a0e00 	call	4a0e0 <__mulsi3>
   48698:	8809883a 	mov	r4,r17
   4869c:	b80b883a 	mov	r5,r23
   486a0:	102b883a 	mov	r21,r2
   486a4:	004a0d80 	call	4a0d8 <__umodsi3>
   486a8:	d9000017 	ldw	r4,0(sp)
   486ac:	1004943a 	slli	r2,r2,16
   486b0:	2006d43a 	srli	r3,r4,16
   486b4:	10c4b03a 	or	r2,r2,r3
   486b8:	1540052e 	bgeu	r2,r21,486d0 <__udivdi3+0x534>
   486bc:	d9400217 	ldw	r5,8(sp)
   486c0:	14c5883a 	add	r2,r2,r19
   486c4:	297fffc4 	addi	r5,r5,-1
   486c8:	d9400215 	stw	r5,8(sp)
   486cc:	14c0462e 	bgeu	r2,r19,487e8 <__udivdi3+0x64c>
   486d0:	1563c83a 	sub	r17,r2,r21
   486d4:	8809883a 	mov	r4,r17
   486d8:	b80b883a 	mov	r5,r23
   486dc:	004a0d00 	call	4a0d0 <__udivsi3>
   486e0:	100b883a 	mov	r5,r2
   486e4:	b009883a 	mov	r4,r22
   486e8:	1025883a 	mov	r18,r2
   486ec:	004a0e00 	call	4a0e0 <__mulsi3>
   486f0:	8809883a 	mov	r4,r17
   486f4:	b80b883a 	mov	r5,r23
   486f8:	1021883a 	mov	r16,r2
   486fc:	004a0d80 	call	4a0d8 <__umodsi3>
   48700:	da800017 	ldw	r10,0(sp)
   48704:	1004943a 	slli	r2,r2,16
   48708:	50ffffcc 	andi	r3,r10,65535
   4870c:	10c6b03a 	or	r3,r2,r3
   48710:	1c00062e 	bgeu	r3,r16,4872c <__udivdi3+0x590>
   48714:	1cc7883a 	add	r3,r3,r19
   48718:	94bfffc4 	addi	r18,r18,-1
   4871c:	1cc00336 	bltu	r3,r19,4872c <__udivdi3+0x590>
   48720:	1c00022e 	bgeu	r3,r16,4872c <__udivdi3+0x590>
   48724:	94bfffc4 	addi	r18,r18,-1
   48728:	1cc7883a 	add	r3,r3,r19
   4872c:	d9000217 	ldw	r4,8(sp)
   48730:	e538983a 	sll	fp,fp,r20
   48734:	1c2bc83a 	sub	r21,r3,r16
   48738:	2004943a 	slli	r2,r4,16
   4873c:	90a8b03a 	or	r20,r18,r2
   48740:	003ebf06 	br	48240 <__udivdi3+0xa4>
   48744:	1804943a 	slli	r2,r3,16
   48748:	e588983a 	sll	r4,fp,r22
   4874c:	a0ffffcc 	andi	r3,r20,65535
   48750:	10c5883a 	add	r2,r2,r3
   48754:	20bfbd2e 	bgeu	r4,r2,4864c <__udivdi3+0x4b0>
   48758:	90bfffc4 	addi	r2,r18,-1
   4875c:	0009883a 	mov	r4,zero
   48760:	003ef706 	br	48340 <__udivdi3+0x1a4>
   48764:	01400204 	movi	r5,8
   48768:	2805883a 	mov	r2,r5
   4876c:	003ee706 	br	4830c <__udivdi3+0x170>
   48770:	01400604 	movi	r5,24
   48774:	2805883a 	mov	r2,r5
   48778:	003ee406 	br	4830c <__udivdi3+0x170>
   4877c:	01400204 	movi	r5,8
   48780:	2805883a 	mov	r2,r5
   48784:	003ea106 	br	4820c <__udivdi3+0x70>
   48788:	01400604 	movi	r5,24
   4878c:	2805883a 	mov	r2,r5
   48790:	003e9e06 	br	4820c <__udivdi3+0x70>
   48794:	01400204 	movi	r5,8
   48798:	2805883a 	mov	r2,r5
   4879c:	003eff06 	br	4839c <__udivdi3+0x200>
   487a0:	01400604 	movi	r5,24
   487a4:	2805883a 	mov	r2,r5
   487a8:	003efc06 	br	4839c <__udivdi3+0x200>
   487ac:	1c3f862e 	bgeu	r3,r16,485c8 <__udivdi3+0x42c>
   487b0:	1dc7883a 	add	r3,r3,r23
   487b4:	ad7fffc4 	addi	r21,r21,-1
   487b8:	003f8306 	br	485c8 <__udivdi3+0x42c>
   487bc:	157f6e2e 	bgeu	r2,r21,48578 <__udivdi3+0x3dc>
   487c0:	a53fffc4 	addi	r20,r20,-1
   487c4:	15c5883a 	add	r2,r2,r23
   487c8:	003f6b06 	br	48578 <__udivdi3+0x3dc>
   487cc:	ad7fffc4 	addi	r21,r21,-1
   487d0:	003ec206 	br	482dc <__udivdi3+0x140>
   487d4:	843fffc4 	addi	r16,r16,-1
   487d8:	14c5883a 	add	r2,r2,r19
   487dc:	003f1306 	br	4842c <__udivdi3+0x290>
   487e0:	ad7fffc4 	addi	r21,r21,-1
   487e4:	003f2506 	br	4847c <__udivdi3+0x2e0>
   487e8:	157fb92e 	bgeu	r2,r21,486d0 <__udivdi3+0x534>
   487ec:	297fffc4 	addi	r5,r5,-1
   487f0:	14c5883a 	add	r2,r2,r19
   487f4:	d9400215 	stw	r5,8(sp)
   487f8:	003fb506 	br	486d0 <__udivdi3+0x534>
   487fc:	843fffc4 	addi	r16,r16,-1
   48800:	14c5883a 	add	r2,r2,r19
   48804:	003ea106 	br	4828c <__udivdi3+0xf0>

00048808 <__umoddi3>:
   48808:	defff004 	addi	sp,sp,-64
   4880c:	3011883a 	mov	r8,r6
   48810:	000d883a 	mov	r6,zero
   48814:	dd400b15 	stw	r21,44(sp)
   48818:	dcc00915 	stw	r19,36(sp)
   4881c:	dc000615 	stw	r16,24(sp)
   48820:	dfc00f15 	stw	ra,60(sp)
   48824:	df000e15 	stw	fp,56(sp)
   48828:	ddc00d15 	stw	r23,52(sp)
   4882c:	dd800c15 	stw	r22,48(sp)
   48830:	dd000a15 	stw	r20,40(sp)
   48834:	dc800815 	stw	r18,32(sp)
   48838:	dc400715 	stw	r17,28(sp)
   4883c:	2817883a 	mov	r11,r5
   48840:	d9800415 	stw	r6,16(sp)
   48844:	4027883a 	mov	r19,r8
   48848:	d9800515 	stw	r6,20(sp)
   4884c:	2021883a 	mov	r16,r4
   48850:	282b883a 	mov	r21,r5
   48854:	38002c1e 	bne	r7,zero,48908 <__umoddi3+0x100>
   48858:	2a005636 	bltu	r5,r8,489b4 <__umoddi3+0x1ac>
   4885c:	40009a26 	beq	r8,zero,48ac8 <__umoddi3+0x2c0>
   48860:	00bfffd4 	movui	r2,65535
   48864:	14c09236 	bltu	r2,r19,48ab0 <__umoddi3+0x2a8>
   48868:	00803fc4 	movi	r2,255
   4886c:	14c15c36 	bltu	r2,r19,48de0 <__umoddi3+0x5d8>
   48870:	000b883a 	mov	r5,zero
   48874:	0005883a 	mov	r2,zero
   48878:	9884d83a 	srl	r2,r19,r2
   4887c:	01000174 	movhi	r4,5
   48880:	2135b104 	addi	r4,r4,-10556
   48884:	01800804 	movi	r6,32
   48888:	1105883a 	add	r2,r2,r4
   4888c:	10c00003 	ldbu	r3,0(r2)
   48890:	28c7883a 	add	r3,r5,r3
   48894:	30e5c83a 	sub	r18,r6,r3
   48898:	9000a41e 	bne	r18,zero,48b2c <__umoddi3+0x324>
   4889c:	982ed43a 	srli	r23,r19,16
   488a0:	acebc83a 	sub	r21,r21,r19
   488a4:	9d3fffcc 	andi	r20,r19,65535
   488a8:	002d883a 	mov	r22,zero
   488ac:	a809883a 	mov	r4,r21
   488b0:	b80b883a 	mov	r5,r23
   488b4:	004a0d00 	call	4a0d0 <__udivsi3>
   488b8:	100b883a 	mov	r5,r2
   488bc:	a009883a 	mov	r4,r20
   488c0:	004a0e00 	call	4a0e0 <__mulsi3>
   488c4:	a809883a 	mov	r4,r21
   488c8:	b80b883a 	mov	r5,r23
   488cc:	1023883a 	mov	r17,r2
   488d0:	004a0d80 	call	4a0d8 <__umodsi3>
   488d4:	1004943a 	slli	r2,r2,16
   488d8:	8006d43a 	srli	r3,r16,16
   488dc:	10c4b03a 	or	r2,r2,r3
   488e0:	1440032e 	bgeu	r2,r17,488f0 <__umoddi3+0xe8>
   488e4:	14c5883a 	add	r2,r2,r19
   488e8:	14c00136 	bltu	r2,r19,488f0 <__umoddi3+0xe8>
   488ec:	14415836 	bltu	r2,r17,48e50 <__umoddi3+0x648>
   488f0:	1463c83a 	sub	r17,r2,r17
   488f4:	8809883a 	mov	r4,r17
   488f8:	b80b883a 	mov	r5,r23
   488fc:	004a0d00 	call	4a0d0 <__udivsi3>
   48900:	a009883a 	mov	r4,r20
   48904:	00005306 	br	48a54 <__umoddi3+0x24c>
   48908:	380d883a 	mov	r6,r7
   4890c:	29c0132e 	bgeu	r5,r7,4895c <__umoddi3+0x154>
   48910:	d9000415 	stw	r4,16(sp)
   48914:	d9400515 	stw	r5,20(sp)
   48918:	d9400417 	ldw	r5,16(sp)
   4891c:	5813883a 	mov	r9,r11
   48920:	2811883a 	mov	r8,r5
   48924:	4005883a 	mov	r2,r8
   48928:	4807883a 	mov	r3,r9
   4892c:	dfc00f17 	ldw	ra,60(sp)
   48930:	df000e17 	ldw	fp,56(sp)
   48934:	ddc00d17 	ldw	r23,52(sp)
   48938:	dd800c17 	ldw	r22,48(sp)
   4893c:	dd400b17 	ldw	r21,44(sp)
   48940:	dd000a17 	ldw	r20,40(sp)
   48944:	dcc00917 	ldw	r19,36(sp)
   48948:	dc800817 	ldw	r18,32(sp)
   4894c:	dc400717 	ldw	r17,28(sp)
   48950:	dc000617 	ldw	r16,24(sp)
   48954:	dec01004 	addi	sp,sp,64
   48958:	f800283a 	ret
   4895c:	00bfffd4 	movui	r2,65535
   48960:	11c06636 	bltu	r2,r7,48afc <__umoddi3+0x2f4>
   48964:	00803fc4 	movi	r2,255
   48968:	11c12036 	bltu	r2,r7,48dec <__umoddi3+0x5e4>
   4896c:	000b883a 	mov	r5,zero
   48970:	0005883a 	mov	r2,zero
   48974:	3084d83a 	srl	r2,r6,r2
   48978:	01000174 	movhi	r4,5
   4897c:	2135b104 	addi	r4,r4,-10556
   48980:	01c00804 	movi	r7,32
   48984:	1105883a 	add	r2,r2,r4
   48988:	10c00003 	ldbu	r3,0(r2)
   4898c:	28c7883a 	add	r3,r5,r3
   48990:	38e5c83a 	sub	r18,r7,r3
   48994:	9000941e 	bne	r18,zero,48be8 <__umoddi3+0x3e0>
   48998:	35405e36 	bltu	r6,r21,48b14 <__umoddi3+0x30c>
   4899c:	84c05d2e 	bgeu	r16,r19,48b14 <__umoddi3+0x30c>
   489a0:	8011883a 	mov	r8,r16
   489a4:	a813883a 	mov	r9,r21
   489a8:	dc000415 	stw	r16,16(sp)
   489ac:	dd400515 	stw	r21,20(sp)
   489b0:	003fdc06 	br	48924 <__umoddi3+0x11c>
   489b4:	00bfffd4 	movui	r2,65535
   489b8:	12004a36 	bltu	r2,r8,48ae4 <__umoddi3+0x2dc>
   489bc:	00803fc4 	movi	r2,255
   489c0:	12010d36 	bltu	r2,r8,48df8 <__umoddi3+0x5f0>
   489c4:	000b883a 	mov	r5,zero
   489c8:	0005883a 	mov	r2,zero
   489cc:	9884d83a 	srl	r2,r19,r2
   489d0:	01000174 	movhi	r4,5
   489d4:	2135b104 	addi	r4,r4,-10556
   489d8:	01800804 	movi	r6,32
   489dc:	1105883a 	add	r2,r2,r4
   489e0:	10c00003 	ldbu	r3,0(r2)
   489e4:	28c7883a 	add	r3,r5,r3
   489e8:	30c7c83a 	sub	r3,r6,r3
   489ec:	1800dc1e 	bne	r3,zero,48d60 <__umoddi3+0x558>
   489f0:	002d883a 	mov	r22,zero
   489f4:	982ed43a 	srli	r23,r19,16
   489f8:	a809883a 	mov	r4,r21
   489fc:	9cbfffcc 	andi	r18,r19,65535
   48a00:	b80b883a 	mov	r5,r23
   48a04:	004a0d00 	call	4a0d0 <__udivsi3>
   48a08:	100b883a 	mov	r5,r2
   48a0c:	9009883a 	mov	r4,r18
   48a10:	004a0e00 	call	4a0e0 <__mulsi3>
   48a14:	a809883a 	mov	r4,r21
   48a18:	b80b883a 	mov	r5,r23
   48a1c:	1023883a 	mov	r17,r2
   48a20:	004a0d80 	call	4a0d8 <__umodsi3>
   48a24:	1004943a 	slli	r2,r2,16
   48a28:	8006d43a 	srli	r3,r16,16
   48a2c:	10c4b03a 	or	r2,r2,r3
   48a30:	1440032e 	bgeu	r2,r17,48a40 <__umoddi3+0x238>
   48a34:	14c5883a 	add	r2,r2,r19
   48a38:	14c00136 	bltu	r2,r19,48a40 <__umoddi3+0x238>
   48a3c:	14410236 	bltu	r2,r17,48e48 <__umoddi3+0x640>
   48a40:	1463c83a 	sub	r17,r2,r17
   48a44:	8809883a 	mov	r4,r17
   48a48:	b80b883a 	mov	r5,r23
   48a4c:	004a0d00 	call	4a0d0 <__udivsi3>
   48a50:	9009883a 	mov	r4,r18
   48a54:	100b883a 	mov	r5,r2
   48a58:	004a0e00 	call	4a0e0 <__mulsi3>
   48a5c:	8809883a 	mov	r4,r17
   48a60:	b80b883a 	mov	r5,r23
   48a64:	102b883a 	mov	r21,r2
   48a68:	004a0d80 	call	4a0d8 <__umodsi3>
   48a6c:	1004943a 	slli	r2,r2,16
   48a70:	80ffffcc 	andi	r3,r16,65535
   48a74:	10c4b03a 	or	r2,r2,r3
   48a78:	1540042e 	bgeu	r2,r21,48a8c <__umoddi3+0x284>
   48a7c:	14c5883a 	add	r2,r2,r19
   48a80:	14c00236 	bltu	r2,r19,48a8c <__umoddi3+0x284>
   48a84:	1540012e 	bgeu	r2,r21,48a8c <__umoddi3+0x284>
   48a88:	14c5883a 	add	r2,r2,r19
   48a8c:	1545c83a 	sub	r2,r2,r21
   48a90:	1584d83a 	srl	r2,r2,r22
   48a94:	0013883a 	mov	r9,zero
   48a98:	d8800415 	stw	r2,16(sp)
   48a9c:	d8c00417 	ldw	r3,16(sp)
   48aa0:	0005883a 	mov	r2,zero
   48aa4:	d8800515 	stw	r2,20(sp)
   48aa8:	1811883a 	mov	r8,r3
   48aac:	003f9d06 	br	48924 <__umoddi3+0x11c>
   48ab0:	00804034 	movhi	r2,256
   48ab4:	10bfffc4 	addi	r2,r2,-1
   48ab8:	14c0c636 	bltu	r2,r19,48dd4 <__umoddi3+0x5cc>
   48abc:	01400404 	movi	r5,16
   48ac0:	2805883a 	mov	r2,r5
   48ac4:	003f6c06 	br	48878 <__umoddi3+0x70>
   48ac8:	01000044 	movi	r4,1
   48acc:	000b883a 	mov	r5,zero
   48ad0:	004a0d00 	call	4a0d0 <__udivsi3>
   48ad4:	1027883a 	mov	r19,r2
   48ad8:	00bfffd4 	movui	r2,65535
   48adc:	14fff436 	bltu	r2,r19,48ab0 <__umoddi3+0x2a8>
   48ae0:	003f6106 	br	48868 <__umoddi3+0x60>
   48ae4:	00804034 	movhi	r2,256
   48ae8:	10bfffc4 	addi	r2,r2,-1
   48aec:	1200c536 	bltu	r2,r8,48e04 <__umoddi3+0x5fc>
   48af0:	01400404 	movi	r5,16
   48af4:	2805883a 	mov	r2,r5
   48af8:	003fb406 	br	489cc <__umoddi3+0x1c4>
   48afc:	00804034 	movhi	r2,256
   48b00:	10bfffc4 	addi	r2,r2,-1
   48b04:	11c0c236 	bltu	r2,r7,48e10 <__umoddi3+0x608>
   48b08:	01400404 	movi	r5,16
   48b0c:	2805883a 	mov	r2,r5
   48b10:	003f9806 	br	48974 <__umoddi3+0x16c>
   48b14:	84c9c83a 	sub	r4,r16,r19
   48b18:	8105803a 	cmpltu	r2,r16,r4
   48b1c:	a987c83a 	sub	r3,r21,r6
   48b20:	18abc83a 	sub	r21,r3,r2
   48b24:	2021883a 	mov	r16,r4
   48b28:	003f9d06 	br	489a0 <__umoddi3+0x198>
   48b2c:	9ca6983a 	sll	r19,r19,r18
   48b30:	3485c83a 	sub	r2,r6,r18
   48b34:	a8a2d83a 	srl	r17,r21,r2
   48b38:	982ed43a 	srli	r23,r19,16
   48b3c:	ac86983a 	sll	r3,r21,r18
   48b40:	8084d83a 	srl	r2,r16,r2
   48b44:	8809883a 	mov	r4,r17
   48b48:	b80b883a 	mov	r5,r23
   48b4c:	18b8b03a 	or	fp,r3,r2
   48b50:	9d3fffcc 	andi	r20,r19,65535
   48b54:	004a0d00 	call	4a0d0 <__udivsi3>
   48b58:	100b883a 	mov	r5,r2
   48b5c:	a009883a 	mov	r4,r20
   48b60:	004a0e00 	call	4a0e0 <__mulsi3>
   48b64:	8809883a 	mov	r4,r17
   48b68:	b80b883a 	mov	r5,r23
   48b6c:	102b883a 	mov	r21,r2
   48b70:	004a0d80 	call	4a0d8 <__umodsi3>
   48b74:	1004943a 	slli	r2,r2,16
   48b78:	e006d43a 	srli	r3,fp,16
   48b7c:	902d883a 	mov	r22,r18
   48b80:	10c4b03a 	or	r2,r2,r3
   48b84:	1540022e 	bgeu	r2,r21,48b90 <__umoddi3+0x388>
   48b88:	14c5883a 	add	r2,r2,r19
   48b8c:	14c0ab2e 	bgeu	r2,r19,48e3c <__umoddi3+0x634>
   48b90:	1563c83a 	sub	r17,r2,r21
   48b94:	8809883a 	mov	r4,r17
   48b98:	b80b883a 	mov	r5,r23
   48b9c:	004a0d00 	call	4a0d0 <__udivsi3>
   48ba0:	100b883a 	mov	r5,r2
   48ba4:	a009883a 	mov	r4,r20
   48ba8:	004a0e00 	call	4a0e0 <__mulsi3>
   48bac:	8809883a 	mov	r4,r17
   48bb0:	b80b883a 	mov	r5,r23
   48bb4:	102b883a 	mov	r21,r2
   48bb8:	004a0d80 	call	4a0d8 <__umodsi3>
   48bbc:	1004943a 	slli	r2,r2,16
   48bc0:	e0ffffcc 	andi	r3,fp,65535
   48bc4:	10c4b03a 	or	r2,r2,r3
   48bc8:	1540042e 	bgeu	r2,r21,48bdc <__umoddi3+0x3d4>
   48bcc:	14c5883a 	add	r2,r2,r19
   48bd0:	14c00236 	bltu	r2,r19,48bdc <__umoddi3+0x3d4>
   48bd4:	1540012e 	bgeu	r2,r21,48bdc <__umoddi3+0x3d4>
   48bd8:	14c5883a 	add	r2,r2,r19
   48bdc:	84a0983a 	sll	r16,r16,r18
   48be0:	156bc83a 	sub	r21,r2,r21
   48be4:	003f3106 	br	488ac <__umoddi3+0xa4>
   48be8:	3c8fc83a 	sub	r7,r7,r18
   48bec:	3486983a 	sll	r3,r6,r18
   48bf0:	99c4d83a 	srl	r2,r19,r7
   48bf4:	a9e2d83a 	srl	r17,r21,r7
   48bf8:	ac8c983a 	sll	r6,r21,r18
   48bfc:	18acb03a 	or	r22,r3,r2
   48c00:	b02ed43a 	srli	r23,r22,16
   48c04:	81c4d83a 	srl	r2,r16,r7
   48c08:	8809883a 	mov	r4,r17
   48c0c:	b80b883a 	mov	r5,r23
   48c10:	308cb03a 	or	r6,r6,r2
   48c14:	d9c00315 	stw	r7,12(sp)
   48c18:	d9800215 	stw	r6,8(sp)
   48c1c:	b53fffcc 	andi	r20,r22,65535
   48c20:	004a0d00 	call	4a0d0 <__udivsi3>
   48c24:	100b883a 	mov	r5,r2
   48c28:	a009883a 	mov	r4,r20
   48c2c:	1039883a 	mov	fp,r2
   48c30:	004a0e00 	call	4a0e0 <__mulsi3>
   48c34:	8809883a 	mov	r4,r17
   48c38:	b80b883a 	mov	r5,r23
   48c3c:	102b883a 	mov	r21,r2
   48c40:	004a0d80 	call	4a0d8 <__umodsi3>
   48c44:	d9000217 	ldw	r4,8(sp)
   48c48:	1004943a 	slli	r2,r2,16
   48c4c:	9ca6983a 	sll	r19,r19,r18
   48c50:	2006d43a 	srli	r3,r4,16
   48c54:	84a0983a 	sll	r16,r16,r18
   48c58:	dcc00015 	stw	r19,0(sp)
   48c5c:	10c4b03a 	or	r2,r2,r3
   48c60:	dc000115 	stw	r16,4(sp)
   48c64:	1540032e 	bgeu	r2,r21,48c74 <__umoddi3+0x46c>
   48c68:	1585883a 	add	r2,r2,r22
   48c6c:	e73fffc4 	addi	fp,fp,-1
   48c70:	15806e2e 	bgeu	r2,r22,48e2c <__umoddi3+0x624>
   48c74:	1563c83a 	sub	r17,r2,r21
   48c78:	8809883a 	mov	r4,r17
   48c7c:	b80b883a 	mov	r5,r23
   48c80:	004a0d00 	call	4a0d0 <__udivsi3>
   48c84:	100b883a 	mov	r5,r2
   48c88:	a009883a 	mov	r4,r20
   48c8c:	1021883a 	mov	r16,r2
   48c90:	004a0e00 	call	4a0e0 <__mulsi3>
   48c94:	b80b883a 	mov	r5,r23
   48c98:	8809883a 	mov	r4,r17
   48c9c:	1029883a 	mov	r20,r2
   48ca0:	004a0d80 	call	4a0d8 <__umodsi3>
   48ca4:	d9400217 	ldw	r5,8(sp)
   48ca8:	1004943a 	slli	r2,r2,16
   48cac:	28ffffcc 	andi	r3,r5,65535
   48cb0:	10c4b03a 	or	r2,r2,r3
   48cb4:	1500032e 	bgeu	r2,r20,48cc4 <__umoddi3+0x4bc>
   48cb8:	1585883a 	add	r2,r2,r22
   48cbc:	843fffc4 	addi	r16,r16,-1
   48cc0:	1580562e 	bgeu	r2,r22,48e1c <__umoddi3+0x614>
   48cc4:	d9800017 	ldw	r6,0(sp)
   48cc8:	e022943a 	slli	r17,fp,16
   48ccc:	302ed43a 	srli	r23,r6,16
   48cd0:	8462b03a 	or	r17,r16,r17
   48cd4:	34ffffcc 	andi	r19,r6,65535
   48cd8:	882ad43a 	srli	r21,r17,16
   48cdc:	8c7fffcc 	andi	r17,r17,65535
   48ce0:	8809883a 	mov	r4,r17
   48ce4:	980b883a 	mov	r5,r19
   48ce8:	1521c83a 	sub	r16,r2,r20
   48cec:	004a0e00 	call	4a0e0 <__mulsi3>
   48cf0:	8809883a 	mov	r4,r17
   48cf4:	b80b883a 	mov	r5,r23
   48cf8:	1029883a 	mov	r20,r2
   48cfc:	004a0e00 	call	4a0e0 <__mulsi3>
   48d00:	980b883a 	mov	r5,r19
   48d04:	a809883a 	mov	r4,r21
   48d08:	1023883a 	mov	r17,r2
   48d0c:	004a0e00 	call	4a0e0 <__mulsi3>
   48d10:	a809883a 	mov	r4,r21
   48d14:	b80b883a 	mov	r5,r23
   48d18:	1027883a 	mov	r19,r2
   48d1c:	004a0e00 	call	4a0e0 <__mulsi3>
   48d20:	100b883a 	mov	r5,r2
   48d24:	a004d43a 	srli	r2,r20,16
   48d28:	8ce3883a 	add	r17,r17,r19
   48d2c:	1449883a 	add	r4,r2,r17
   48d30:	24c0022e 	bgeu	r4,r19,48d3c <__umoddi3+0x534>
   48d34:	00800074 	movhi	r2,1
   48d38:	288b883a 	add	r5,r5,r2
   48d3c:	2004d43a 	srli	r2,r4,16
   48d40:	2008943a 	slli	r4,r4,16
   48d44:	a0ffffcc 	andi	r3,r20,65535
   48d48:	288d883a 	add	r6,r5,r2
   48d4c:	20c9883a 	add	r4,r4,r3
   48d50:	81800b36 	bltu	r16,r6,48d80 <__umoddi3+0x578>
   48d54:	81804026 	beq	r16,r6,48e58 <__umoddi3+0x650>
   48d58:	818dc83a 	sub	r6,r16,r6
   48d5c:	00000f06 	br	48d9c <__umoddi3+0x594>
   48d60:	30c5c83a 	sub	r2,r6,r3
   48d64:	182d883a 	mov	r22,r3
   48d68:	8084d83a 	srl	r2,r16,r2
   48d6c:	a8c6983a 	sll	r3,r21,r3
   48d70:	9da6983a 	sll	r19,r19,r22
   48d74:	85a0983a 	sll	r16,r16,r22
   48d78:	18aab03a 	or	r21,r3,r2
   48d7c:	003f1d06 	br	489f4 <__umoddi3+0x1ec>
   48d80:	d8c00017 	ldw	r3,0(sp)
   48d84:	20c5c83a 	sub	r2,r4,r3
   48d88:	2089803a 	cmpltu	r4,r4,r2
   48d8c:	3587c83a 	sub	r3,r6,r22
   48d90:	1907c83a 	sub	r3,r3,r4
   48d94:	80cdc83a 	sub	r6,r16,r3
   48d98:	1009883a 	mov	r4,r2
   48d9c:	d9400117 	ldw	r5,4(sp)
   48da0:	2905c83a 	sub	r2,r5,r4
   48da4:	2887803a 	cmpltu	r3,r5,r2
   48da8:	30c7c83a 	sub	r3,r6,r3
   48dac:	d9800317 	ldw	r6,12(sp)
   48db0:	1484d83a 	srl	r2,r2,r18
   48db4:	1988983a 	sll	r4,r3,r6
   48db8:	1c86d83a 	srl	r3,r3,r18
   48dbc:	2088b03a 	or	r4,r4,r2
   48dc0:	2011883a 	mov	r8,r4
   48dc4:	1813883a 	mov	r9,r3
   48dc8:	d9000415 	stw	r4,16(sp)
   48dcc:	d8c00515 	stw	r3,20(sp)
   48dd0:	003ed406 	br	48924 <__umoddi3+0x11c>
   48dd4:	01400604 	movi	r5,24
   48dd8:	2805883a 	mov	r2,r5
   48ddc:	003ea606 	br	48878 <__umoddi3+0x70>
   48de0:	01400204 	movi	r5,8
   48de4:	2805883a 	mov	r2,r5
   48de8:	003ea306 	br	48878 <__umoddi3+0x70>
   48dec:	01400204 	movi	r5,8
   48df0:	2805883a 	mov	r2,r5
   48df4:	003edf06 	br	48974 <__umoddi3+0x16c>
   48df8:	01400204 	movi	r5,8
   48dfc:	2805883a 	mov	r2,r5
   48e00:	003ef206 	br	489cc <__umoddi3+0x1c4>
   48e04:	01400604 	movi	r5,24
   48e08:	2805883a 	mov	r2,r5
   48e0c:	003eef06 	br	489cc <__umoddi3+0x1c4>
   48e10:	01400604 	movi	r5,24
   48e14:	2805883a 	mov	r2,r5
   48e18:	003ed606 	br	48974 <__umoddi3+0x16c>
   48e1c:	153fa92e 	bgeu	r2,r20,48cc4 <__umoddi3+0x4bc>
   48e20:	843fffc4 	addi	r16,r16,-1
   48e24:	1585883a 	add	r2,r2,r22
   48e28:	003fa606 	br	48cc4 <__umoddi3+0x4bc>
   48e2c:	157f912e 	bgeu	r2,r21,48c74 <__umoddi3+0x46c>
   48e30:	e73fffc4 	addi	fp,fp,-1
   48e34:	1585883a 	add	r2,r2,r22
   48e38:	003f8e06 	br	48c74 <__umoddi3+0x46c>
   48e3c:	157f542e 	bgeu	r2,r21,48b90 <__umoddi3+0x388>
   48e40:	14c5883a 	add	r2,r2,r19
   48e44:	003f5206 	br	48b90 <__umoddi3+0x388>
   48e48:	14c5883a 	add	r2,r2,r19
   48e4c:	003efc06 	br	48a40 <__umoddi3+0x238>
   48e50:	14c5883a 	add	r2,r2,r19
   48e54:	003ea606 	br	488f0 <__umoddi3+0xe8>
   48e58:	d8800117 	ldw	r2,4(sp)
   48e5c:	113fc836 	bltu	r2,r4,48d80 <__umoddi3+0x578>
   48e60:	000d883a 	mov	r6,zero
   48e64:	003fcd06 	br	48d9c <__umoddi3+0x594>

00048e68 <_fpadd_parts>:
   48e68:	defff804 	addi	sp,sp,-32
   48e6c:	dcc00315 	stw	r19,12(sp)
   48e70:	2027883a 	mov	r19,r4
   48e74:	21000017 	ldw	r4,0(r4)
   48e78:	00c00044 	movi	r3,1
   48e7c:	dd400515 	stw	r21,20(sp)
   48e80:	dd000415 	stw	r20,16(sp)
   48e84:	ddc00715 	stw	r23,28(sp)
   48e88:	dd800615 	stw	r22,24(sp)
   48e8c:	dc800215 	stw	r18,8(sp)
   48e90:	dc400115 	stw	r17,4(sp)
   48e94:	dc000015 	stw	r16,0(sp)
   48e98:	282b883a 	mov	r21,r5
   48e9c:	3029883a 	mov	r20,r6
   48ea0:	1900632e 	bgeu	r3,r4,49030 <_fpadd_parts+0x1c8>
   48ea4:	28800017 	ldw	r2,0(r5)
   48ea8:	1880812e 	bgeu	r3,r2,490b0 <_fpadd_parts+0x248>
   48eac:	00c00104 	movi	r3,4
   48eb0:	20c0dc26 	beq	r4,r3,49224 <_fpadd_parts+0x3bc>
   48eb4:	10c07e26 	beq	r2,r3,490b0 <_fpadd_parts+0x248>
   48eb8:	00c00084 	movi	r3,2
   48ebc:	10c06726 	beq	r2,r3,4905c <_fpadd_parts+0x1f4>
   48ec0:	20c07b26 	beq	r4,r3,490b0 <_fpadd_parts+0x248>
   48ec4:	9dc00217 	ldw	r23,8(r19)
   48ec8:	28c00217 	ldw	r3,8(r5)
   48ecc:	9c400317 	ldw	r17,12(r19)
   48ed0:	2bc00317 	ldw	r15,12(r5)
   48ed4:	b8cdc83a 	sub	r6,r23,r3
   48ed8:	9c800417 	ldw	r18,16(r19)
   48edc:	2c000417 	ldw	r16,16(r5)
   48ee0:	3009883a 	mov	r4,r6
   48ee4:	30009716 	blt	r6,zero,49144 <_fpadd_parts+0x2dc>
   48ee8:	00800fc4 	movi	r2,63
   48eec:	11806b16 	blt	r2,r6,4909c <_fpadd_parts+0x234>
   48ef0:	0100a40e 	bge	zero,r4,49184 <_fpadd_parts+0x31c>
   48ef4:	35bff804 	addi	r22,r6,-32
   48ef8:	b000bc16 	blt	r22,zero,491ec <_fpadd_parts+0x384>
   48efc:	8596d83a 	srl	r11,r16,r22
   48f00:	0019883a 	mov	r12,zero
   48f04:	0013883a 	mov	r9,zero
   48f08:	01000044 	movi	r4,1
   48f0c:	0015883a 	mov	r10,zero
   48f10:	b000be16 	blt	r22,zero,4920c <_fpadd_parts+0x3a4>
   48f14:	2590983a 	sll	r8,r4,r22
   48f18:	000f883a 	mov	r7,zero
   48f1c:	00bfffc4 	movi	r2,-1
   48f20:	3889883a 	add	r4,r7,r2
   48f24:	408b883a 	add	r5,r8,r2
   48f28:	21cd803a 	cmpltu	r6,r4,r7
   48f2c:	314b883a 	add	r5,r6,r5
   48f30:	7904703a 	and	r2,r15,r4
   48f34:	8146703a 	and	r3,r16,r5
   48f38:	10c4b03a 	or	r2,r2,r3
   48f3c:	10000226 	beq	r2,zero,48f48 <_fpadd_parts+0xe0>
   48f40:	02400044 	movi	r9,1
   48f44:	0015883a 	mov	r10,zero
   48f48:	5a5eb03a 	or	r15,r11,r9
   48f4c:	62a0b03a 	or	r16,r12,r10
   48f50:	99400117 	ldw	r5,4(r19)
   48f54:	a8800117 	ldw	r2,4(r21)
   48f58:	28806e26 	beq	r5,r2,49114 <_fpadd_parts+0x2ac>
   48f5c:	28006626 	beq	r5,zero,490f8 <_fpadd_parts+0x290>
   48f60:	7c45c83a 	sub	r2,r15,r17
   48f64:	7889803a 	cmpltu	r4,r15,r2
   48f68:	8487c83a 	sub	r3,r16,r18
   48f6c:	1909c83a 	sub	r4,r3,r4
   48f70:	100d883a 	mov	r6,r2
   48f74:	200f883a 	mov	r7,r4
   48f78:	38007716 	blt	r7,zero,49158 <_fpadd_parts+0x2f0>
   48f7c:	a5c00215 	stw	r23,8(r20)
   48f80:	a1c00415 	stw	r7,16(r20)
   48f84:	a0000115 	stw	zero,4(r20)
   48f88:	a1800315 	stw	r6,12(r20)
   48f8c:	a2000317 	ldw	r8,12(r20)
   48f90:	a2400417 	ldw	r9,16(r20)
   48f94:	00bfffc4 	movi	r2,-1
   48f98:	408b883a 	add	r5,r8,r2
   48f9c:	2a09803a 	cmpltu	r4,r5,r8
   48fa0:	488d883a 	add	r6,r9,r2
   48fa4:	01c40034 	movhi	r7,4096
   48fa8:	39ffffc4 	addi	r7,r7,-1
   48fac:	218d883a 	add	r6,r4,r6
   48fb0:	39801736 	bltu	r7,r6,49010 <_fpadd_parts+0x1a8>
   48fb4:	31c06526 	beq	r6,r7,4914c <_fpadd_parts+0x2e4>
   48fb8:	a3000217 	ldw	r12,8(r20)
   48fbc:	4209883a 	add	r4,r8,r8
   48fc0:	00bfffc4 	movi	r2,-1
   48fc4:	220f803a 	cmpltu	r7,r4,r8
   48fc8:	4a4b883a 	add	r5,r9,r9
   48fcc:	394f883a 	add	r7,r7,r5
   48fd0:	2095883a 	add	r10,r4,r2
   48fd4:	3897883a 	add	r11,r7,r2
   48fd8:	510d803a 	cmpltu	r6,r10,r4
   48fdc:	6099883a 	add	r12,r12,r2
   48fe0:	32d7883a 	add	r11,r6,r11
   48fe4:	00840034 	movhi	r2,4096
   48fe8:	10bfffc4 	addi	r2,r2,-1
   48fec:	2011883a 	mov	r8,r4
   48ff0:	3813883a 	mov	r9,r7
   48ff4:	a1000315 	stw	r4,12(r20)
   48ff8:	a1c00415 	stw	r7,16(r20)
   48ffc:	a3000215 	stw	r12,8(r20)
   49000:	12c00336 	bltu	r2,r11,49010 <_fpadd_parts+0x1a8>
   49004:	58bfed1e 	bne	r11,r2,48fbc <_fpadd_parts+0x154>
   49008:	00bfff84 	movi	r2,-2
   4900c:	12bfeb2e 	bgeu	r2,r10,48fbc <_fpadd_parts+0x154>
   49010:	a2800417 	ldw	r10,16(r20)
   49014:	008000c4 	movi	r2,3
   49018:	00c80034 	movhi	r3,8192
   4901c:	18ffffc4 	addi	r3,r3,-1
   49020:	a2400317 	ldw	r9,12(r20)
   49024:	a0800015 	stw	r2,0(r20)
   49028:	1a802336 	bltu	r3,r10,490b8 <_fpadd_parts+0x250>
   4902c:	a027883a 	mov	r19,r20
   49030:	9805883a 	mov	r2,r19
   49034:	ddc00717 	ldw	r23,28(sp)
   49038:	dd800617 	ldw	r22,24(sp)
   4903c:	dd400517 	ldw	r21,20(sp)
   49040:	dd000417 	ldw	r20,16(sp)
   49044:	dcc00317 	ldw	r19,12(sp)
   49048:	dc800217 	ldw	r18,8(sp)
   4904c:	dc400117 	ldw	r17,4(sp)
   49050:	dc000017 	ldw	r16,0(sp)
   49054:	dec00804 	addi	sp,sp,32
   49058:	f800283a 	ret
   4905c:	20fff41e 	bne	r4,r3,49030 <_fpadd_parts+0x1c8>
   49060:	31000015 	stw	r4,0(r6)
   49064:	98800117 	ldw	r2,4(r19)
   49068:	30800115 	stw	r2,4(r6)
   4906c:	98c00217 	ldw	r3,8(r19)
   49070:	30c00215 	stw	r3,8(r6)
   49074:	98800317 	ldw	r2,12(r19)
   49078:	30800315 	stw	r2,12(r6)
   4907c:	98c00417 	ldw	r3,16(r19)
   49080:	30c00415 	stw	r3,16(r6)
   49084:	98800117 	ldw	r2,4(r19)
   49088:	28c00117 	ldw	r3,4(r5)
   4908c:	3027883a 	mov	r19,r6
   49090:	10c4703a 	and	r2,r2,r3
   49094:	30800115 	stw	r2,4(r6)
   49098:	003fe506 	br	49030 <_fpadd_parts+0x1c8>
   4909c:	1dc02616 	blt	r3,r23,49138 <_fpadd_parts+0x2d0>
   490a0:	0023883a 	mov	r17,zero
   490a4:	182f883a 	mov	r23,r3
   490a8:	0025883a 	mov	r18,zero
   490ac:	003fa806 	br	48f50 <_fpadd_parts+0xe8>
   490b0:	a827883a 	mov	r19,r21
   490b4:	003fde06 	br	49030 <_fpadd_parts+0x1c8>
   490b8:	01800044 	movi	r6,1
   490bc:	500497fa 	slli	r2,r10,31
   490c0:	4808d07a 	srli	r4,r9,1
   490c4:	518ad83a 	srl	r5,r10,r6
   490c8:	a2000217 	ldw	r8,8(r20)
   490cc:	1108b03a 	or	r4,r2,r4
   490d0:	0007883a 	mov	r3,zero
   490d4:	4984703a 	and	r2,r9,r6
   490d8:	208cb03a 	or	r6,r4,r2
   490dc:	28ceb03a 	or	r7,r5,r3
   490e0:	42000044 	addi	r8,r8,1
   490e4:	a027883a 	mov	r19,r20
   490e8:	a1c00415 	stw	r7,16(r20)
   490ec:	a2000215 	stw	r8,8(r20)
   490f0:	a1800315 	stw	r6,12(r20)
   490f4:	003fce06 	br	49030 <_fpadd_parts+0x1c8>
   490f8:	8bc5c83a 	sub	r2,r17,r15
   490fc:	8889803a 	cmpltu	r4,r17,r2
   49100:	9407c83a 	sub	r3,r18,r16
   49104:	1909c83a 	sub	r4,r3,r4
   49108:	100d883a 	mov	r6,r2
   4910c:	200f883a 	mov	r7,r4
   49110:	003f9906 	br	48f78 <_fpadd_parts+0x110>
   49114:	7c45883a 	add	r2,r15,r17
   49118:	13c9803a 	cmpltu	r4,r2,r15
   4911c:	8487883a 	add	r3,r16,r18
   49120:	20c9883a 	add	r4,r4,r3
   49124:	a1400115 	stw	r5,4(r20)
   49128:	a5c00215 	stw	r23,8(r20)
   4912c:	a0800315 	stw	r2,12(r20)
   49130:	a1000415 	stw	r4,16(r20)
   49134:	003fb606 	br	49010 <_fpadd_parts+0x1a8>
   49138:	001f883a 	mov	r15,zero
   4913c:	0021883a 	mov	r16,zero
   49140:	003f8306 	br	48f50 <_fpadd_parts+0xe8>
   49144:	018dc83a 	sub	r6,zero,r6
   49148:	003f6706 	br	48ee8 <_fpadd_parts+0x80>
   4914c:	00bfff84 	movi	r2,-2
   49150:	117faf36 	bltu	r2,r5,49010 <_fpadd_parts+0x1a8>
   49154:	003f9806 	br	48fb8 <_fpadd_parts+0x150>
   49158:	0005883a 	mov	r2,zero
   4915c:	1189c83a 	sub	r4,r2,r6
   49160:	1105803a 	cmpltu	r2,r2,r4
   49164:	01cbc83a 	sub	r5,zero,r7
   49168:	2885c83a 	sub	r2,r5,r2
   4916c:	01800044 	movi	r6,1
   49170:	a1800115 	stw	r6,4(r20)
   49174:	a5c00215 	stw	r23,8(r20)
   49178:	a1000315 	stw	r4,12(r20)
   4917c:	a0800415 	stw	r2,16(r20)
   49180:	003f8206 	br	48f8c <_fpadd_parts+0x124>
   49184:	203f7226 	beq	r4,zero,48f50 <_fpadd_parts+0xe8>
   49188:	35bff804 	addi	r22,r6,-32
   4918c:	b9af883a 	add	r23,r23,r6
   49190:	b0003116 	blt	r22,zero,49258 <_fpadd_parts+0x3f0>
   49194:	959ad83a 	srl	r13,r18,r22
   49198:	001d883a 	mov	r14,zero
   4919c:	000f883a 	mov	r7,zero
   491a0:	01000044 	movi	r4,1
   491a4:	0011883a 	mov	r8,zero
   491a8:	b0002516 	blt	r22,zero,49240 <_fpadd_parts+0x3d8>
   491ac:	2594983a 	sll	r10,r4,r22
   491b0:	0013883a 	mov	r9,zero
   491b4:	00bfffc4 	movi	r2,-1
   491b8:	4889883a 	add	r4,r9,r2
   491bc:	508b883a 	add	r5,r10,r2
   491c0:	224d803a 	cmpltu	r6,r4,r9
   491c4:	314b883a 	add	r5,r6,r5
   491c8:	8904703a 	and	r2,r17,r4
   491cc:	9146703a 	and	r3,r18,r5
   491d0:	10c4b03a 	or	r2,r2,r3
   491d4:	10000226 	beq	r2,zero,491e0 <_fpadd_parts+0x378>
   491d8:	01c00044 	movi	r7,1
   491dc:	0011883a 	mov	r8,zero
   491e0:	69e2b03a 	or	r17,r13,r7
   491e4:	7224b03a 	or	r18,r14,r8
   491e8:	003f5906 	br	48f50 <_fpadd_parts+0xe8>
   491ec:	8407883a 	add	r3,r16,r16
   491f0:	008007c4 	movi	r2,31
   491f4:	1185c83a 	sub	r2,r2,r6
   491f8:	1886983a 	sll	r3,r3,r2
   491fc:	7996d83a 	srl	r11,r15,r6
   49200:	8198d83a 	srl	r12,r16,r6
   49204:	1ad6b03a 	or	r11,r3,r11
   49208:	003f3e06 	br	48f04 <_fpadd_parts+0x9c>
   4920c:	2006d07a 	srli	r3,r4,1
   49210:	008007c4 	movi	r2,31
   49214:	1185c83a 	sub	r2,r2,r6
   49218:	1890d83a 	srl	r8,r3,r2
   4921c:	218e983a 	sll	r7,r4,r6
   49220:	003f3e06 	br	48f1c <_fpadd_parts+0xb4>
   49224:	113f821e 	bne	r2,r4,49030 <_fpadd_parts+0x1c8>
   49228:	28c00117 	ldw	r3,4(r5)
   4922c:	98800117 	ldw	r2,4(r19)
   49230:	10ff7f26 	beq	r2,r3,49030 <_fpadd_parts+0x1c8>
   49234:	04c00174 	movhi	r19,5
   49238:	9cf5ac04 	addi	r19,r19,-10576
   4923c:	003f7c06 	br	49030 <_fpadd_parts+0x1c8>
   49240:	2006d07a 	srli	r3,r4,1
   49244:	008007c4 	movi	r2,31
   49248:	1185c83a 	sub	r2,r2,r6
   4924c:	1894d83a 	srl	r10,r3,r2
   49250:	2192983a 	sll	r9,r4,r6
   49254:	003fd706 	br	491b4 <_fpadd_parts+0x34c>
   49258:	9487883a 	add	r3,r18,r18
   4925c:	008007c4 	movi	r2,31
   49260:	1185c83a 	sub	r2,r2,r6
   49264:	1886983a 	sll	r3,r3,r2
   49268:	899ad83a 	srl	r13,r17,r6
   4926c:	919cd83a 	srl	r14,r18,r6
   49270:	1b5ab03a 	or	r13,r3,r13
   49274:	003fc906 	br	4919c <_fpadd_parts+0x334>

00049278 <__subdf3>:
   49278:	deffea04 	addi	sp,sp,-88
   4927c:	dcc01415 	stw	r19,80(sp)
   49280:	dcc00404 	addi	r19,sp,16
   49284:	2011883a 	mov	r8,r4
   49288:	2813883a 	mov	r9,r5
   4928c:	dc401315 	stw	r17,76(sp)
   49290:	d809883a 	mov	r4,sp
   49294:	980b883a 	mov	r5,r19
   49298:	dc400904 	addi	r17,sp,36
   4929c:	dfc01515 	stw	ra,84(sp)
   492a0:	da400115 	stw	r9,4(sp)
   492a4:	d9c00315 	stw	r7,12(sp)
   492a8:	da000015 	stw	r8,0(sp)
   492ac:	d9800215 	stw	r6,8(sp)
   492b0:	004a5d00 	call	4a5d0 <__unpack_d>
   492b4:	d9000204 	addi	r4,sp,8
   492b8:	880b883a 	mov	r5,r17
   492bc:	004a5d00 	call	4a5d0 <__unpack_d>
   492c0:	d8800a17 	ldw	r2,40(sp)
   492c4:	880b883a 	mov	r5,r17
   492c8:	9809883a 	mov	r4,r19
   492cc:	d9800e04 	addi	r6,sp,56
   492d0:	1080005c 	xori	r2,r2,1
   492d4:	d8800a15 	stw	r2,40(sp)
   492d8:	0048e680 	call	48e68 <_fpadd_parts>
   492dc:	1009883a 	mov	r4,r2
   492e0:	004a2bc0 	call	4a2bc <__pack_d>
   492e4:	dfc01517 	ldw	ra,84(sp)
   492e8:	dcc01417 	ldw	r19,80(sp)
   492ec:	dc401317 	ldw	r17,76(sp)
   492f0:	dec01604 	addi	sp,sp,88
   492f4:	f800283a 	ret

000492f8 <__adddf3>:
   492f8:	deffea04 	addi	sp,sp,-88
   492fc:	dcc01415 	stw	r19,80(sp)
   49300:	dcc00404 	addi	r19,sp,16
   49304:	2011883a 	mov	r8,r4
   49308:	2813883a 	mov	r9,r5
   4930c:	dc401315 	stw	r17,76(sp)
   49310:	d809883a 	mov	r4,sp
   49314:	980b883a 	mov	r5,r19
   49318:	dc400904 	addi	r17,sp,36
   4931c:	dfc01515 	stw	ra,84(sp)
   49320:	da400115 	stw	r9,4(sp)
   49324:	d9c00315 	stw	r7,12(sp)
   49328:	da000015 	stw	r8,0(sp)
   4932c:	d9800215 	stw	r6,8(sp)
   49330:	004a5d00 	call	4a5d0 <__unpack_d>
   49334:	d9000204 	addi	r4,sp,8
   49338:	880b883a 	mov	r5,r17
   4933c:	004a5d00 	call	4a5d0 <__unpack_d>
   49340:	d9800e04 	addi	r6,sp,56
   49344:	9809883a 	mov	r4,r19
   49348:	880b883a 	mov	r5,r17
   4934c:	0048e680 	call	48e68 <_fpadd_parts>
   49350:	1009883a 	mov	r4,r2
   49354:	004a2bc0 	call	4a2bc <__pack_d>
   49358:	dfc01517 	ldw	ra,84(sp)
   4935c:	dcc01417 	ldw	r19,80(sp)
   49360:	dc401317 	ldw	r17,76(sp)
   49364:	dec01604 	addi	sp,sp,88
   49368:	f800283a 	ret

0004936c <__muldf3>:
   4936c:	deffe004 	addi	sp,sp,-128
   49370:	dc401815 	stw	r17,96(sp)
   49374:	dc400404 	addi	r17,sp,16
   49378:	2011883a 	mov	r8,r4
   4937c:	2813883a 	mov	r9,r5
   49380:	dc001715 	stw	r16,92(sp)
   49384:	d809883a 	mov	r4,sp
   49388:	880b883a 	mov	r5,r17
   4938c:	dc000904 	addi	r16,sp,36
   49390:	dfc01f15 	stw	ra,124(sp)
   49394:	da400115 	stw	r9,4(sp)
   49398:	d9c00315 	stw	r7,12(sp)
   4939c:	da000015 	stw	r8,0(sp)
   493a0:	d9800215 	stw	r6,8(sp)
   493a4:	ddc01e15 	stw	r23,120(sp)
   493a8:	dd801d15 	stw	r22,116(sp)
   493ac:	dd401c15 	stw	r21,112(sp)
   493b0:	dd001b15 	stw	r20,108(sp)
   493b4:	dcc01a15 	stw	r19,104(sp)
   493b8:	dc801915 	stw	r18,100(sp)
   493bc:	004a5d00 	call	4a5d0 <__unpack_d>
   493c0:	d9000204 	addi	r4,sp,8
   493c4:	800b883a 	mov	r5,r16
   493c8:	004a5d00 	call	4a5d0 <__unpack_d>
   493cc:	d9000417 	ldw	r4,16(sp)
   493d0:	00800044 	movi	r2,1
   493d4:	1100102e 	bgeu	r2,r4,49418 <__muldf3+0xac>
   493d8:	d8c00917 	ldw	r3,36(sp)
   493dc:	10c0062e 	bgeu	r2,r3,493f8 <__muldf3+0x8c>
   493e0:	00800104 	movi	r2,4
   493e4:	20800a26 	beq	r4,r2,49410 <__muldf3+0xa4>
   493e8:	1880cc26 	beq	r3,r2,4971c <__muldf3+0x3b0>
   493ec:	00800084 	movi	r2,2
   493f0:	20800926 	beq	r4,r2,49418 <__muldf3+0xac>
   493f4:	1880191e 	bne	r3,r2,4945c <__muldf3+0xf0>
   493f8:	d8c00a17 	ldw	r3,40(sp)
   493fc:	d8800517 	ldw	r2,20(sp)
   49400:	8009883a 	mov	r4,r16
   49404:	10c4c03a 	cmpne	r2,r2,r3
   49408:	d8800a15 	stw	r2,40(sp)
   4940c:	00000706 	br	4942c <__muldf3+0xc0>
   49410:	00800084 	movi	r2,2
   49414:	1880c326 	beq	r3,r2,49724 <__muldf3+0x3b8>
   49418:	d8800517 	ldw	r2,20(sp)
   4941c:	d8c00a17 	ldw	r3,40(sp)
   49420:	8809883a 	mov	r4,r17
   49424:	10c4c03a 	cmpne	r2,r2,r3
   49428:	d8800515 	stw	r2,20(sp)
   4942c:	004a2bc0 	call	4a2bc <__pack_d>
   49430:	dfc01f17 	ldw	ra,124(sp)
   49434:	ddc01e17 	ldw	r23,120(sp)
   49438:	dd801d17 	ldw	r22,116(sp)
   4943c:	dd401c17 	ldw	r21,112(sp)
   49440:	dd001b17 	ldw	r20,108(sp)
   49444:	dcc01a17 	ldw	r19,104(sp)
   49448:	dc801917 	ldw	r18,100(sp)
   4944c:	dc401817 	ldw	r17,96(sp)
   49450:	dc001717 	ldw	r16,92(sp)
   49454:	dec02004 	addi	sp,sp,128
   49458:	f800283a 	ret
   4945c:	dd800717 	ldw	r22,28(sp)
   49460:	dc800c17 	ldw	r18,48(sp)
   49464:	002b883a 	mov	r21,zero
   49468:	0023883a 	mov	r17,zero
   4946c:	a80b883a 	mov	r5,r21
   49470:	b00d883a 	mov	r6,r22
   49474:	880f883a 	mov	r7,r17
   49478:	ddc00817 	ldw	r23,32(sp)
   4947c:	dcc00d17 	ldw	r19,52(sp)
   49480:	9009883a 	mov	r4,r18
   49484:	004a1180 	call	4a118 <__muldi3>
   49488:	001b883a 	mov	r13,zero
   4948c:	680f883a 	mov	r7,r13
   49490:	b009883a 	mov	r4,r22
   49494:	000b883a 	mov	r5,zero
   49498:	980d883a 	mov	r6,r19
   4949c:	b82d883a 	mov	r22,r23
   494a0:	002f883a 	mov	r23,zero
   494a4:	db401615 	stw	r13,88(sp)
   494a8:	d8801315 	stw	r2,76(sp)
   494ac:	d8c01415 	stw	r3,80(sp)
   494b0:	dcc01515 	stw	r19,84(sp)
   494b4:	004a1180 	call	4a118 <__muldi3>
   494b8:	b00d883a 	mov	r6,r22
   494bc:	000b883a 	mov	r5,zero
   494c0:	9009883a 	mov	r4,r18
   494c4:	b80f883a 	mov	r7,r23
   494c8:	1021883a 	mov	r16,r2
   494cc:	1823883a 	mov	r17,r3
   494d0:	004a1180 	call	4a118 <__muldi3>
   494d4:	8085883a 	add	r2,r16,r2
   494d8:	140d803a 	cmpltu	r6,r2,r16
   494dc:	88c7883a 	add	r3,r17,r3
   494e0:	30cd883a 	add	r6,r6,r3
   494e4:	1029883a 	mov	r20,r2
   494e8:	302b883a 	mov	r21,r6
   494ec:	da801317 	ldw	r10,76(sp)
   494f0:	dac01417 	ldw	r11,80(sp)
   494f4:	db001517 	ldw	r12,84(sp)
   494f8:	db401617 	ldw	r13,88(sp)
   494fc:	3440612e 	bgeu	r6,r17,49684 <__muldf3+0x318>
   49500:	0009883a 	mov	r4,zero
   49504:	5105883a 	add	r2,r10,r4
   49508:	128d803a 	cmpltu	r6,r2,r10
   4950c:	5d07883a 	add	r3,r11,r20
   49510:	30cd883a 	add	r6,r6,r3
   49514:	0021883a 	mov	r16,zero
   49518:	04400044 	movi	r17,1
   4951c:	1025883a 	mov	r18,r2
   49520:	3027883a 	mov	r19,r6
   49524:	32c06236 	bltu	r6,r11,496b0 <__muldf3+0x344>
   49528:	59807a26 	beq	r11,r6,49714 <__muldf3+0x3a8>
   4952c:	680b883a 	mov	r5,r13
   49530:	b80f883a 	mov	r7,r23
   49534:	6009883a 	mov	r4,r12
   49538:	b00d883a 	mov	r6,r22
   4953c:	004a1180 	call	4a118 <__muldi3>
   49540:	1009883a 	mov	r4,r2
   49544:	000f883a 	mov	r7,zero
   49548:	1545883a 	add	r2,r2,r21
   4954c:	1111803a 	cmpltu	r8,r2,r4
   49550:	19c7883a 	add	r3,r3,r7
   49554:	40c7883a 	add	r3,r8,r3
   49558:	88cb883a 	add	r5,r17,r3
   4955c:	d8c00617 	ldw	r3,24(sp)
   49560:	8089883a 	add	r4,r16,r2
   49564:	d8800b17 	ldw	r2,44(sp)
   49568:	18c00104 	addi	r3,r3,4
   4956c:	240d803a 	cmpltu	r6,r4,r16
   49570:	10c7883a 	add	r3,r2,r3
   49574:	2013883a 	mov	r9,r4
   49578:	d8800a17 	ldw	r2,40(sp)
   4957c:	d9000517 	ldw	r4,20(sp)
   49580:	314d883a 	add	r6,r6,r5
   49584:	3015883a 	mov	r10,r6
   49588:	2088c03a 	cmpne	r4,r4,r2
   4958c:	00880034 	movhi	r2,8192
   49590:	10bfffc4 	addi	r2,r2,-1
   49594:	d9000f15 	stw	r4,60(sp)
   49598:	d8c01015 	stw	r3,64(sp)
   4959c:	1180162e 	bgeu	r2,r6,495f8 <__muldf3+0x28c>
   495a0:	1811883a 	mov	r8,r3
   495a4:	101f883a 	mov	r15,r2
   495a8:	980497fa 	slli	r2,r19,31
   495ac:	9016d07a 	srli	r11,r18,1
   495b0:	500697fa 	slli	r3,r10,31
   495b4:	480cd07a 	srli	r6,r9,1
   495b8:	500ed07a 	srli	r7,r10,1
   495bc:	12d6b03a 	or	r11,r2,r11
   495c0:	00800044 	movi	r2,1
   495c4:	198cb03a 	or	r6,r3,r6
   495c8:	4888703a 	and	r4,r9,r2
   495cc:	9818d07a 	srli	r12,r19,1
   495d0:	001b883a 	mov	r13,zero
   495d4:	03a00034 	movhi	r14,32768
   495d8:	3013883a 	mov	r9,r6
   495dc:	3815883a 	mov	r10,r7
   495e0:	4091883a 	add	r8,r8,r2
   495e4:	20000226 	beq	r4,zero,495f0 <__muldf3+0x284>
   495e8:	5b64b03a 	or	r18,r11,r13
   495ec:	63a6b03a 	or	r19,r12,r14
   495f0:	7abfed36 	bltu	r15,r10,495a8 <__muldf3+0x23c>
   495f4:	da001015 	stw	r8,64(sp)
   495f8:	00840034 	movhi	r2,4096
   495fc:	10bfffc4 	addi	r2,r2,-1
   49600:	12801436 	bltu	r2,r10,49654 <__muldf3+0x2e8>
   49604:	da001017 	ldw	r8,64(sp)
   49608:	101f883a 	mov	r15,r2
   4960c:	4a45883a 	add	r2,r9,r9
   49610:	124d803a 	cmpltu	r6,r2,r9
   49614:	5287883a 	add	r3,r10,r10
   49618:	9497883a 	add	r11,r18,r18
   4961c:	5c8f803a 	cmpltu	r7,r11,r18
   49620:	9cd9883a 	add	r12,r19,r19
   49624:	01000044 	movi	r4,1
   49628:	30cd883a 	add	r6,r6,r3
   4962c:	3b0f883a 	add	r7,r7,r12
   49630:	423fffc4 	addi	r8,r8,-1
   49634:	1013883a 	mov	r9,r2
   49638:	3015883a 	mov	r10,r6
   4963c:	111ab03a 	or	r13,r2,r4
   49640:	98003016 	blt	r19,zero,49704 <__muldf3+0x398>
   49644:	5825883a 	mov	r18,r11
   49648:	3827883a 	mov	r19,r7
   4964c:	7abfef2e 	bgeu	r15,r10,4960c <__muldf3+0x2a0>
   49650:	da001015 	stw	r8,64(sp)
   49654:	00803fc4 	movi	r2,255
   49658:	488e703a 	and	r7,r9,r2
   4965c:	00802004 	movi	r2,128
   49660:	0007883a 	mov	r3,zero
   49664:	0011883a 	mov	r8,zero
   49668:	38801826 	beq	r7,r2,496cc <__muldf3+0x360>
   4966c:	008000c4 	movi	r2,3
   49670:	d9000e04 	addi	r4,sp,56
   49674:	da801215 	stw	r10,72(sp)
   49678:	d8800e15 	stw	r2,56(sp)
   4967c:	da401115 	stw	r9,68(sp)
   49680:	003f6a06 	br	4942c <__muldf3+0xc0>
   49684:	89802126 	beq	r17,r6,4970c <__muldf3+0x3a0>
   49688:	0009883a 	mov	r4,zero
   4968c:	5105883a 	add	r2,r10,r4
   49690:	128d803a 	cmpltu	r6,r2,r10
   49694:	5d07883a 	add	r3,r11,r20
   49698:	30cd883a 	add	r6,r6,r3
   4969c:	0021883a 	mov	r16,zero
   496a0:	0023883a 	mov	r17,zero
   496a4:	1025883a 	mov	r18,r2
   496a8:	3027883a 	mov	r19,r6
   496ac:	32ff9e2e 	bgeu	r6,r11,49528 <__muldf3+0x1bc>
   496b0:	00800044 	movi	r2,1
   496b4:	8089883a 	add	r4,r16,r2
   496b8:	240d803a 	cmpltu	r6,r4,r16
   496bc:	344d883a 	add	r6,r6,r17
   496c0:	2021883a 	mov	r16,r4
   496c4:	3023883a 	mov	r17,r6
   496c8:	003f9806 	br	4952c <__muldf3+0x1c0>
   496cc:	403fe71e 	bne	r8,zero,4966c <__muldf3+0x300>
   496d0:	01004004 	movi	r4,256
   496d4:	4904703a 	and	r2,r9,r4
   496d8:	10c4b03a 	or	r2,r2,r3
   496dc:	103fe31e 	bne	r2,zero,4966c <__muldf3+0x300>
   496e0:	94c4b03a 	or	r2,r18,r19
   496e4:	103fe126 	beq	r2,zero,4966c <__muldf3+0x300>
   496e8:	49c5883a 	add	r2,r9,r7
   496ec:	1251803a 	cmpltu	r8,r2,r9
   496f0:	4291883a 	add	r8,r8,r10
   496f4:	013fc004 	movi	r4,-256
   496f8:	1112703a 	and	r9,r2,r4
   496fc:	4015883a 	mov	r10,r8
   49700:	003fda06 	br	4966c <__muldf3+0x300>
   49704:	6813883a 	mov	r9,r13
   49708:	003fce06 	br	49644 <__muldf3+0x2d8>
   4970c:	143f7c36 	bltu	r2,r16,49500 <__muldf3+0x194>
   49710:	003fdd06 	br	49688 <__muldf3+0x31c>
   49714:	12bf852e 	bgeu	r2,r10,4952c <__muldf3+0x1c0>
   49718:	003fe506 	br	496b0 <__muldf3+0x344>
   4971c:	00800084 	movi	r2,2
   49720:	20bf351e 	bne	r4,r2,493f8 <__muldf3+0x8c>
   49724:	01000174 	movhi	r4,5
   49728:	2135ac04 	addi	r4,r4,-10576
   4972c:	003f3f06 	br	4942c <__muldf3+0xc0>

00049730 <__divdf3>:
   49730:	deffed04 	addi	sp,sp,-76
   49734:	dcc01115 	stw	r19,68(sp)
   49738:	dcc00404 	addi	r19,sp,16
   4973c:	2011883a 	mov	r8,r4
   49740:	2813883a 	mov	r9,r5
   49744:	dc000e15 	stw	r16,56(sp)
   49748:	d809883a 	mov	r4,sp
   4974c:	980b883a 	mov	r5,r19
   49750:	dc000904 	addi	r16,sp,36
   49754:	dfc01215 	stw	ra,72(sp)
   49758:	da400115 	stw	r9,4(sp)
   4975c:	d9c00315 	stw	r7,12(sp)
   49760:	da000015 	stw	r8,0(sp)
   49764:	d9800215 	stw	r6,8(sp)
   49768:	dc801015 	stw	r18,64(sp)
   4976c:	dc400f15 	stw	r17,60(sp)
   49770:	004a5d00 	call	4a5d0 <__unpack_d>
   49774:	d9000204 	addi	r4,sp,8
   49778:	800b883a 	mov	r5,r16
   4977c:	004a5d00 	call	4a5d0 <__unpack_d>
   49780:	d9000417 	ldw	r4,16(sp)
   49784:	00800044 	movi	r2,1
   49788:	11000b2e 	bgeu	r2,r4,497b8 <__divdf3+0x88>
   4978c:	d9400917 	ldw	r5,36(sp)
   49790:	1140762e 	bgeu	r2,r5,4996c <__divdf3+0x23c>
   49794:	d8800517 	ldw	r2,20(sp)
   49798:	d8c00a17 	ldw	r3,40(sp)
   4979c:	01800104 	movi	r6,4
   497a0:	10c4f03a 	xor	r2,r2,r3
   497a4:	d8800515 	stw	r2,20(sp)
   497a8:	21800226 	beq	r4,r6,497b4 <__divdf3+0x84>
   497ac:	00800084 	movi	r2,2
   497b0:	2080141e 	bne	r4,r2,49804 <__divdf3+0xd4>
   497b4:	29000926 	beq	r5,r4,497dc <__divdf3+0xac>
   497b8:	9809883a 	mov	r4,r19
   497bc:	004a2bc0 	call	4a2bc <__pack_d>
   497c0:	dfc01217 	ldw	ra,72(sp)
   497c4:	dcc01117 	ldw	r19,68(sp)
   497c8:	dc801017 	ldw	r18,64(sp)
   497cc:	dc400f17 	ldw	r17,60(sp)
   497d0:	dc000e17 	ldw	r16,56(sp)
   497d4:	dec01304 	addi	sp,sp,76
   497d8:	f800283a 	ret
   497dc:	01000174 	movhi	r4,5
   497e0:	2135ac04 	addi	r4,r4,-10576
   497e4:	004a2bc0 	call	4a2bc <__pack_d>
   497e8:	dfc01217 	ldw	ra,72(sp)
   497ec:	dcc01117 	ldw	r19,68(sp)
   497f0:	dc801017 	ldw	r18,64(sp)
   497f4:	dc400f17 	ldw	r17,60(sp)
   497f8:	dc000e17 	ldw	r16,56(sp)
   497fc:	dec01304 	addi	sp,sp,76
   49800:	f800283a 	ret
   49804:	29805b26 	beq	r5,r6,49974 <__divdf3+0x244>
   49808:	28802d26 	beq	r5,r2,498c0 <__divdf3+0x190>
   4980c:	d8c00617 	ldw	r3,24(sp)
   49810:	d8800b17 	ldw	r2,44(sp)
   49814:	d9c00817 	ldw	r7,32(sp)
   49818:	dc400d17 	ldw	r17,52(sp)
   4981c:	188bc83a 	sub	r5,r3,r2
   49820:	d9800717 	ldw	r6,28(sp)
   49824:	dc000c17 	ldw	r16,48(sp)
   49828:	d9400615 	stw	r5,24(sp)
   4982c:	3c403836 	bltu	r7,r17,49910 <__divdf3+0x1e0>
   49830:	89c03626 	beq	r17,r7,4990c <__divdf3+0x1dc>
   49834:	0015883a 	mov	r10,zero
   49838:	001d883a 	mov	r14,zero
   4983c:	02c40034 	movhi	r11,4096
   49840:	001f883a 	mov	r15,zero
   49844:	003f883a 	mov	ra,zero
   49848:	04800f44 	movi	r18,61
   4984c:	00000f06 	br	4988c <__divdf3+0x15c>
   49850:	601d883a 	mov	r14,r12
   49854:	681f883a 	mov	r15,r13
   49858:	400d883a 	mov	r6,r8
   4985c:	100f883a 	mov	r7,r2
   49860:	3191883a 	add	r8,r6,r6
   49864:	5808d07a 	srli	r4,r11,1
   49868:	4185803a 	cmpltu	r2,r8,r6
   4986c:	39d3883a 	add	r9,r7,r7
   49870:	28c6b03a 	or	r3,r5,r3
   49874:	1245883a 	add	r2,r2,r9
   49878:	1815883a 	mov	r10,r3
   4987c:	2017883a 	mov	r11,r4
   49880:	400d883a 	mov	r6,r8
   49884:	100f883a 	mov	r7,r2
   49888:	fc801726 	beq	ra,r18,498e8 <__divdf3+0x1b8>
   4988c:	580a97fa 	slli	r5,r11,31
   49890:	5006d07a 	srli	r3,r10,1
   49894:	ffc00044 	addi	ra,ra,1
   49898:	3c7ff136 	bltu	r7,r17,49860 <__divdf3+0x130>
   4989c:	3411c83a 	sub	r8,r6,r16
   498a0:	3205803a 	cmpltu	r2,r6,r8
   498a4:	3c53c83a 	sub	r9,r7,r17
   498a8:	7298b03a 	or	r12,r14,r10
   498ac:	7adab03a 	or	r13,r15,r11
   498b0:	4885c83a 	sub	r2,r9,r2
   498b4:	89ffe61e 	bne	r17,r7,49850 <__divdf3+0x120>
   498b8:	343fe936 	bltu	r6,r16,49860 <__divdf3+0x130>
   498bc:	003fe406 	br	49850 <__divdf3+0x120>
   498c0:	9809883a 	mov	r4,r19
   498c4:	d9800415 	stw	r6,16(sp)
   498c8:	004a2bc0 	call	4a2bc <__pack_d>
   498cc:	dfc01217 	ldw	ra,72(sp)
   498d0:	dcc01117 	ldw	r19,68(sp)
   498d4:	dc801017 	ldw	r18,64(sp)
   498d8:	dc400f17 	ldw	r17,60(sp)
   498dc:	dc000e17 	ldw	r16,56(sp)
   498e0:	dec01304 	addi	sp,sp,76
   498e4:	f800283a 	ret
   498e8:	00803fc4 	movi	r2,255
   498ec:	7090703a 	and	r8,r14,r2
   498f0:	00802004 	movi	r2,128
   498f4:	0007883a 	mov	r3,zero
   498f8:	0013883a 	mov	r9,zero
   498fc:	40800d26 	beq	r8,r2,49934 <__divdf3+0x204>
   49900:	dbc00815 	stw	r15,32(sp)
   49904:	db800715 	stw	r14,28(sp)
   49908:	003fab06 	br	497b8 <__divdf3+0x88>
   4990c:	343fc92e 	bgeu	r6,r16,49834 <__divdf3+0x104>
   49910:	3185883a 	add	r2,r6,r6
   49914:	1189803a 	cmpltu	r4,r2,r6
   49918:	39c7883a 	add	r3,r7,r7
   4991c:	20c9883a 	add	r4,r4,r3
   49920:	297fffc4 	addi	r5,r5,-1
   49924:	100d883a 	mov	r6,r2
   49928:	200f883a 	mov	r7,r4
   4992c:	d9400615 	stw	r5,24(sp)
   49930:	003fc006 	br	49834 <__divdf3+0x104>
   49934:	483ff21e 	bne	r9,zero,49900 <__divdf3+0x1d0>
   49938:	01004004 	movi	r4,256
   4993c:	7104703a 	and	r2,r14,r4
   49940:	10c4b03a 	or	r2,r2,r3
   49944:	103fee1e 	bne	r2,zero,49900 <__divdf3+0x1d0>
   49948:	31c4b03a 	or	r2,r6,r7
   4994c:	103fec26 	beq	r2,zero,49900 <__divdf3+0x1d0>
   49950:	7205883a 	add	r2,r14,r8
   49954:	1391803a 	cmpltu	r8,r2,r14
   49958:	43d1883a 	add	r8,r8,r15
   4995c:	013fc004 	movi	r4,-256
   49960:	111c703a 	and	r14,r2,r4
   49964:	401f883a 	mov	r15,r8
   49968:	003fe506 	br	49900 <__divdf3+0x1d0>
   4996c:	8009883a 	mov	r4,r16
   49970:	003f9206 	br	497bc <__divdf3+0x8c>
   49974:	9809883a 	mov	r4,r19
   49978:	d8000715 	stw	zero,28(sp)
   4997c:	d8000815 	stw	zero,32(sp)
   49980:	d8000615 	stw	zero,24(sp)
   49984:	003f8d06 	br	497bc <__divdf3+0x8c>

00049988 <__eqdf2>:
   49988:	deffef04 	addi	sp,sp,-68
   4998c:	dc400f15 	stw	r17,60(sp)
   49990:	dc400404 	addi	r17,sp,16
   49994:	2005883a 	mov	r2,r4
   49998:	2807883a 	mov	r3,r5
   4999c:	dc000e15 	stw	r16,56(sp)
   499a0:	d809883a 	mov	r4,sp
   499a4:	880b883a 	mov	r5,r17
   499a8:	dc000904 	addi	r16,sp,36
   499ac:	d8c00115 	stw	r3,4(sp)
   499b0:	d8800015 	stw	r2,0(sp)
   499b4:	d9800215 	stw	r6,8(sp)
   499b8:	dfc01015 	stw	ra,64(sp)
   499bc:	d9c00315 	stw	r7,12(sp)
   499c0:	004a5d00 	call	4a5d0 <__unpack_d>
   499c4:	d9000204 	addi	r4,sp,8
   499c8:	800b883a 	mov	r5,r16
   499cc:	004a5d00 	call	4a5d0 <__unpack_d>
   499d0:	d8800417 	ldw	r2,16(sp)
   499d4:	00c00044 	movi	r3,1
   499d8:	180d883a 	mov	r6,r3
   499dc:	1880062e 	bgeu	r3,r2,499f8 <__eqdf2+0x70>
   499e0:	d8800917 	ldw	r2,36(sp)
   499e4:	8809883a 	mov	r4,r17
   499e8:	800b883a 	mov	r5,r16
   499ec:	1880022e 	bgeu	r3,r2,499f8 <__eqdf2+0x70>
   499f0:	004a7080 	call	4a708 <__fpcmp_parts_d>
   499f4:	100d883a 	mov	r6,r2
   499f8:	3005883a 	mov	r2,r6
   499fc:	dfc01017 	ldw	ra,64(sp)
   49a00:	dc400f17 	ldw	r17,60(sp)
   49a04:	dc000e17 	ldw	r16,56(sp)
   49a08:	dec01104 	addi	sp,sp,68
   49a0c:	f800283a 	ret

00049a10 <__nedf2>:
   49a10:	deffef04 	addi	sp,sp,-68
   49a14:	dc400f15 	stw	r17,60(sp)
   49a18:	dc400404 	addi	r17,sp,16
   49a1c:	2005883a 	mov	r2,r4
   49a20:	2807883a 	mov	r3,r5
   49a24:	dc000e15 	stw	r16,56(sp)
   49a28:	d809883a 	mov	r4,sp
   49a2c:	880b883a 	mov	r5,r17
   49a30:	dc000904 	addi	r16,sp,36
   49a34:	d8c00115 	stw	r3,4(sp)
   49a38:	d8800015 	stw	r2,0(sp)
   49a3c:	d9800215 	stw	r6,8(sp)
   49a40:	dfc01015 	stw	ra,64(sp)
   49a44:	d9c00315 	stw	r7,12(sp)
   49a48:	004a5d00 	call	4a5d0 <__unpack_d>
   49a4c:	d9000204 	addi	r4,sp,8
   49a50:	800b883a 	mov	r5,r16
   49a54:	004a5d00 	call	4a5d0 <__unpack_d>
   49a58:	d8800417 	ldw	r2,16(sp)
   49a5c:	00c00044 	movi	r3,1
   49a60:	180d883a 	mov	r6,r3
   49a64:	1880062e 	bgeu	r3,r2,49a80 <__nedf2+0x70>
   49a68:	d8800917 	ldw	r2,36(sp)
   49a6c:	8809883a 	mov	r4,r17
   49a70:	800b883a 	mov	r5,r16
   49a74:	1880022e 	bgeu	r3,r2,49a80 <__nedf2+0x70>
   49a78:	004a7080 	call	4a708 <__fpcmp_parts_d>
   49a7c:	100d883a 	mov	r6,r2
   49a80:	3005883a 	mov	r2,r6
   49a84:	dfc01017 	ldw	ra,64(sp)
   49a88:	dc400f17 	ldw	r17,60(sp)
   49a8c:	dc000e17 	ldw	r16,56(sp)
   49a90:	dec01104 	addi	sp,sp,68
   49a94:	f800283a 	ret

00049a98 <__gtdf2>:
   49a98:	deffef04 	addi	sp,sp,-68
   49a9c:	dc400f15 	stw	r17,60(sp)
   49aa0:	dc400404 	addi	r17,sp,16
   49aa4:	2005883a 	mov	r2,r4
   49aa8:	2807883a 	mov	r3,r5
   49aac:	dc000e15 	stw	r16,56(sp)
   49ab0:	d809883a 	mov	r4,sp
   49ab4:	880b883a 	mov	r5,r17
   49ab8:	dc000904 	addi	r16,sp,36
   49abc:	d8c00115 	stw	r3,4(sp)
   49ac0:	d8800015 	stw	r2,0(sp)
   49ac4:	d9800215 	stw	r6,8(sp)
   49ac8:	dfc01015 	stw	ra,64(sp)
   49acc:	d9c00315 	stw	r7,12(sp)
   49ad0:	004a5d00 	call	4a5d0 <__unpack_d>
   49ad4:	d9000204 	addi	r4,sp,8
   49ad8:	800b883a 	mov	r5,r16
   49adc:	004a5d00 	call	4a5d0 <__unpack_d>
   49ae0:	d8800417 	ldw	r2,16(sp)
   49ae4:	00c00044 	movi	r3,1
   49ae8:	01bfffc4 	movi	r6,-1
   49aec:	1880062e 	bgeu	r3,r2,49b08 <__gtdf2+0x70>
   49af0:	d8800917 	ldw	r2,36(sp)
   49af4:	8809883a 	mov	r4,r17
   49af8:	800b883a 	mov	r5,r16
   49afc:	1880022e 	bgeu	r3,r2,49b08 <__gtdf2+0x70>
   49b00:	004a7080 	call	4a708 <__fpcmp_parts_d>
   49b04:	100d883a 	mov	r6,r2
   49b08:	3005883a 	mov	r2,r6
   49b0c:	dfc01017 	ldw	ra,64(sp)
   49b10:	dc400f17 	ldw	r17,60(sp)
   49b14:	dc000e17 	ldw	r16,56(sp)
   49b18:	dec01104 	addi	sp,sp,68
   49b1c:	f800283a 	ret

00049b20 <__gedf2>:
   49b20:	deffef04 	addi	sp,sp,-68
   49b24:	dc400f15 	stw	r17,60(sp)
   49b28:	dc400404 	addi	r17,sp,16
   49b2c:	2005883a 	mov	r2,r4
   49b30:	2807883a 	mov	r3,r5
   49b34:	dc000e15 	stw	r16,56(sp)
   49b38:	d809883a 	mov	r4,sp
   49b3c:	880b883a 	mov	r5,r17
   49b40:	dc000904 	addi	r16,sp,36
   49b44:	d8c00115 	stw	r3,4(sp)
   49b48:	d8800015 	stw	r2,0(sp)
   49b4c:	d9800215 	stw	r6,8(sp)
   49b50:	dfc01015 	stw	ra,64(sp)
   49b54:	d9c00315 	stw	r7,12(sp)
   49b58:	004a5d00 	call	4a5d0 <__unpack_d>
   49b5c:	d9000204 	addi	r4,sp,8
   49b60:	800b883a 	mov	r5,r16
   49b64:	004a5d00 	call	4a5d0 <__unpack_d>
   49b68:	d8800417 	ldw	r2,16(sp)
   49b6c:	00c00044 	movi	r3,1
   49b70:	01bfffc4 	movi	r6,-1
   49b74:	1880062e 	bgeu	r3,r2,49b90 <__gedf2+0x70>
   49b78:	d8800917 	ldw	r2,36(sp)
   49b7c:	8809883a 	mov	r4,r17
   49b80:	800b883a 	mov	r5,r16
   49b84:	1880022e 	bgeu	r3,r2,49b90 <__gedf2+0x70>
   49b88:	004a7080 	call	4a708 <__fpcmp_parts_d>
   49b8c:	100d883a 	mov	r6,r2
   49b90:	3005883a 	mov	r2,r6
   49b94:	dfc01017 	ldw	ra,64(sp)
   49b98:	dc400f17 	ldw	r17,60(sp)
   49b9c:	dc000e17 	ldw	r16,56(sp)
   49ba0:	dec01104 	addi	sp,sp,68
   49ba4:	f800283a 	ret

00049ba8 <__ltdf2>:
   49ba8:	deffef04 	addi	sp,sp,-68
   49bac:	dc400f15 	stw	r17,60(sp)
   49bb0:	dc400404 	addi	r17,sp,16
   49bb4:	2005883a 	mov	r2,r4
   49bb8:	2807883a 	mov	r3,r5
   49bbc:	dc000e15 	stw	r16,56(sp)
   49bc0:	d809883a 	mov	r4,sp
   49bc4:	880b883a 	mov	r5,r17
   49bc8:	dc000904 	addi	r16,sp,36
   49bcc:	d8c00115 	stw	r3,4(sp)
   49bd0:	d8800015 	stw	r2,0(sp)
   49bd4:	d9800215 	stw	r6,8(sp)
   49bd8:	dfc01015 	stw	ra,64(sp)
   49bdc:	d9c00315 	stw	r7,12(sp)
   49be0:	004a5d00 	call	4a5d0 <__unpack_d>
   49be4:	d9000204 	addi	r4,sp,8
   49be8:	800b883a 	mov	r5,r16
   49bec:	004a5d00 	call	4a5d0 <__unpack_d>
   49bf0:	d8800417 	ldw	r2,16(sp)
   49bf4:	00c00044 	movi	r3,1
   49bf8:	180d883a 	mov	r6,r3
   49bfc:	1880062e 	bgeu	r3,r2,49c18 <__ltdf2+0x70>
   49c00:	d8800917 	ldw	r2,36(sp)
   49c04:	8809883a 	mov	r4,r17
   49c08:	800b883a 	mov	r5,r16
   49c0c:	1880022e 	bgeu	r3,r2,49c18 <__ltdf2+0x70>
   49c10:	004a7080 	call	4a708 <__fpcmp_parts_d>
   49c14:	100d883a 	mov	r6,r2
   49c18:	3005883a 	mov	r2,r6
   49c1c:	dfc01017 	ldw	ra,64(sp)
   49c20:	dc400f17 	ldw	r17,60(sp)
   49c24:	dc000e17 	ldw	r16,56(sp)
   49c28:	dec01104 	addi	sp,sp,68
   49c2c:	f800283a 	ret

00049c30 <__floatsidf>:
   49c30:	2006d7fa 	srli	r3,r4,31
   49c34:	defff604 	addi	sp,sp,-40
   49c38:	008000c4 	movi	r2,3
   49c3c:	dfc00915 	stw	ra,36(sp)
   49c40:	dcc00815 	stw	r19,32(sp)
   49c44:	dc800715 	stw	r18,28(sp)
   49c48:	dc400615 	stw	r17,24(sp)
   49c4c:	dc000515 	stw	r16,20(sp)
   49c50:	d8800015 	stw	r2,0(sp)
   49c54:	d8c00115 	stw	r3,4(sp)
   49c58:	20000f1e 	bne	r4,zero,49c98 <__floatsidf+0x68>
   49c5c:	00800084 	movi	r2,2
   49c60:	d8800015 	stw	r2,0(sp)
   49c64:	d809883a 	mov	r4,sp
   49c68:	004a2bc0 	call	4a2bc <__pack_d>
   49c6c:	1009883a 	mov	r4,r2
   49c70:	180b883a 	mov	r5,r3
   49c74:	2005883a 	mov	r2,r4
   49c78:	2807883a 	mov	r3,r5
   49c7c:	dfc00917 	ldw	ra,36(sp)
   49c80:	dcc00817 	ldw	r19,32(sp)
   49c84:	dc800717 	ldw	r18,28(sp)
   49c88:	dc400617 	ldw	r17,24(sp)
   49c8c:	dc000517 	ldw	r16,20(sp)
   49c90:	dec00a04 	addi	sp,sp,40
   49c94:	f800283a 	ret
   49c98:	00800f04 	movi	r2,60
   49c9c:	1807003a 	cmpeq	r3,r3,zero
   49ca0:	d8800215 	stw	r2,8(sp)
   49ca4:	18001126 	beq	r3,zero,49cec <__floatsidf+0xbc>
   49ca8:	0027883a 	mov	r19,zero
   49cac:	2025883a 	mov	r18,r4
   49cb0:	d9000315 	stw	r4,12(sp)
   49cb4:	dcc00415 	stw	r19,16(sp)
   49cb8:	004a23c0 	call	4a23c <__clzsi2>
   49cbc:	11000744 	addi	r4,r2,29
   49cc0:	013fe80e 	bge	zero,r4,49c64 <__floatsidf+0x34>
   49cc4:	10bfff44 	addi	r2,r2,-3
   49cc8:	10000c16 	blt	r2,zero,49cfc <__floatsidf+0xcc>
   49ccc:	90a2983a 	sll	r17,r18,r2
   49cd0:	0021883a 	mov	r16,zero
   49cd4:	d8800217 	ldw	r2,8(sp)
   49cd8:	dc400415 	stw	r17,16(sp)
   49cdc:	dc000315 	stw	r16,12(sp)
   49ce0:	1105c83a 	sub	r2,r2,r4
   49ce4:	d8800215 	stw	r2,8(sp)
   49ce8:	003fde06 	br	49c64 <__floatsidf+0x34>
   49cec:	00a00034 	movhi	r2,32768
   49cf0:	20800a26 	beq	r4,r2,49d1c <__floatsidf+0xec>
   49cf4:	0109c83a 	sub	r4,zero,r4
   49cf8:	003feb06 	br	49ca8 <__floatsidf+0x78>
   49cfc:	9006d07a 	srli	r3,r18,1
   49d00:	008007c4 	movi	r2,31
   49d04:	1105c83a 	sub	r2,r2,r4
   49d08:	1886d83a 	srl	r3,r3,r2
   49d0c:	9922983a 	sll	r17,r19,r4
   49d10:	9120983a 	sll	r16,r18,r4
   49d14:	1c62b03a 	or	r17,r3,r17
   49d18:	003fee06 	br	49cd4 <__floatsidf+0xa4>
   49d1c:	0009883a 	mov	r4,zero
   49d20:	01707834 	movhi	r5,49632
   49d24:	003fd306 	br	49c74 <__floatsidf+0x44>

00049d28 <__fixdfsi>:
   49d28:	defff804 	addi	sp,sp,-32
   49d2c:	2005883a 	mov	r2,r4
   49d30:	2807883a 	mov	r3,r5
   49d34:	d809883a 	mov	r4,sp
   49d38:	d9400204 	addi	r5,sp,8
   49d3c:	d8c00115 	stw	r3,4(sp)
   49d40:	d8800015 	stw	r2,0(sp)
   49d44:	dfc00715 	stw	ra,28(sp)
   49d48:	004a5d00 	call	4a5d0 <__unpack_d>
   49d4c:	d8c00217 	ldw	r3,8(sp)
   49d50:	00800084 	movi	r2,2
   49d54:	1880051e 	bne	r3,r2,49d6c <__fixdfsi+0x44>
   49d58:	0007883a 	mov	r3,zero
   49d5c:	1805883a 	mov	r2,r3
   49d60:	dfc00717 	ldw	ra,28(sp)
   49d64:	dec00804 	addi	sp,sp,32
   49d68:	f800283a 	ret
   49d6c:	00800044 	movi	r2,1
   49d70:	10fff92e 	bgeu	r2,r3,49d58 <__fixdfsi+0x30>
   49d74:	00800104 	movi	r2,4
   49d78:	18800426 	beq	r3,r2,49d8c <__fixdfsi+0x64>
   49d7c:	d8c00417 	ldw	r3,16(sp)
   49d80:	183ff516 	blt	r3,zero,49d58 <__fixdfsi+0x30>
   49d84:	00800784 	movi	r2,30
   49d88:	10c0080e 	bge	r2,r3,49dac <__fixdfsi+0x84>
   49d8c:	d8800317 	ldw	r2,12(sp)
   49d90:	1000121e 	bne	r2,zero,49ddc <__fixdfsi+0xb4>
   49d94:	00e00034 	movhi	r3,32768
   49d98:	18ffffc4 	addi	r3,r3,-1
   49d9c:	1805883a 	mov	r2,r3
   49da0:	dfc00717 	ldw	ra,28(sp)
   49da4:	dec00804 	addi	sp,sp,32
   49da8:	f800283a 	ret
   49dac:	00800f04 	movi	r2,60
   49db0:	10d1c83a 	sub	r8,r2,r3
   49db4:	40bff804 	addi	r2,r8,-32
   49db8:	d9800517 	ldw	r6,20(sp)
   49dbc:	d9c00617 	ldw	r7,24(sp)
   49dc0:	10000816 	blt	r2,zero,49de4 <__fixdfsi+0xbc>
   49dc4:	3888d83a 	srl	r4,r7,r2
   49dc8:	d8800317 	ldw	r2,12(sp)
   49dcc:	2007883a 	mov	r3,r4
   49dd0:	103fe226 	beq	r2,zero,49d5c <__fixdfsi+0x34>
   49dd4:	0107c83a 	sub	r3,zero,r4
   49dd8:	003fe006 	br	49d5c <__fixdfsi+0x34>
   49ddc:	00e00034 	movhi	r3,32768
   49de0:	003fde06 	br	49d5c <__fixdfsi+0x34>
   49de4:	39c7883a 	add	r3,r7,r7
   49de8:	008007c4 	movi	r2,31
   49dec:	1205c83a 	sub	r2,r2,r8
   49df0:	1886983a 	sll	r3,r3,r2
   49df4:	3208d83a 	srl	r4,r6,r8
   49df8:	1908b03a 	or	r4,r3,r4
   49dfc:	003ff206 	br	49dc8 <__fixdfsi+0xa0>

00049e00 <__floatunsidf>:
   49e00:	defff204 	addi	sp,sp,-56
   49e04:	dfc00d15 	stw	ra,52(sp)
   49e08:	ddc00c15 	stw	r23,48(sp)
   49e0c:	dd800b15 	stw	r22,44(sp)
   49e10:	dd400a15 	stw	r21,40(sp)
   49e14:	dd000915 	stw	r20,36(sp)
   49e18:	dcc00815 	stw	r19,32(sp)
   49e1c:	dc800715 	stw	r18,28(sp)
   49e20:	dc400615 	stw	r17,24(sp)
   49e24:	dc000515 	stw	r16,20(sp)
   49e28:	d8000115 	stw	zero,4(sp)
   49e2c:	20000f1e 	bne	r4,zero,49e6c <__floatunsidf+0x6c>
   49e30:	00800084 	movi	r2,2
   49e34:	d8800015 	stw	r2,0(sp)
   49e38:	d809883a 	mov	r4,sp
   49e3c:	004a2bc0 	call	4a2bc <__pack_d>
   49e40:	dfc00d17 	ldw	ra,52(sp)
   49e44:	ddc00c17 	ldw	r23,48(sp)
   49e48:	dd800b17 	ldw	r22,44(sp)
   49e4c:	dd400a17 	ldw	r21,40(sp)
   49e50:	dd000917 	ldw	r20,36(sp)
   49e54:	dcc00817 	ldw	r19,32(sp)
   49e58:	dc800717 	ldw	r18,28(sp)
   49e5c:	dc400617 	ldw	r17,24(sp)
   49e60:	dc000517 	ldw	r16,20(sp)
   49e64:	dec00e04 	addi	sp,sp,56
   49e68:	f800283a 	ret
   49e6c:	008000c4 	movi	r2,3
   49e70:	00c00f04 	movi	r3,60
   49e74:	002f883a 	mov	r23,zero
   49e78:	202d883a 	mov	r22,r4
   49e7c:	d8800015 	stw	r2,0(sp)
   49e80:	d8c00215 	stw	r3,8(sp)
   49e84:	d9000315 	stw	r4,12(sp)
   49e88:	ddc00415 	stw	r23,16(sp)
   49e8c:	004a23c0 	call	4a23c <__clzsi2>
   49e90:	12400744 	addi	r9,r2,29
   49e94:	48000b16 	blt	r9,zero,49ec4 <__floatunsidf+0xc4>
   49e98:	483fe726 	beq	r9,zero,49e38 <__floatunsidf+0x38>
   49e9c:	10bfff44 	addi	r2,r2,-3
   49ea0:	10002e16 	blt	r2,zero,49f5c <__floatunsidf+0x15c>
   49ea4:	b0a2983a 	sll	r17,r22,r2
   49ea8:	0021883a 	mov	r16,zero
   49eac:	d8800217 	ldw	r2,8(sp)
   49eb0:	dc400415 	stw	r17,16(sp)
   49eb4:	dc000315 	stw	r16,12(sp)
   49eb8:	1245c83a 	sub	r2,r2,r9
   49ebc:	d8800215 	stw	r2,8(sp)
   49ec0:	003fdd06 	br	49e38 <__floatunsidf+0x38>
   49ec4:	0255c83a 	sub	r10,zero,r9
   49ec8:	51bff804 	addi	r6,r10,-32
   49ecc:	30001b16 	blt	r6,zero,49f3c <__floatunsidf+0x13c>
   49ed0:	b9a8d83a 	srl	r20,r23,r6
   49ed4:	002b883a 	mov	r21,zero
   49ed8:	000f883a 	mov	r7,zero
   49edc:	01000044 	movi	r4,1
   49ee0:	0011883a 	mov	r8,zero
   49ee4:	30002516 	blt	r6,zero,49f7c <__floatunsidf+0x17c>
   49ee8:	21a6983a 	sll	r19,r4,r6
   49eec:	0025883a 	mov	r18,zero
   49ef0:	00bfffc4 	movi	r2,-1
   49ef4:	9089883a 	add	r4,r18,r2
   49ef8:	988b883a 	add	r5,r19,r2
   49efc:	248d803a 	cmpltu	r6,r4,r18
   49f00:	314b883a 	add	r5,r6,r5
   49f04:	b104703a 	and	r2,r22,r4
   49f08:	b946703a 	and	r3,r23,r5
   49f0c:	10c4b03a 	or	r2,r2,r3
   49f10:	10000226 	beq	r2,zero,49f1c <__floatunsidf+0x11c>
   49f14:	01c00044 	movi	r7,1
   49f18:	0011883a 	mov	r8,zero
   49f1c:	d9000217 	ldw	r4,8(sp)
   49f20:	a1c4b03a 	or	r2,r20,r7
   49f24:	aa06b03a 	or	r3,r21,r8
   49f28:	2249c83a 	sub	r4,r4,r9
   49f2c:	d8c00415 	stw	r3,16(sp)
   49f30:	d9000215 	stw	r4,8(sp)
   49f34:	d8800315 	stw	r2,12(sp)
   49f38:	003fbf06 	br	49e38 <__floatunsidf+0x38>
   49f3c:	bdc7883a 	add	r3,r23,r23
   49f40:	008007c4 	movi	r2,31
   49f44:	1285c83a 	sub	r2,r2,r10
   49f48:	1886983a 	sll	r3,r3,r2
   49f4c:	b2a8d83a 	srl	r20,r22,r10
   49f50:	baaad83a 	srl	r21,r23,r10
   49f54:	1d28b03a 	or	r20,r3,r20
   49f58:	003fdf06 	br	49ed8 <__floatunsidf+0xd8>
   49f5c:	b006d07a 	srli	r3,r22,1
   49f60:	008007c4 	movi	r2,31
   49f64:	1245c83a 	sub	r2,r2,r9
   49f68:	1886d83a 	srl	r3,r3,r2
   49f6c:	ba62983a 	sll	r17,r23,r9
   49f70:	b260983a 	sll	r16,r22,r9
   49f74:	1c62b03a 	or	r17,r3,r17
   49f78:	003fcc06 	br	49eac <__floatunsidf+0xac>
   49f7c:	2006d07a 	srli	r3,r4,1
   49f80:	008007c4 	movi	r2,31
   49f84:	1285c83a 	sub	r2,r2,r10
   49f88:	18a6d83a 	srl	r19,r3,r2
   49f8c:	22a4983a 	sll	r18,r4,r10
   49f90:	003fd706 	br	49ef0 <__floatunsidf+0xf0>

00049f94 <udivmodsi4>:
   49f94:	29001b2e 	bgeu	r5,r4,4a004 <udivmodsi4+0x70>
   49f98:	28001a16 	blt	r5,zero,4a004 <udivmodsi4+0x70>
   49f9c:	00800044 	movi	r2,1
   49fa0:	0007883a 	mov	r3,zero
   49fa4:	01c007c4 	movi	r7,31
   49fa8:	00000306 	br	49fb8 <udivmodsi4+0x24>
   49fac:	19c01326 	beq	r3,r7,49ffc <udivmodsi4+0x68>
   49fb0:	18c00044 	addi	r3,r3,1
   49fb4:	28000416 	blt	r5,zero,49fc8 <udivmodsi4+0x34>
   49fb8:	294b883a 	add	r5,r5,r5
   49fbc:	1085883a 	add	r2,r2,r2
   49fc0:	293ffa36 	bltu	r5,r4,49fac <udivmodsi4+0x18>
   49fc4:	10000d26 	beq	r2,zero,49ffc <udivmodsi4+0x68>
   49fc8:	0007883a 	mov	r3,zero
   49fcc:	21400236 	bltu	r4,r5,49fd8 <udivmodsi4+0x44>
   49fd0:	2149c83a 	sub	r4,r4,r5
   49fd4:	1886b03a 	or	r3,r3,r2
   49fd8:	1004d07a 	srli	r2,r2,1
   49fdc:	280ad07a 	srli	r5,r5,1
   49fe0:	103ffa1e 	bne	r2,zero,49fcc <udivmodsi4+0x38>
   49fe4:	30000226 	beq	r6,zero,49ff0 <udivmodsi4+0x5c>
   49fe8:	2005883a 	mov	r2,r4
   49fec:	f800283a 	ret
   49ff0:	1809883a 	mov	r4,r3
   49ff4:	2005883a 	mov	r2,r4
   49ff8:	f800283a 	ret
   49ffc:	0007883a 	mov	r3,zero
   4a000:	003ff806 	br	49fe4 <udivmodsi4+0x50>
   4a004:	00800044 	movi	r2,1
   4a008:	0007883a 	mov	r3,zero
   4a00c:	003fef06 	br	49fcc <udivmodsi4+0x38>

0004a010 <__divsi3>:
   4a010:	defffe04 	addi	sp,sp,-8
   4a014:	dc000015 	stw	r16,0(sp)
   4a018:	dfc00115 	stw	ra,4(sp)
   4a01c:	0021883a 	mov	r16,zero
   4a020:	20000c16 	blt	r4,zero,4a054 <__divsi3+0x44>
   4a024:	000d883a 	mov	r6,zero
   4a028:	28000e16 	blt	r5,zero,4a064 <__divsi3+0x54>
   4a02c:	0049f940 	call	49f94 <udivmodsi4>
   4a030:	1007883a 	mov	r3,r2
   4a034:	8005003a 	cmpeq	r2,r16,zero
   4a038:	1000011e 	bne	r2,zero,4a040 <__divsi3+0x30>
   4a03c:	00c7c83a 	sub	r3,zero,r3
   4a040:	1805883a 	mov	r2,r3
   4a044:	dfc00117 	ldw	ra,4(sp)
   4a048:	dc000017 	ldw	r16,0(sp)
   4a04c:	dec00204 	addi	sp,sp,8
   4a050:	f800283a 	ret
   4a054:	0109c83a 	sub	r4,zero,r4
   4a058:	04000044 	movi	r16,1
   4a05c:	000d883a 	mov	r6,zero
   4a060:	283ff20e 	bge	r5,zero,4a02c <__divsi3+0x1c>
   4a064:	014bc83a 	sub	r5,zero,r5
   4a068:	8021003a 	cmpeq	r16,r16,zero
   4a06c:	003fef06 	br	4a02c <__divsi3+0x1c>

0004a070 <__modsi3>:
   4a070:	deffff04 	addi	sp,sp,-4
   4a074:	dfc00015 	stw	ra,0(sp)
   4a078:	01800044 	movi	r6,1
   4a07c:	2807883a 	mov	r3,r5
   4a080:	20000416 	blt	r4,zero,4a094 <__modsi3+0x24>
   4a084:	28000c16 	blt	r5,zero,4a0b8 <__modsi3+0x48>
   4a088:	dfc00017 	ldw	ra,0(sp)
   4a08c:	dec00104 	addi	sp,sp,4
   4a090:	0049f941 	jmpi	49f94 <udivmodsi4>
   4a094:	0109c83a 	sub	r4,zero,r4
   4a098:	28000b16 	blt	r5,zero,4a0c8 <__modsi3+0x58>
   4a09c:	180b883a 	mov	r5,r3
   4a0a0:	01800044 	movi	r6,1
   4a0a4:	0049f940 	call	49f94 <udivmodsi4>
   4a0a8:	0085c83a 	sub	r2,zero,r2
   4a0ac:	dfc00017 	ldw	ra,0(sp)
   4a0b0:	dec00104 	addi	sp,sp,4
   4a0b4:	f800283a 	ret
   4a0b8:	014bc83a 	sub	r5,zero,r5
   4a0bc:	dfc00017 	ldw	ra,0(sp)
   4a0c0:	dec00104 	addi	sp,sp,4
   4a0c4:	0049f941 	jmpi	49f94 <udivmodsi4>
   4a0c8:	0147c83a 	sub	r3,zero,r5
   4a0cc:	003ff306 	br	4a09c <__modsi3+0x2c>

0004a0d0 <__udivsi3>:
   4a0d0:	000d883a 	mov	r6,zero
   4a0d4:	0049f941 	jmpi	49f94 <udivmodsi4>

0004a0d8 <__umodsi3>:
   4a0d8:	01800044 	movi	r6,1
   4a0dc:	0049f941 	jmpi	49f94 <udivmodsi4>

0004a0e0 <__mulsi3>:
   4a0e0:	20000a26 	beq	r4,zero,4a10c <__mulsi3+0x2c>
   4a0e4:	0007883a 	mov	r3,zero
   4a0e8:	2080004c 	andi	r2,r4,1
   4a0ec:	1005003a 	cmpeq	r2,r2,zero
   4a0f0:	2008d07a 	srli	r4,r4,1
   4a0f4:	1000011e 	bne	r2,zero,4a0fc <__mulsi3+0x1c>
   4a0f8:	1947883a 	add	r3,r3,r5
   4a0fc:	294b883a 	add	r5,r5,r5
   4a100:	203ff91e 	bne	r4,zero,4a0e8 <__mulsi3+0x8>
   4a104:	1805883a 	mov	r2,r3
   4a108:	f800283a 	ret
   4a10c:	0007883a 	mov	r3,zero
   4a110:	1805883a 	mov	r2,r3
   4a114:	f800283a 	ret

0004a118 <__muldi3>:
   4a118:	defff204 	addi	sp,sp,-56
   4a11c:	df000c15 	stw	fp,48(sp)
   4a120:	3038d43a 	srli	fp,r6,16
   4a124:	dd000815 	stw	r20,32(sp)
   4a128:	dc400515 	stw	r17,20(sp)
   4a12c:	2028d43a 	srli	r20,r4,16
   4a130:	247fffcc 	andi	r17,r4,65535
   4a134:	dc000415 	stw	r16,16(sp)
   4a138:	343fffcc 	andi	r16,r6,65535
   4a13c:	dcc00715 	stw	r19,28(sp)
   4a140:	d9000015 	stw	r4,0(sp)
   4a144:	2827883a 	mov	r19,r5
   4a148:	8809883a 	mov	r4,r17
   4a14c:	d9400115 	stw	r5,4(sp)
   4a150:	800b883a 	mov	r5,r16
   4a154:	d9800215 	stw	r6,8(sp)
   4a158:	dfc00d15 	stw	ra,52(sp)
   4a15c:	d9c00315 	stw	r7,12(sp)
   4a160:	dd800a15 	stw	r22,40(sp)
   4a164:	dd400915 	stw	r21,36(sp)
   4a168:	302d883a 	mov	r22,r6
   4a16c:	ddc00b15 	stw	r23,44(sp)
   4a170:	dc800615 	stw	r18,24(sp)
   4a174:	004a0e00 	call	4a0e0 <__mulsi3>
   4a178:	8809883a 	mov	r4,r17
   4a17c:	e00b883a 	mov	r5,fp
   4a180:	102b883a 	mov	r21,r2
   4a184:	004a0e00 	call	4a0e0 <__mulsi3>
   4a188:	800b883a 	mov	r5,r16
   4a18c:	a009883a 	mov	r4,r20
   4a190:	1023883a 	mov	r17,r2
   4a194:	004a0e00 	call	4a0e0 <__mulsi3>
   4a198:	a009883a 	mov	r4,r20
   4a19c:	e00b883a 	mov	r5,fp
   4a1a0:	1021883a 	mov	r16,r2
   4a1a4:	004a0e00 	call	4a0e0 <__mulsi3>
   4a1a8:	a8ffffcc 	andi	r3,r21,65535
   4a1ac:	a82ad43a 	srli	r21,r21,16
   4a1b0:	8c23883a 	add	r17,r17,r16
   4a1b4:	1011883a 	mov	r8,r2
   4a1b8:	ac6b883a 	add	r21,r21,r17
   4a1bc:	a804943a 	slli	r2,r21,16
   4a1c0:	b009883a 	mov	r4,r22
   4a1c4:	980b883a 	mov	r5,r19
   4a1c8:	10c7883a 	add	r3,r2,r3
   4a1cc:	a812d43a 	srli	r9,r21,16
   4a1d0:	180d883a 	mov	r6,r3
   4a1d4:	ac00022e 	bgeu	r21,r16,4a1e0 <__muldi3+0xc8>
   4a1d8:	00800074 	movhi	r2,1
   4a1dc:	4091883a 	add	r8,r8,r2
   4a1e0:	4267883a 	add	r19,r8,r9
   4a1e4:	302d883a 	mov	r22,r6
   4a1e8:	004a0e00 	call	4a0e0 <__mulsi3>
   4a1ec:	d9400317 	ldw	r5,12(sp)
   4a1f0:	d9000017 	ldw	r4,0(sp)
   4a1f4:	1023883a 	mov	r17,r2
   4a1f8:	004a0e00 	call	4a0e0 <__mulsi3>
   4a1fc:	14cb883a 	add	r5,r2,r19
   4a200:	894b883a 	add	r5,r17,r5
   4a204:	b005883a 	mov	r2,r22
   4a208:	2807883a 	mov	r3,r5
   4a20c:	dfc00d17 	ldw	ra,52(sp)
   4a210:	df000c17 	ldw	fp,48(sp)
   4a214:	ddc00b17 	ldw	r23,44(sp)
   4a218:	dd800a17 	ldw	r22,40(sp)
   4a21c:	dd400917 	ldw	r21,36(sp)
   4a220:	dd000817 	ldw	r20,32(sp)
   4a224:	dcc00717 	ldw	r19,28(sp)
   4a228:	dc800617 	ldw	r18,24(sp)
   4a22c:	dc400517 	ldw	r17,20(sp)
   4a230:	dc000417 	ldw	r16,16(sp)
   4a234:	dec00e04 	addi	sp,sp,56
   4a238:	f800283a 	ret

0004a23c <__clzsi2>:
   4a23c:	00bfffd4 	movui	r2,65535
   4a240:	11000e36 	bltu	r2,r4,4a27c <__clzsi2+0x40>
   4a244:	00803fc4 	movi	r2,255
   4a248:	01400204 	movi	r5,8
   4a24c:	0007883a 	mov	r3,zero
   4a250:	11001036 	bltu	r2,r4,4a294 <__clzsi2+0x58>
   4a254:	000b883a 	mov	r5,zero
   4a258:	20c6d83a 	srl	r3,r4,r3
   4a25c:	00800174 	movhi	r2,5
   4a260:	10b5b104 	addi	r2,r2,-10556
   4a264:	1887883a 	add	r3,r3,r2
   4a268:	18800003 	ldbu	r2,0(r3)
   4a26c:	00c00804 	movi	r3,32
   4a270:	2885883a 	add	r2,r5,r2
   4a274:	1885c83a 	sub	r2,r3,r2
   4a278:	f800283a 	ret
   4a27c:	01400404 	movi	r5,16
   4a280:	00804034 	movhi	r2,256
   4a284:	10bfffc4 	addi	r2,r2,-1
   4a288:	2807883a 	mov	r3,r5
   4a28c:	113ff22e 	bgeu	r2,r4,4a258 <__clzsi2+0x1c>
   4a290:	01400604 	movi	r5,24
   4a294:	2807883a 	mov	r3,r5
   4a298:	20c6d83a 	srl	r3,r4,r3
   4a29c:	00800174 	movhi	r2,5
   4a2a0:	10b5b104 	addi	r2,r2,-10556
   4a2a4:	1887883a 	add	r3,r3,r2
   4a2a8:	18800003 	ldbu	r2,0(r3)
   4a2ac:	00c00804 	movi	r3,32
   4a2b0:	2885883a 	add	r2,r5,r2
   4a2b4:	1885c83a 	sub	r2,r3,r2
   4a2b8:	f800283a 	ret

0004a2bc <__pack_d>:
   4a2bc:	20c00017 	ldw	r3,0(r4)
   4a2c0:	defffd04 	addi	sp,sp,-12
   4a2c4:	dc000015 	stw	r16,0(sp)
   4a2c8:	dc800215 	stw	r18,8(sp)
   4a2cc:	dc400115 	stw	r17,4(sp)
   4a2d0:	00800044 	movi	r2,1
   4a2d4:	22000317 	ldw	r8,12(r4)
   4a2d8:	001f883a 	mov	r15,zero
   4a2dc:	22400417 	ldw	r9,16(r4)
   4a2e0:	24000117 	ldw	r16,4(r4)
   4a2e4:	10c0552e 	bgeu	r2,r3,4a43c <__pack_d+0x180>
   4a2e8:	00800104 	movi	r2,4
   4a2ec:	18804f26 	beq	r3,r2,4a42c <__pack_d+0x170>
   4a2f0:	00800084 	movi	r2,2
   4a2f4:	18800226 	beq	r3,r2,4a300 <__pack_d+0x44>
   4a2f8:	4244b03a 	or	r2,r8,r9
   4a2fc:	10001a1e 	bne	r2,zero,4a368 <__pack_d+0xac>
   4a300:	000d883a 	mov	r6,zero
   4a304:	000f883a 	mov	r7,zero
   4a308:	0011883a 	mov	r8,zero
   4a30c:	00800434 	movhi	r2,16
   4a310:	10bfffc4 	addi	r2,r2,-1
   4a314:	301d883a 	mov	r14,r6
   4a318:	3884703a 	and	r2,r7,r2
   4a31c:	400a953a 	slli	r5,r8,20
   4a320:	79bffc2c 	andhi	r6,r15,65520
   4a324:	308cb03a 	or	r6,r6,r2
   4a328:	00e00434 	movhi	r3,32784
   4a32c:	18ffffc4 	addi	r3,r3,-1
   4a330:	800497fa 	slli	r2,r16,31
   4a334:	30c6703a 	and	r3,r6,r3
   4a338:	1946b03a 	or	r3,r3,r5
   4a33c:	01600034 	movhi	r5,32768
   4a340:	297fffc4 	addi	r5,r5,-1
   4a344:	194a703a 	and	r5,r3,r5
   4a348:	288ab03a 	or	r5,r5,r2
   4a34c:	2807883a 	mov	r3,r5
   4a350:	7005883a 	mov	r2,r14
   4a354:	dc800217 	ldw	r18,8(sp)
   4a358:	dc400117 	ldw	r17,4(sp)
   4a35c:	dc000017 	ldw	r16,0(sp)
   4a360:	dec00304 	addi	sp,sp,12
   4a364:	f800283a 	ret
   4a368:	21000217 	ldw	r4,8(r4)
   4a36c:	00bf0084 	movi	r2,-1022
   4a370:	20803f16 	blt	r4,r2,4a470 <__pack_d+0x1b4>
   4a374:	0080ffc4 	movi	r2,1023
   4a378:	11002c16 	blt	r2,r4,4a42c <__pack_d+0x170>
   4a37c:	00803fc4 	movi	r2,255
   4a380:	408c703a 	and	r6,r8,r2
   4a384:	00802004 	movi	r2,128
   4a388:	0007883a 	mov	r3,zero
   4a38c:	000f883a 	mov	r7,zero
   4a390:	2280ffc4 	addi	r10,r4,1023
   4a394:	30801e26 	beq	r6,r2,4a410 <__pack_d+0x154>
   4a398:	00801fc4 	movi	r2,127
   4a39c:	4089883a 	add	r4,r8,r2
   4a3a0:	220d803a 	cmpltu	r6,r4,r8
   4a3a4:	324d883a 	add	r6,r6,r9
   4a3a8:	2011883a 	mov	r8,r4
   4a3ac:	3013883a 	mov	r9,r6
   4a3b0:	00880034 	movhi	r2,8192
   4a3b4:	10bfffc4 	addi	r2,r2,-1
   4a3b8:	12400d36 	bltu	r2,r9,4a3f0 <__pack_d+0x134>
   4a3bc:	4804963a 	slli	r2,r9,24
   4a3c0:	400cd23a 	srli	r6,r8,8
   4a3c4:	480ed23a 	srli	r7,r9,8
   4a3c8:	013fffc4 	movi	r4,-1
   4a3cc:	118cb03a 	or	r6,r2,r6
   4a3d0:	01400434 	movhi	r5,16
   4a3d4:	297fffc4 	addi	r5,r5,-1
   4a3d8:	3104703a 	and	r2,r6,r4
   4a3dc:	3946703a 	and	r3,r7,r5
   4a3e0:	5201ffcc 	andi	r8,r10,2047
   4a3e4:	100d883a 	mov	r6,r2
   4a3e8:	180f883a 	mov	r7,r3
   4a3ec:	003fc706 	br	4a30c <__pack_d+0x50>
   4a3f0:	480897fa 	slli	r4,r9,31
   4a3f4:	4004d07a 	srli	r2,r8,1
   4a3f8:	4806d07a 	srli	r3,r9,1
   4a3fc:	52800044 	addi	r10,r10,1
   4a400:	2084b03a 	or	r2,r4,r2
   4a404:	1011883a 	mov	r8,r2
   4a408:	1813883a 	mov	r9,r3
   4a40c:	003feb06 	br	4a3bc <__pack_d+0x100>
   4a410:	383fe11e 	bne	r7,zero,4a398 <__pack_d+0xdc>
   4a414:	01004004 	movi	r4,256
   4a418:	4104703a 	and	r2,r8,r4
   4a41c:	10c4b03a 	or	r2,r2,r3
   4a420:	103fe326 	beq	r2,zero,4a3b0 <__pack_d+0xf4>
   4a424:	3005883a 	mov	r2,r6
   4a428:	003fdc06 	br	4a39c <__pack_d+0xe0>
   4a42c:	000d883a 	mov	r6,zero
   4a430:	000f883a 	mov	r7,zero
   4a434:	0201ffc4 	movi	r8,2047
   4a438:	003fb406 	br	4a30c <__pack_d+0x50>
   4a43c:	0005883a 	mov	r2,zero
   4a440:	00c00234 	movhi	r3,8
   4a444:	408cb03a 	or	r6,r8,r2
   4a448:	48ceb03a 	or	r7,r9,r3
   4a44c:	013fffc4 	movi	r4,-1
   4a450:	01400434 	movhi	r5,16
   4a454:	297fffc4 	addi	r5,r5,-1
   4a458:	3104703a 	and	r2,r6,r4
   4a45c:	3946703a 	and	r3,r7,r5
   4a460:	100d883a 	mov	r6,r2
   4a464:	180f883a 	mov	r7,r3
   4a468:	0201ffc4 	movi	r8,2047
   4a46c:	003fa706 	br	4a30c <__pack_d+0x50>
   4a470:	1109c83a 	sub	r4,r2,r4
   4a474:	00800e04 	movi	r2,56
   4a478:	11004316 	blt	r2,r4,4a588 <__pack_d+0x2cc>
   4a47c:	21fff804 	addi	r7,r4,-32
   4a480:	38004516 	blt	r7,zero,4a598 <__pack_d+0x2dc>
   4a484:	49d8d83a 	srl	r12,r9,r7
   4a488:	001b883a 	mov	r13,zero
   4a48c:	0023883a 	mov	r17,zero
   4a490:	01400044 	movi	r5,1
   4a494:	0025883a 	mov	r18,zero
   4a498:	38004716 	blt	r7,zero,4a5b8 <__pack_d+0x2fc>
   4a49c:	29d6983a 	sll	r11,r5,r7
   4a4a0:	0015883a 	mov	r10,zero
   4a4a4:	00bfffc4 	movi	r2,-1
   4a4a8:	5089883a 	add	r4,r10,r2
   4a4ac:	588b883a 	add	r5,r11,r2
   4a4b0:	228d803a 	cmpltu	r6,r4,r10
   4a4b4:	314b883a 	add	r5,r6,r5
   4a4b8:	4104703a 	and	r2,r8,r4
   4a4bc:	4946703a 	and	r3,r9,r5
   4a4c0:	10c4b03a 	or	r2,r2,r3
   4a4c4:	10000226 	beq	r2,zero,4a4d0 <__pack_d+0x214>
   4a4c8:	04400044 	movi	r17,1
   4a4cc:	0025883a 	mov	r18,zero
   4a4d0:	00803fc4 	movi	r2,255
   4a4d4:	644eb03a 	or	r7,r12,r17
   4a4d8:	3892703a 	and	r9,r7,r2
   4a4dc:	00802004 	movi	r2,128
   4a4e0:	6c90b03a 	or	r8,r13,r18
   4a4e4:	0015883a 	mov	r10,zero
   4a4e8:	48801626 	beq	r9,r2,4a544 <__pack_d+0x288>
   4a4ec:	01001fc4 	movi	r4,127
   4a4f0:	3905883a 	add	r2,r7,r4
   4a4f4:	11cd803a 	cmpltu	r6,r2,r7
   4a4f8:	320d883a 	add	r6,r6,r8
   4a4fc:	100f883a 	mov	r7,r2
   4a500:	00840034 	movhi	r2,4096
   4a504:	10bfffc4 	addi	r2,r2,-1
   4a508:	3011883a 	mov	r8,r6
   4a50c:	0007883a 	mov	r3,zero
   4a510:	11801b36 	bltu	r2,r6,4a580 <__pack_d+0x2c4>
   4a514:	4004963a 	slli	r2,r8,24
   4a518:	3808d23a 	srli	r4,r7,8
   4a51c:	400ad23a 	srli	r5,r8,8
   4a520:	1813883a 	mov	r9,r3
   4a524:	1108b03a 	or	r4,r2,r4
   4a528:	00bfffc4 	movi	r2,-1
   4a52c:	00c00434 	movhi	r3,16
   4a530:	18ffffc4 	addi	r3,r3,-1
   4a534:	208c703a 	and	r6,r4,r2
   4a538:	28ce703a 	and	r7,r5,r3
   4a53c:	4a01ffcc 	andi	r8,r9,2047
   4a540:	003f7206 	br	4a30c <__pack_d+0x50>
   4a544:	503fe91e 	bne	r10,zero,4a4ec <__pack_d+0x230>
   4a548:	01004004 	movi	r4,256
   4a54c:	3904703a 	and	r2,r7,r4
   4a550:	0007883a 	mov	r3,zero
   4a554:	10c4b03a 	or	r2,r2,r3
   4a558:	10000626 	beq	r2,zero,4a574 <__pack_d+0x2b8>
   4a55c:	3a45883a 	add	r2,r7,r9
   4a560:	11cd803a 	cmpltu	r6,r2,r7
   4a564:	320d883a 	add	r6,r6,r8
   4a568:	100f883a 	mov	r7,r2
   4a56c:	3011883a 	mov	r8,r6
   4a570:	0007883a 	mov	r3,zero
   4a574:	00840034 	movhi	r2,4096
   4a578:	10bfffc4 	addi	r2,r2,-1
   4a57c:	123fe52e 	bgeu	r2,r8,4a514 <__pack_d+0x258>
   4a580:	00c00044 	movi	r3,1
   4a584:	003fe306 	br	4a514 <__pack_d+0x258>
   4a588:	0009883a 	mov	r4,zero
   4a58c:	0013883a 	mov	r9,zero
   4a590:	000b883a 	mov	r5,zero
   4a594:	003fe406 	br	4a528 <__pack_d+0x26c>
   4a598:	4a47883a 	add	r3,r9,r9
   4a59c:	008007c4 	movi	r2,31
   4a5a0:	1105c83a 	sub	r2,r2,r4
   4a5a4:	1886983a 	sll	r3,r3,r2
   4a5a8:	4118d83a 	srl	r12,r8,r4
   4a5ac:	491ad83a 	srl	r13,r9,r4
   4a5b0:	1b18b03a 	or	r12,r3,r12
   4a5b4:	003fb506 	br	4a48c <__pack_d+0x1d0>
   4a5b8:	2806d07a 	srli	r3,r5,1
   4a5bc:	008007c4 	movi	r2,31
   4a5c0:	1105c83a 	sub	r2,r2,r4
   4a5c4:	1896d83a 	srl	r11,r3,r2
   4a5c8:	2914983a 	sll	r10,r5,r4
   4a5cc:	003fb506 	br	4a4a4 <__pack_d+0x1e8>

0004a5d0 <__unpack_d>:
   4a5d0:	20c00117 	ldw	r3,4(r4)
   4a5d4:	22400017 	ldw	r9,0(r4)
   4a5d8:	00800434 	movhi	r2,16
   4a5dc:	10bfffc4 	addi	r2,r2,-1
   4a5e0:	1808d53a 	srli	r4,r3,20
   4a5e4:	180cd7fa 	srli	r6,r3,31
   4a5e8:	1894703a 	and	r10,r3,r2
   4a5ec:	2201ffcc 	andi	r8,r4,2047
   4a5f0:	281b883a 	mov	r13,r5
   4a5f4:	4817883a 	mov	r11,r9
   4a5f8:	29800115 	stw	r6,4(r5)
   4a5fc:	5019883a 	mov	r12,r10
   4a600:	40001e1e 	bne	r8,zero,4a67c <__unpack_d+0xac>
   4a604:	4a84b03a 	or	r2,r9,r10
   4a608:	10001926 	beq	r2,zero,4a670 <__unpack_d+0xa0>
   4a60c:	4804d63a 	srli	r2,r9,24
   4a610:	500c923a 	slli	r6,r10,8
   4a614:	013f0084 	movi	r4,-1022
   4a618:	00c40034 	movhi	r3,4096
   4a61c:	18ffffc4 	addi	r3,r3,-1
   4a620:	118cb03a 	or	r6,r2,r6
   4a624:	008000c4 	movi	r2,3
   4a628:	480a923a 	slli	r5,r9,8
   4a62c:	68800015 	stw	r2,0(r13)
   4a630:	69000215 	stw	r4,8(r13)
   4a634:	19800b36 	bltu	r3,r6,4a664 <__unpack_d+0x94>
   4a638:	200f883a 	mov	r7,r4
   4a63c:	1811883a 	mov	r8,r3
   4a640:	2945883a 	add	r2,r5,r5
   4a644:	1149803a 	cmpltu	r4,r2,r5
   4a648:	3187883a 	add	r3,r6,r6
   4a64c:	20c9883a 	add	r4,r4,r3
   4a650:	100b883a 	mov	r5,r2
   4a654:	200d883a 	mov	r6,r4
   4a658:	39ffffc4 	addi	r7,r7,-1
   4a65c:	413ff82e 	bgeu	r8,r4,4a640 <__unpack_d+0x70>
   4a660:	69c00215 	stw	r7,8(r13)
   4a664:	69800415 	stw	r6,16(r13)
   4a668:	69400315 	stw	r5,12(r13)
   4a66c:	f800283a 	ret
   4a670:	00800084 	movi	r2,2
   4a674:	28800015 	stw	r2,0(r5)
   4a678:	f800283a 	ret
   4a67c:	0081ffc4 	movi	r2,2047
   4a680:	40800f26 	beq	r8,r2,4a6c0 <__unpack_d+0xf0>
   4a684:	480cd63a 	srli	r6,r9,24
   4a688:	5006923a 	slli	r3,r10,8
   4a68c:	4804923a 	slli	r2,r9,8
   4a690:	0009883a 	mov	r4,zero
   4a694:	30c6b03a 	or	r3,r6,r3
   4a698:	01440034 	movhi	r5,4096
   4a69c:	110cb03a 	or	r6,r2,r4
   4a6a0:	423f0044 	addi	r8,r8,-1023
   4a6a4:	194eb03a 	or	r7,r3,r5
   4a6a8:	008000c4 	movi	r2,3
   4a6ac:	69c00415 	stw	r7,16(r13)
   4a6b0:	6a000215 	stw	r8,8(r13)
   4a6b4:	68800015 	stw	r2,0(r13)
   4a6b8:	69800315 	stw	r6,12(r13)
   4a6bc:	f800283a 	ret
   4a6c0:	4a84b03a 	or	r2,r9,r10
   4a6c4:	1000031e 	bne	r2,zero,4a6d4 <__unpack_d+0x104>
   4a6c8:	00800104 	movi	r2,4
   4a6cc:	28800015 	stw	r2,0(r5)
   4a6d0:	f800283a 	ret
   4a6d4:	0009883a 	mov	r4,zero
   4a6d8:	01400234 	movhi	r5,8
   4a6dc:	4904703a 	and	r2,r9,r4
   4a6e0:	5146703a 	and	r3,r10,r5
   4a6e4:	10c4b03a 	or	r2,r2,r3
   4a6e8:	10000526 	beq	r2,zero,4a700 <__unpack_d+0x130>
   4a6ec:	00800044 	movi	r2,1
   4a6f0:	68800015 	stw	r2,0(r13)
   4a6f4:	6b000415 	stw	r12,16(r13)
   4a6f8:	6ac00315 	stw	r11,12(r13)
   4a6fc:	f800283a 	ret
   4a700:	68000015 	stw	zero,0(r13)
   4a704:	003ffb06 	br	4a6f4 <__unpack_d+0x124>

0004a708 <__fpcmp_parts_d>:
   4a708:	21800017 	ldw	r6,0(r4)
   4a70c:	00c00044 	movi	r3,1
   4a710:	19800a2e 	bgeu	r3,r6,4a73c <__fpcmp_parts_d+0x34>
   4a714:	28800017 	ldw	r2,0(r5)
   4a718:	1880082e 	bgeu	r3,r2,4a73c <__fpcmp_parts_d+0x34>
   4a71c:	00c00104 	movi	r3,4
   4a720:	30c02626 	beq	r6,r3,4a7bc <__fpcmp_parts_d+0xb4>
   4a724:	10c02226 	beq	r2,r3,4a7b0 <__fpcmp_parts_d+0xa8>
   4a728:	00c00084 	movi	r3,2
   4a72c:	30c00526 	beq	r6,r3,4a744 <__fpcmp_parts_d+0x3c>
   4a730:	10c0071e 	bne	r2,r3,4a750 <__fpcmp_parts_d+0x48>
   4a734:	20800117 	ldw	r2,4(r4)
   4a738:	1000091e 	bne	r2,zero,4a760 <__fpcmp_parts_d+0x58>
   4a73c:	00800044 	movi	r2,1
   4a740:	f800283a 	ret
   4a744:	10c01a1e 	bne	r2,r3,4a7b0 <__fpcmp_parts_d+0xa8>
   4a748:	0005883a 	mov	r2,zero
   4a74c:	f800283a 	ret
   4a750:	22000117 	ldw	r8,4(r4)
   4a754:	28800117 	ldw	r2,4(r5)
   4a758:	40800326 	beq	r8,r2,4a768 <__fpcmp_parts_d+0x60>
   4a75c:	403ff726 	beq	r8,zero,4a73c <__fpcmp_parts_d+0x34>
   4a760:	00bfffc4 	movi	r2,-1
   4a764:	f800283a 	ret
   4a768:	20c00217 	ldw	r3,8(r4)
   4a76c:	28800217 	ldw	r2,8(r5)
   4a770:	10fffa16 	blt	r2,r3,4a75c <__fpcmp_parts_d+0x54>
   4a774:	18800916 	blt	r3,r2,4a79c <__fpcmp_parts_d+0x94>
   4a778:	21c00417 	ldw	r7,16(r4)
   4a77c:	28c00417 	ldw	r3,16(r5)
   4a780:	21800317 	ldw	r6,12(r4)
   4a784:	28800317 	ldw	r2,12(r5)
   4a788:	19fff436 	bltu	r3,r7,4a75c <__fpcmp_parts_d+0x54>
   4a78c:	38c00526 	beq	r7,r3,4a7a4 <__fpcmp_parts_d+0x9c>
   4a790:	38c00236 	bltu	r7,r3,4a79c <__fpcmp_parts_d+0x94>
   4a794:	19ffec1e 	bne	r3,r7,4a748 <__fpcmp_parts_d+0x40>
   4a798:	30bfeb2e 	bgeu	r6,r2,4a748 <__fpcmp_parts_d+0x40>
   4a79c:	403fe71e 	bne	r8,zero,4a73c <__fpcmp_parts_d+0x34>
   4a7a0:	003fef06 	br	4a760 <__fpcmp_parts_d+0x58>
   4a7a4:	11bffa2e 	bgeu	r2,r6,4a790 <__fpcmp_parts_d+0x88>
   4a7a8:	403fe426 	beq	r8,zero,4a73c <__fpcmp_parts_d+0x34>
   4a7ac:	003fec06 	br	4a760 <__fpcmp_parts_d+0x58>
   4a7b0:	28800117 	ldw	r2,4(r5)
   4a7b4:	103fe11e 	bne	r2,zero,4a73c <__fpcmp_parts_d+0x34>
   4a7b8:	003fe906 	br	4a760 <__fpcmp_parts_d+0x58>
   4a7bc:	11bfdd1e 	bne	r2,r6,4a734 <__fpcmp_parts_d+0x2c>
   4a7c0:	28c00117 	ldw	r3,4(r5)
   4a7c4:	20800117 	ldw	r2,4(r4)
   4a7c8:	1885c83a 	sub	r2,r3,r2
   4a7cc:	f800283a 	ret

0004a7d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4a7d0:	defff804 	addi	sp,sp,-32
   4a7d4:	dfc00715 	stw	ra,28(sp)
   4a7d8:	df000615 	stw	fp,24(sp)
   4a7dc:	df000604 	addi	fp,sp,24
   4a7e0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4a7e4:	e0bffc17 	ldw	r2,-16(fp)
   4a7e8:	1004803a 	cmplt	r2,r2,zero
   4a7ec:	1000091e 	bne	r2,zero,4a814 <close+0x44>
   4a7f0:	e13ffc17 	ldw	r4,-16(fp)
   4a7f4:	01400304 	movi	r5,12
   4a7f8:	004a0e00 	call	4a0e0 <__mulsi3>
   4a7fc:	1007883a 	mov	r3,r2
   4a800:	00800174 	movhi	r2,5
   4a804:	10b80d04 	addi	r2,r2,-8140
   4a808:	1887883a 	add	r3,r3,r2
   4a80c:	e0ffff15 	stw	r3,-4(fp)
   4a810:	00000106 	br	4a818 <close+0x48>
   4a814:	e03fff15 	stw	zero,-4(fp)
   4a818:	e0bfff17 	ldw	r2,-4(fp)
   4a81c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   4a820:	e0bffb17 	ldw	r2,-20(fp)
   4a824:	1005003a 	cmpeq	r2,r2,zero
   4a828:	10001d1e 	bne	r2,zero,4a8a0 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4a82c:	e0bffb17 	ldw	r2,-20(fp)
   4a830:	10800017 	ldw	r2,0(r2)
   4a834:	10800417 	ldw	r2,16(r2)
   4a838:	1005003a 	cmpeq	r2,r2,zero
   4a83c:	1000071e 	bne	r2,zero,4a85c <close+0x8c>
   4a840:	e0bffb17 	ldw	r2,-20(fp)
   4a844:	10800017 	ldw	r2,0(r2)
   4a848:	10800417 	ldw	r2,16(r2)
   4a84c:	e13ffb17 	ldw	r4,-20(fp)
   4a850:	103ee83a 	callr	r2
   4a854:	e0bffe15 	stw	r2,-8(fp)
   4a858:	00000106 	br	4a860 <close+0x90>
   4a85c:	e03ffe15 	stw	zero,-8(fp)
   4a860:	e0bffe17 	ldw	r2,-8(fp)
   4a864:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4a868:	e13ffc17 	ldw	r4,-16(fp)
   4a86c:	004b1e80 	call	4b1e8 <alt_release_fd>
    if (rval < 0)
   4a870:	e0bffa17 	ldw	r2,-24(fp)
   4a874:	1004403a 	cmpge	r2,r2,zero
   4a878:	1000071e 	bne	r2,zero,4a898 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   4a87c:	004a8d00 	call	4a8d0 <alt_get_errno>
   4a880:	e0fffa17 	ldw	r3,-24(fp)
   4a884:	00c7c83a 	sub	r3,zero,r3
   4a888:	10c00015 	stw	r3,0(r2)
      return -1;
   4a88c:	00bfffc4 	movi	r2,-1
   4a890:	e0bffd15 	stw	r2,-12(fp)
   4a894:	00000806 	br	4a8b8 <close+0xe8>
    }
    return 0;
   4a898:	e03ffd15 	stw	zero,-12(fp)
   4a89c:	00000606 	br	4a8b8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4a8a0:	004a8d00 	call	4a8d0 <alt_get_errno>
   4a8a4:	1007883a 	mov	r3,r2
   4a8a8:	00801444 	movi	r2,81
   4a8ac:	18800015 	stw	r2,0(r3)
    return -1;
   4a8b0:	00bfffc4 	movi	r2,-1
   4a8b4:	e0bffd15 	stw	r2,-12(fp)
   4a8b8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   4a8bc:	e037883a 	mov	sp,fp
   4a8c0:	dfc00117 	ldw	ra,4(sp)
   4a8c4:	df000017 	ldw	fp,0(sp)
   4a8c8:	dec00204 	addi	sp,sp,8
   4a8cc:	f800283a 	ret

0004a8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4a8d0:	defffd04 	addi	sp,sp,-12
   4a8d4:	dfc00215 	stw	ra,8(sp)
   4a8d8:	df000115 	stw	fp,4(sp)
   4a8dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4a8e0:	00800174 	movhi	r2,5
   4a8e4:	10bc9004 	addi	r2,r2,-3520
   4a8e8:	10800017 	ldw	r2,0(r2)
   4a8ec:	1005003a 	cmpeq	r2,r2,zero
   4a8f0:	1000061e 	bne	r2,zero,4a90c <alt_get_errno+0x3c>
   4a8f4:	00800174 	movhi	r2,5
   4a8f8:	10bc9004 	addi	r2,r2,-3520
   4a8fc:	10800017 	ldw	r2,0(r2)
   4a900:	103ee83a 	callr	r2
   4a904:	e0bfff15 	stw	r2,-4(fp)
   4a908:	00000306 	br	4a918 <alt_get_errno+0x48>
   4a90c:	00800174 	movhi	r2,5
   4a910:	10833204 	addi	r2,r2,3272
   4a914:	e0bfff15 	stw	r2,-4(fp)
   4a918:	e0bfff17 	ldw	r2,-4(fp)
}
   4a91c:	e037883a 	mov	sp,fp
   4a920:	dfc00117 	ldw	ra,4(sp)
   4a924:	df000017 	ldw	fp,0(sp)
   4a928:	dec00204 	addi	sp,sp,8
   4a92c:	f800283a 	ret

0004a930 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4a930:	defffc04 	addi	sp,sp,-16
   4a934:	df000315 	stw	fp,12(sp)
   4a938:	df000304 	addi	fp,sp,12
   4a93c:	e13ffd15 	stw	r4,-12(fp)
   4a940:	e17ffe15 	stw	r5,-8(fp)
   4a944:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4a948:	e0bfff17 	ldw	r2,-4(fp)
}
   4a94c:	e037883a 	mov	sp,fp
   4a950:	df000017 	ldw	fp,0(sp)
   4a954:	dec00104 	addi	sp,sp,4
   4a958:	f800283a 	ret

0004a95c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4a95c:	defff904 	addi	sp,sp,-28
   4a960:	dfc00615 	stw	ra,24(sp)
   4a964:	df000515 	stw	fp,20(sp)
   4a968:	df000504 	addi	fp,sp,20
   4a96c:	e13ffc15 	stw	r4,-16(fp)
   4a970:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4a974:	e0bffc17 	ldw	r2,-16(fp)
   4a978:	1004803a 	cmplt	r2,r2,zero
   4a97c:	1000091e 	bne	r2,zero,4a9a4 <fstat+0x48>
   4a980:	e13ffc17 	ldw	r4,-16(fp)
   4a984:	01400304 	movi	r5,12
   4a988:	004a0e00 	call	4a0e0 <__mulsi3>
   4a98c:	1007883a 	mov	r3,r2
   4a990:	00800174 	movhi	r2,5
   4a994:	10b80d04 	addi	r2,r2,-8140
   4a998:	1887883a 	add	r3,r3,r2
   4a99c:	e0ffff15 	stw	r3,-4(fp)
   4a9a0:	00000106 	br	4a9a8 <fstat+0x4c>
   4a9a4:	e03fff15 	stw	zero,-4(fp)
   4a9a8:	e0bfff17 	ldw	r2,-4(fp)
   4a9ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4a9b0:	e0bffb17 	ldw	r2,-20(fp)
   4a9b4:	1005003a 	cmpeq	r2,r2,zero
   4a9b8:	1000121e 	bne	r2,zero,4aa04 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4a9bc:	e0bffb17 	ldw	r2,-20(fp)
   4a9c0:	10800017 	ldw	r2,0(r2)
   4a9c4:	10800817 	ldw	r2,32(r2)
   4a9c8:	1005003a 	cmpeq	r2,r2,zero
   4a9cc:	1000081e 	bne	r2,zero,4a9f0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   4a9d0:	e0bffb17 	ldw	r2,-20(fp)
   4a9d4:	10800017 	ldw	r2,0(r2)
   4a9d8:	10800817 	ldw	r2,32(r2)
   4a9dc:	e13ffb17 	ldw	r4,-20(fp)
   4a9e0:	e17ffd17 	ldw	r5,-12(fp)
   4a9e4:	103ee83a 	callr	r2
   4a9e8:	e0bffe15 	stw	r2,-8(fp)
   4a9ec:	00000b06 	br	4aa1c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4a9f0:	e0fffd17 	ldw	r3,-12(fp)
   4a9f4:	00880004 	movi	r2,8192
   4a9f8:	18800115 	stw	r2,4(r3)
      return 0;
   4a9fc:	e03ffe15 	stw	zero,-8(fp)
   4aa00:	00000606 	br	4aa1c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4aa04:	004aa340 	call	4aa34 <alt_get_errno>
   4aa08:	1007883a 	mov	r3,r2
   4aa0c:	00801444 	movi	r2,81
   4aa10:	18800015 	stw	r2,0(r3)
    return -1;
   4aa14:	00bfffc4 	movi	r2,-1
   4aa18:	e0bffe15 	stw	r2,-8(fp)
   4aa1c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4aa20:	e037883a 	mov	sp,fp
   4aa24:	dfc00117 	ldw	ra,4(sp)
   4aa28:	df000017 	ldw	fp,0(sp)
   4aa2c:	dec00204 	addi	sp,sp,8
   4aa30:	f800283a 	ret

0004aa34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4aa34:	defffd04 	addi	sp,sp,-12
   4aa38:	dfc00215 	stw	ra,8(sp)
   4aa3c:	df000115 	stw	fp,4(sp)
   4aa40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4aa44:	00800174 	movhi	r2,5
   4aa48:	10bc9004 	addi	r2,r2,-3520
   4aa4c:	10800017 	ldw	r2,0(r2)
   4aa50:	1005003a 	cmpeq	r2,r2,zero
   4aa54:	1000061e 	bne	r2,zero,4aa70 <alt_get_errno+0x3c>
   4aa58:	00800174 	movhi	r2,5
   4aa5c:	10bc9004 	addi	r2,r2,-3520
   4aa60:	10800017 	ldw	r2,0(r2)
   4aa64:	103ee83a 	callr	r2
   4aa68:	e0bfff15 	stw	r2,-4(fp)
   4aa6c:	00000306 	br	4aa7c <alt_get_errno+0x48>
   4aa70:	00800174 	movhi	r2,5
   4aa74:	10833204 	addi	r2,r2,3272
   4aa78:	e0bfff15 	stw	r2,-4(fp)
   4aa7c:	e0bfff17 	ldw	r2,-4(fp)
}
   4aa80:	e037883a 	mov	sp,fp
   4aa84:	dfc00117 	ldw	ra,4(sp)
   4aa88:	df000017 	ldw	fp,0(sp)
   4aa8c:	dec00204 	addi	sp,sp,8
   4aa90:	f800283a 	ret

0004aa94 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   4aa94:	deffef04 	addi	sp,sp,-68
   4aa98:	df001015 	stw	fp,64(sp)
   4aa9c:	df001004 	addi	fp,sp,64
   4aaa0:	e13ffc15 	stw	r4,-16(fp)
   4aaa4:	e17ffd15 	stw	r5,-12(fp)
   4aaa8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   4aaac:	00bffa84 	movi	r2,-22
   4aab0:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4aab4:	e0bffc17 	ldw	r2,-16(fp)
   4aab8:	10800828 	cmpgeui	r2,r2,32
   4aabc:	1000601e 	bne	r2,zero,4ac40 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4aac0:	0005303a 	rdctl	r2,status
   4aac4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4aac8:	e0fff917 	ldw	r3,-28(fp)
   4aacc:	00bfff84 	movi	r2,-2
   4aad0:	1884703a 	and	r2,r3,r2
   4aad4:	1001703a 	wrctl	status,r2
  
  return context;
   4aad8:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   4aadc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   4aae0:	e0bffc17 	ldw	r2,-16(fp)
   4aae4:	00c00174 	movhi	r3,5
   4aae8:	18c34304 	addi	r3,r3,3340
   4aaec:	100490fa 	slli	r2,r2,3
   4aaf0:	10c7883a 	add	r3,r2,r3
   4aaf4:	e0bffe17 	ldw	r2,-8(fp)
   4aaf8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   4aafc:	e0bffc17 	ldw	r2,-16(fp)
   4ab00:	00c00174 	movhi	r3,5
   4ab04:	18c34304 	addi	r3,r3,3340
   4ab08:	100490fa 	slli	r2,r2,3
   4ab0c:	10c5883a 	add	r2,r2,r3
   4ab10:	10c00104 	addi	r3,r2,4
   4ab14:	e0bffd17 	ldw	r2,-12(fp)
   4ab18:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   4ab1c:	e0bffe17 	ldw	r2,-8(fp)
   4ab20:	1005003a 	cmpeq	r2,r2,zero
   4ab24:	1000201e 	bne	r2,zero,4aba8 <alt_irq_register+0x114>
   4ab28:	e0bffc17 	ldw	r2,-16(fp)
   4ab2c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4ab30:	0005303a 	rdctl	r2,status
   4ab34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4ab38:	e0fff617 	ldw	r3,-40(fp)
   4ab3c:	00bfff84 	movi	r2,-2
   4ab40:	1884703a 	and	r2,r3,r2
   4ab44:	1001703a 	wrctl	status,r2
  
  return context;
   4ab48:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4ab4c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   4ab50:	e0fff717 	ldw	r3,-36(fp)
   4ab54:	00800044 	movi	r2,1
   4ab58:	10c4983a 	sll	r2,r2,r3
   4ab5c:	1007883a 	mov	r3,r2
   4ab60:	00800174 	movhi	r2,5
   4ab64:	10833304 	addi	r2,r2,3276
   4ab68:	10800017 	ldw	r2,0(r2)
   4ab6c:	1886b03a 	or	r3,r3,r2
   4ab70:	00800174 	movhi	r2,5
   4ab74:	10833304 	addi	r2,r2,3276
   4ab78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ab7c:	00800174 	movhi	r2,5
   4ab80:	10833304 	addi	r2,r2,3276
   4ab84:	10800017 	ldw	r2,0(r2)
   4ab88:	100170fa 	wrctl	ienable,r2
   4ab8c:	e0bff817 	ldw	r2,-32(fp)
   4ab90:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ab94:	e0bff517 	ldw	r2,-44(fp)
   4ab98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ab9c:	0005883a 	mov	r2,zero
   4aba0:	e0bfff15 	stw	r2,-4(fp)
   4aba4:	00002006 	br	4ac28 <alt_irq_register+0x194>
   4aba8:	e0bffc17 	ldw	r2,-16(fp)
   4abac:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4abb0:	0005303a 	rdctl	r2,status
   4abb4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4abb8:	e0fff217 	ldw	r3,-56(fp)
   4abbc:	00bfff84 	movi	r2,-2
   4abc0:	1884703a 	and	r2,r3,r2
   4abc4:	1001703a 	wrctl	status,r2
  
  return context;
   4abc8:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4abcc:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   4abd0:	e0fff317 	ldw	r3,-52(fp)
   4abd4:	00800044 	movi	r2,1
   4abd8:	10c4983a 	sll	r2,r2,r3
   4abdc:	0084303a 	nor	r2,zero,r2
   4abe0:	1007883a 	mov	r3,r2
   4abe4:	00800174 	movhi	r2,5
   4abe8:	10833304 	addi	r2,r2,3276
   4abec:	10800017 	ldw	r2,0(r2)
   4abf0:	1886703a 	and	r3,r3,r2
   4abf4:	00800174 	movhi	r2,5
   4abf8:	10833304 	addi	r2,r2,3276
   4abfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4ac00:	00800174 	movhi	r2,5
   4ac04:	10833304 	addi	r2,r2,3276
   4ac08:	10800017 	ldw	r2,0(r2)
   4ac0c:	100170fa 	wrctl	ienable,r2
   4ac10:	e0bff417 	ldw	r2,-48(fp)
   4ac14:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4ac18:	e0bff117 	ldw	r2,-60(fp)
   4ac1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4ac20:	0005883a 	mov	r2,zero
   4ac24:	e0bfff15 	stw	r2,-4(fp)
   4ac28:	e0bfff17 	ldw	r2,-4(fp)
   4ac2c:	e0bffb15 	stw	r2,-20(fp)
   4ac30:	e0bffa17 	ldw	r2,-24(fp)
   4ac34:	e0bff015 	stw	r2,-64(fp)
   4ac38:	e0bff017 	ldw	r2,-64(fp)
   4ac3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   4ac40:	e0bffb17 	ldw	r2,-20(fp)
}
   4ac44:	e037883a 	mov	sp,fp
   4ac48:	df000017 	ldw	fp,0(sp)
   4ac4c:	dec00104 	addi	sp,sp,4
   4ac50:	f800283a 	ret

0004ac54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4ac54:	deffeb04 	addi	sp,sp,-84
   4ac58:	dfc01415 	stw	ra,80(sp)
   4ac5c:	df001315 	stw	fp,76(sp)
   4ac60:	df001304 	addi	fp,sp,76
   4ac64:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ac68:	e0bffd17 	ldw	r2,-12(fp)
   4ac6c:	1004803a 	cmplt	r2,r2,zero
   4ac70:	1000091e 	bne	r2,zero,4ac98 <isatty+0x44>
   4ac74:	e13ffd17 	ldw	r4,-12(fp)
   4ac78:	01400304 	movi	r5,12
   4ac7c:	004a0e00 	call	4a0e0 <__mulsi3>
   4ac80:	1007883a 	mov	r3,r2
   4ac84:	00800174 	movhi	r2,5
   4ac88:	10b80d04 	addi	r2,r2,-8140
   4ac8c:	1887883a 	add	r3,r3,r2
   4ac90:	e0ffff15 	stw	r3,-4(fp)
   4ac94:	00000106 	br	4ac9c <isatty+0x48>
   4ac98:	e03fff15 	stw	zero,-4(fp)
   4ac9c:	e0bfff17 	ldw	r2,-4(fp)
   4aca0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   4aca4:	e0bfed17 	ldw	r2,-76(fp)
   4aca8:	1005003a 	cmpeq	r2,r2,zero
   4acac:	10000f1e 	bne	r2,zero,4acec <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4acb0:	e0bfed17 	ldw	r2,-76(fp)
   4acb4:	10800017 	ldw	r2,0(r2)
   4acb8:	10800817 	ldw	r2,32(r2)
   4acbc:	1004c03a 	cmpne	r2,r2,zero
   4acc0:	1000031e 	bne	r2,zero,4acd0 <isatty+0x7c>
    {
      return 1;
   4acc4:	00800044 	movi	r2,1
   4acc8:	e0bffe15 	stw	r2,-8(fp)
   4accc:	00000c06 	br	4ad00 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4acd0:	e17fee04 	addi	r5,fp,-72
   4acd4:	e13ffd17 	ldw	r4,-12(fp)
   4acd8:	004a95c0 	call	4a95c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4acdc:	e0bfef17 	ldw	r2,-68(fp)
   4ace0:	10880020 	cmpeqi	r2,r2,8192
   4ace4:	e0bffe15 	stw	r2,-8(fp)
   4ace8:	00000506 	br	4ad00 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4acec:	004ad180 	call	4ad18 <alt_get_errno>
   4acf0:	1007883a 	mov	r3,r2
   4acf4:	00801444 	movi	r2,81
   4acf8:	18800015 	stw	r2,0(r3)
    return 0;
   4acfc:	e03ffe15 	stw	zero,-8(fp)
   4ad00:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   4ad04:	e037883a 	mov	sp,fp
   4ad08:	dfc00117 	ldw	ra,4(sp)
   4ad0c:	df000017 	ldw	fp,0(sp)
   4ad10:	dec00204 	addi	sp,sp,8
   4ad14:	f800283a 	ret

0004ad18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ad18:	defffd04 	addi	sp,sp,-12
   4ad1c:	dfc00215 	stw	ra,8(sp)
   4ad20:	df000115 	stw	fp,4(sp)
   4ad24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4ad28:	00800174 	movhi	r2,5
   4ad2c:	10bc9004 	addi	r2,r2,-3520
   4ad30:	10800017 	ldw	r2,0(r2)
   4ad34:	1005003a 	cmpeq	r2,r2,zero
   4ad38:	1000061e 	bne	r2,zero,4ad54 <alt_get_errno+0x3c>
   4ad3c:	00800174 	movhi	r2,5
   4ad40:	10bc9004 	addi	r2,r2,-3520
   4ad44:	10800017 	ldw	r2,0(r2)
   4ad48:	103ee83a 	callr	r2
   4ad4c:	e0bfff15 	stw	r2,-4(fp)
   4ad50:	00000306 	br	4ad60 <alt_get_errno+0x48>
   4ad54:	00800174 	movhi	r2,5
   4ad58:	10833204 	addi	r2,r2,3272
   4ad5c:	e0bfff15 	stw	r2,-4(fp)
   4ad60:	e0bfff17 	ldw	r2,-4(fp)
}
   4ad64:	e037883a 	mov	sp,fp
   4ad68:	dfc00117 	ldw	ra,4(sp)
   4ad6c:	df000017 	ldw	fp,0(sp)
   4ad70:	dec00204 	addi	sp,sp,8
   4ad74:	f800283a 	ret

0004ad78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4ad78:	defffe04 	addi	sp,sp,-8
   4ad7c:	dfc00115 	stw	ra,4(sp)
   4ad80:	df000015 	stw	fp,0(sp)
   4ad84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4ad88:	01000174 	movhi	r4,5
   4ad8c:	213c9504 	addi	r4,r4,-3500
   4ad90:	01400174 	movhi	r5,5
   4ad94:	2975fe04 	addi	r5,r5,-10248
   4ad98:	01800174 	movhi	r6,5
   4ad9c:	31bc9504 	addi	r6,r6,-3500
   4ada0:	004adf80 	call	4adf8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4ada4:	01000134 	movhi	r4,4
   4ada8:	21000804 	addi	r4,r4,32
   4adac:	01400134 	movhi	r5,4
   4adb0:	29400804 	addi	r5,r5,32
   4adb4:	01800134 	movhi	r6,4
   4adb8:	31806d04 	addi	r6,r6,436
   4adbc:	004adf80 	call	4adf8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4adc0:	01000174 	movhi	r4,5
   4adc4:	2134f404 	addi	r4,r4,-11312
   4adc8:	01400174 	movhi	r5,5
   4adcc:	2974f404 	addi	r5,r5,-11312
   4add0:	01800174 	movhi	r6,5
   4add4:	31b5fe04 	addi	r6,r6,-10248
   4add8:	004adf80 	call	4adf8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4addc:	004c2680 	call	4c268 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4ade0:	004c4600 	call	4c460 <alt_icache_flush_all>
}
   4ade4:	e037883a 	mov	sp,fp
   4ade8:	dfc00117 	ldw	ra,4(sp)
   4adec:	df000017 	ldw	fp,0(sp)
   4adf0:	dec00204 	addi	sp,sp,8
   4adf4:	f800283a 	ret

0004adf8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4adf8:	defffc04 	addi	sp,sp,-16
   4adfc:	df000315 	stw	fp,12(sp)
   4ae00:	df000304 	addi	fp,sp,12
   4ae04:	e13ffd15 	stw	r4,-12(fp)
   4ae08:	e17ffe15 	stw	r5,-8(fp)
   4ae0c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ae10:	e0fffe17 	ldw	r3,-8(fp)
   4ae14:	e0bffd17 	ldw	r2,-12(fp)
   4ae18:	18800e26 	beq	r3,r2,4ae54 <alt_load_section+0x5c>
  {
    while( to != end )
   4ae1c:	00000a06 	br	4ae48 <alt_load_section+0x50>
    {
      *to++ = *from++;
   4ae20:	e0bffd17 	ldw	r2,-12(fp)
   4ae24:	10c00017 	ldw	r3,0(r2)
   4ae28:	e0bffe17 	ldw	r2,-8(fp)
   4ae2c:	10c00015 	stw	r3,0(r2)
   4ae30:	e0bffe17 	ldw	r2,-8(fp)
   4ae34:	10800104 	addi	r2,r2,4
   4ae38:	e0bffe15 	stw	r2,-8(fp)
   4ae3c:	e0bffd17 	ldw	r2,-12(fp)
   4ae40:	10800104 	addi	r2,r2,4
   4ae44:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ae48:	e0fffe17 	ldw	r3,-8(fp)
   4ae4c:	e0bfff17 	ldw	r2,-4(fp)
   4ae50:	18bff31e 	bne	r3,r2,4ae20 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   4ae54:	e037883a 	mov	sp,fp
   4ae58:	df000017 	ldw	fp,0(sp)
   4ae5c:	dec00104 	addi	sp,sp,4
   4ae60:	f800283a 	ret

0004ae64 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4ae64:	defff804 	addi	sp,sp,-32
   4ae68:	dfc00715 	stw	ra,28(sp)
   4ae6c:	df000615 	stw	fp,24(sp)
   4ae70:	df000604 	addi	fp,sp,24
   4ae74:	e13ffc15 	stw	r4,-16(fp)
   4ae78:	e17ffd15 	stw	r5,-12(fp)
   4ae7c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4ae80:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4ae84:	e0bffc17 	ldw	r2,-16(fp)
   4ae88:	1004803a 	cmplt	r2,r2,zero
   4ae8c:	1000091e 	bne	r2,zero,4aeb4 <lseek+0x50>
   4ae90:	e13ffc17 	ldw	r4,-16(fp)
   4ae94:	01400304 	movi	r5,12
   4ae98:	004a0e00 	call	4a0e0 <__mulsi3>
   4ae9c:	1007883a 	mov	r3,r2
   4aea0:	00800174 	movhi	r2,5
   4aea4:	10b80d04 	addi	r2,r2,-8140
   4aea8:	1887883a 	add	r3,r3,r2
   4aeac:	e0ffff15 	stw	r3,-4(fp)
   4aeb0:	00000106 	br	4aeb8 <lseek+0x54>
   4aeb4:	e03fff15 	stw	zero,-4(fp)
   4aeb8:	e0bfff17 	ldw	r2,-4(fp)
   4aebc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   4aec0:	e0bffb17 	ldw	r2,-20(fp)
   4aec4:	1005003a 	cmpeq	r2,r2,zero
   4aec8:	1000111e 	bne	r2,zero,4af10 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4aecc:	e0bffb17 	ldw	r2,-20(fp)
   4aed0:	10800017 	ldw	r2,0(r2)
   4aed4:	10800717 	ldw	r2,28(r2)
   4aed8:	1005003a 	cmpeq	r2,r2,zero
   4aedc:	1000091e 	bne	r2,zero,4af04 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4aee0:	e0bffb17 	ldw	r2,-20(fp)
   4aee4:	10800017 	ldw	r2,0(r2)
   4aee8:	10800717 	ldw	r2,28(r2)
   4aeec:	e13ffb17 	ldw	r4,-20(fp)
   4aef0:	e17ffd17 	ldw	r5,-12(fp)
   4aef4:	e1bffe17 	ldw	r6,-8(fp)
   4aef8:	103ee83a 	callr	r2
   4aefc:	e0bffa15 	stw	r2,-24(fp)
   4af00:	00000506 	br	4af18 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4af04:	00bfde84 	movi	r2,-134
   4af08:	e0bffa15 	stw	r2,-24(fp)
   4af0c:	00000206 	br	4af18 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   4af10:	00bfebc4 	movi	r2,-81
   4af14:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   4af18:	e0bffa17 	ldw	r2,-24(fp)
   4af1c:	1004403a 	cmpge	r2,r2,zero
   4af20:	1000071e 	bne	r2,zero,4af40 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   4af24:	004af580 	call	4af58 <alt_get_errno>
   4af28:	1007883a 	mov	r3,r2
   4af2c:	e0bffa17 	ldw	r2,-24(fp)
   4af30:	0085c83a 	sub	r2,zero,r2
   4af34:	18800015 	stw	r2,0(r3)
    rc = -1;
   4af38:	00bfffc4 	movi	r2,-1
   4af3c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   4af40:	e0bffa17 	ldw	r2,-24(fp)
}
   4af44:	e037883a 	mov	sp,fp
   4af48:	dfc00117 	ldw	ra,4(sp)
   4af4c:	df000017 	ldw	fp,0(sp)
   4af50:	dec00204 	addi	sp,sp,8
   4af54:	f800283a 	ret

0004af58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4af58:	defffd04 	addi	sp,sp,-12
   4af5c:	dfc00215 	stw	ra,8(sp)
   4af60:	df000115 	stw	fp,4(sp)
   4af64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4af68:	00800174 	movhi	r2,5
   4af6c:	10bc9004 	addi	r2,r2,-3520
   4af70:	10800017 	ldw	r2,0(r2)
   4af74:	1005003a 	cmpeq	r2,r2,zero
   4af78:	1000061e 	bne	r2,zero,4af94 <alt_get_errno+0x3c>
   4af7c:	00800174 	movhi	r2,5
   4af80:	10bc9004 	addi	r2,r2,-3520
   4af84:	10800017 	ldw	r2,0(r2)
   4af88:	103ee83a 	callr	r2
   4af8c:	e0bfff15 	stw	r2,-4(fp)
   4af90:	00000306 	br	4afa0 <alt_get_errno+0x48>
   4af94:	00800174 	movhi	r2,5
   4af98:	10833204 	addi	r2,r2,3272
   4af9c:	e0bfff15 	stw	r2,-4(fp)
   4afa0:	e0bfff17 	ldw	r2,-4(fp)
}
   4afa4:	e037883a 	mov	sp,fp
   4afa8:	dfc00117 	ldw	ra,4(sp)
   4afac:	df000017 	ldw	fp,0(sp)
   4afb0:	dec00204 	addi	sp,sp,8
   4afb4:	f800283a 	ret

0004afb8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4afb8:	defffd04 	addi	sp,sp,-12
   4afbc:	dfc00215 	stw	ra,8(sp)
   4afc0:	df000115 	stw	fp,4(sp)
   4afc4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4afc8:	0009883a 	mov	r4,zero
   4afcc:	004b4a00 	call	4b4a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4afd0:	004b4d40 	call	4b4d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4afd4:	01000174 	movhi	r4,5
   4afd8:	2135f404 	addi	r4,r4,-10288
   4afdc:	01400174 	movhi	r5,5
   4afe0:	2975f404 	addi	r5,r5,-10288
   4afe4:	01800174 	movhi	r6,5
   4afe8:	31b5f404 	addi	r6,r6,-10288
   4afec:	004c8200 	call	4c820 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4aff0:	004c3980 	call	4c398 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4aff4:	01000174 	movhi	r4,5
   4aff8:	2130ff04 	addi	r4,r4,-15364
   4affc:	004cfc40 	call	4cfc4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4b000:	d126af17 	ldw	r4,-25924(gp)
   4b004:	d166b017 	ldw	r5,-25920(gp)
   4b008:	d1a6b117 	ldw	r6,-25916(gp)
   4b00c:	0040ae00 	call	40ae0 <main>
   4b010:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4b014:	01000044 	movi	r4,1
   4b018:	004a7d00 	call	4a7d0 <close>
  exit (result);
   4b01c:	e13fff17 	ldw	r4,-4(fp)
   4b020:	004cfd80 	call	4cfd8 <exit>

0004b024 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4b024:	defffe04 	addi	sp,sp,-8
   4b028:	df000115 	stw	fp,4(sp)
   4b02c:	df000104 	addi	fp,sp,4
   4b030:	e13fff15 	stw	r4,-4(fp)
}
   4b034:	e037883a 	mov	sp,fp
   4b038:	df000017 	ldw	fp,0(sp)
   4b03c:	dec00104 	addi	sp,sp,4
   4b040:	f800283a 	ret

0004b044 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4b044:	defffe04 	addi	sp,sp,-8
   4b048:	df000115 	stw	fp,4(sp)
   4b04c:	df000104 	addi	fp,sp,4
   4b050:	e13fff15 	stw	r4,-4(fp)
}
   4b054:	e037883a 	mov	sp,fp
   4b058:	df000017 	ldw	fp,0(sp)
   4b05c:	dec00104 	addi	sp,sp,4
   4b060:	f800283a 	ret

0004b064 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4b064:	defff704 	addi	sp,sp,-36
   4b068:	dfc00815 	stw	ra,32(sp)
   4b06c:	df000715 	stw	fp,28(sp)
   4b070:	df000704 	addi	fp,sp,28
   4b074:	e13ffb15 	stw	r4,-20(fp)
   4b078:	e17ffc15 	stw	r5,-16(fp)
   4b07c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b080:	e0bffb17 	ldw	r2,-20(fp)
   4b084:	1004803a 	cmplt	r2,r2,zero
   4b088:	1000091e 	bne	r2,zero,4b0b0 <read+0x4c>
   4b08c:	e13ffb17 	ldw	r4,-20(fp)
   4b090:	01400304 	movi	r5,12
   4b094:	004a0e00 	call	4a0e0 <__mulsi3>
   4b098:	1007883a 	mov	r3,r2
   4b09c:	00800174 	movhi	r2,5
   4b0a0:	10b80d04 	addi	r2,r2,-8140
   4b0a4:	1887883a 	add	r3,r3,r2
   4b0a8:	e0ffff15 	stw	r3,-4(fp)
   4b0ac:	00000106 	br	4b0b4 <read+0x50>
   4b0b0:	e03fff15 	stw	zero,-4(fp)
   4b0b4:	e0bfff17 	ldw	r2,-4(fp)
   4b0b8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4b0bc:	e0bffa17 	ldw	r2,-24(fp)
   4b0c0:	1005003a 	cmpeq	r2,r2,zero
   4b0c4:	1000241e 	bne	r2,zero,4b158 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4b0c8:	e0bffa17 	ldw	r2,-24(fp)
   4b0cc:	10800217 	ldw	r2,8(r2)
   4b0d0:	108000cc 	andi	r2,r2,3
   4b0d4:	10800060 	cmpeqi	r2,r2,1
   4b0d8:	10001a1e 	bne	r2,zero,4b144 <read+0xe0>
   4b0dc:	e0bffa17 	ldw	r2,-24(fp)
   4b0e0:	10800017 	ldw	r2,0(r2)
   4b0e4:	10800517 	ldw	r2,20(r2)
   4b0e8:	1005003a 	cmpeq	r2,r2,zero
   4b0ec:	1000151e 	bne	r2,zero,4b144 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4b0f0:	e0bffa17 	ldw	r2,-24(fp)
   4b0f4:	10800017 	ldw	r2,0(r2)
   4b0f8:	10800517 	ldw	r2,20(r2)
   4b0fc:	e17ffc17 	ldw	r5,-16(fp)
   4b100:	e1bffd17 	ldw	r6,-12(fp)
   4b104:	e13ffa17 	ldw	r4,-24(fp)
   4b108:	103ee83a 	callr	r2
   4b10c:	e0bff915 	stw	r2,-28(fp)
   4b110:	e0bff917 	ldw	r2,-28(fp)
   4b114:	1004403a 	cmpge	r2,r2,zero
   4b118:	1000071e 	bne	r2,zero,4b138 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   4b11c:	004b1880 	call	4b188 <alt_get_errno>
   4b120:	e0fff917 	ldw	r3,-28(fp)
   4b124:	00c7c83a 	sub	r3,zero,r3
   4b128:	10c00015 	stw	r3,0(r2)
          return -1;
   4b12c:	00bfffc4 	movi	r2,-1
   4b130:	e0bffe15 	stw	r2,-8(fp)
   4b134:	00000e06 	br	4b170 <read+0x10c>
        }
        return rval;
   4b138:	e0bff917 	ldw	r2,-28(fp)
   4b13c:	e0bffe15 	stw	r2,-8(fp)
   4b140:	00000b06 	br	4b170 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4b144:	004b1880 	call	4b188 <alt_get_errno>
   4b148:	1007883a 	mov	r3,r2
   4b14c:	00800344 	movi	r2,13
   4b150:	18800015 	stw	r2,0(r3)
   4b154:	00000406 	br	4b168 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4b158:	004b1880 	call	4b188 <alt_get_errno>
   4b15c:	1007883a 	mov	r3,r2
   4b160:	00801444 	movi	r2,81
   4b164:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4b168:	00bfffc4 	movi	r2,-1
   4b16c:	e0bffe15 	stw	r2,-8(fp)
   4b170:	e0bffe17 	ldw	r2,-8(fp)
}
   4b174:	e037883a 	mov	sp,fp
   4b178:	dfc00117 	ldw	ra,4(sp)
   4b17c:	df000017 	ldw	fp,0(sp)
   4b180:	dec00204 	addi	sp,sp,8
   4b184:	f800283a 	ret

0004b188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b188:	defffd04 	addi	sp,sp,-12
   4b18c:	dfc00215 	stw	ra,8(sp)
   4b190:	df000115 	stw	fp,4(sp)
   4b194:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4b198:	00800174 	movhi	r2,5
   4b19c:	10bc9004 	addi	r2,r2,-3520
   4b1a0:	10800017 	ldw	r2,0(r2)
   4b1a4:	1005003a 	cmpeq	r2,r2,zero
   4b1a8:	1000061e 	bne	r2,zero,4b1c4 <alt_get_errno+0x3c>
   4b1ac:	00800174 	movhi	r2,5
   4b1b0:	10bc9004 	addi	r2,r2,-3520
   4b1b4:	10800017 	ldw	r2,0(r2)
   4b1b8:	103ee83a 	callr	r2
   4b1bc:	e0bfff15 	stw	r2,-4(fp)
   4b1c0:	00000306 	br	4b1d0 <alt_get_errno+0x48>
   4b1c4:	00800174 	movhi	r2,5
   4b1c8:	10833204 	addi	r2,r2,3272
   4b1cc:	e0bfff15 	stw	r2,-4(fp)
   4b1d0:	e0bfff17 	ldw	r2,-4(fp)
}
   4b1d4:	e037883a 	mov	sp,fp
   4b1d8:	dfc00117 	ldw	ra,4(sp)
   4b1dc:	df000017 	ldw	fp,0(sp)
   4b1e0:	dec00204 	addi	sp,sp,8
   4b1e4:	f800283a 	ret

0004b1e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4b1e8:	defffc04 	addi	sp,sp,-16
   4b1ec:	dfc00315 	stw	ra,12(sp)
   4b1f0:	df000215 	stw	fp,8(sp)
   4b1f4:	dc000115 	stw	r16,4(sp)
   4b1f8:	df000104 	addi	fp,sp,4
   4b1fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4b200:	e0bfff17 	ldw	r2,-4(fp)
   4b204:	108000d0 	cmplti	r2,r2,3
   4b208:	10000f1e 	bne	r2,zero,4b248 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   4b20c:	e13fff17 	ldw	r4,-4(fp)
   4b210:	04000174 	movhi	r16,5
   4b214:	84380d04 	addi	r16,r16,-8140
   4b218:	01400304 	movi	r5,12
   4b21c:	004a0e00 	call	4a0e0 <__mulsi3>
   4b220:	1405883a 	add	r2,r2,r16
   4b224:	10800204 	addi	r2,r2,8
   4b228:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4b22c:	e13fff17 	ldw	r4,-4(fp)
   4b230:	04000174 	movhi	r16,5
   4b234:	84380d04 	addi	r16,r16,-8140
   4b238:	01400304 	movi	r5,12
   4b23c:	004a0e00 	call	4a0e0 <__mulsi3>
   4b240:	1405883a 	add	r2,r2,r16
   4b244:	10000015 	stw	zero,0(r2)
  }
}
   4b248:	e037883a 	mov	sp,fp
   4b24c:	dfc00217 	ldw	ra,8(sp)
   4b250:	df000117 	ldw	fp,4(sp)
   4b254:	dc000017 	ldw	r16,0(sp)
   4b258:	dec00304 	addi	sp,sp,12
   4b25c:	f800283a 	ret

0004b260 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4b260:	defff804 	addi	sp,sp,-32
   4b264:	df000715 	stw	fp,28(sp)
   4b268:	df000704 	addi	fp,sp,28
   4b26c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4b270:	0005303a 	rdctl	r2,status
   4b274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4b278:	e0fffb17 	ldw	r3,-20(fp)
   4b27c:	00bfff84 	movi	r2,-2
   4b280:	1884703a 	and	r2,r3,r2
   4b284:	1001703a 	wrctl	status,r2
  
  return context;
   4b288:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4b28c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4b290:	d0a00d17 	ldw	r2,-32716(gp)
   4b294:	10c000c4 	addi	r3,r2,3
   4b298:	00bfff04 	movi	r2,-4
   4b29c:	1884703a 	and	r2,r3,r2
   4b2a0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4b2a4:	d0e00d17 	ldw	r3,-32716(gp)
   4b2a8:	e0bffe17 	ldw	r2,-8(fp)
   4b2ac:	1887883a 	add	r3,r3,r2
   4b2b0:	008001f4 	movhi	r2,7
   4b2b4:	10835004 	addi	r2,r2,3392
   4b2b8:	10c0072e 	bgeu	r2,r3,4b2d8 <sbrk+0x78>
   4b2bc:	e0bffd17 	ldw	r2,-12(fp)
   4b2c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4b2c4:	e0bffa17 	ldw	r2,-24(fp)
   4b2c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4b2cc:	00bfffc4 	movi	r2,-1
   4b2d0:	e0bfff15 	stw	r2,-4(fp)
   4b2d4:	00000c06 	br	4b308 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   4b2d8:	d0a00d17 	ldw	r2,-32716(gp)
   4b2dc:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   4b2e0:	d0e00d17 	ldw	r3,-32716(gp)
   4b2e4:	e0bffe17 	ldw	r2,-8(fp)
   4b2e8:	1885883a 	add	r2,r3,r2
   4b2ec:	d0a00d15 	stw	r2,-32716(gp)
   4b2f0:	e0bffd17 	ldw	r2,-12(fp)
   4b2f4:	e0bff915 	stw	r2,-28(fp)
   4b2f8:	e0bff917 	ldw	r2,-28(fp)
   4b2fc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4b300:	e0bffc17 	ldw	r2,-16(fp)
   4b304:	e0bfff15 	stw	r2,-4(fp)
   4b308:	e0bfff17 	ldw	r2,-4(fp)
} 
   4b30c:	e037883a 	mov	sp,fp
   4b310:	df000017 	ldw	fp,0(sp)
   4b314:	dec00104 	addi	sp,sp,4
   4b318:	f800283a 	ret

0004b31c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4b31c:	defff704 	addi	sp,sp,-36
   4b320:	dfc00815 	stw	ra,32(sp)
   4b324:	df000715 	stw	fp,28(sp)
   4b328:	df000704 	addi	fp,sp,28
   4b32c:	e13ffb15 	stw	r4,-20(fp)
   4b330:	e17ffc15 	stw	r5,-16(fp)
   4b334:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4b338:	e0bffb17 	ldw	r2,-20(fp)
   4b33c:	1004803a 	cmplt	r2,r2,zero
   4b340:	1000091e 	bne	r2,zero,4b368 <write+0x4c>
   4b344:	e13ffb17 	ldw	r4,-20(fp)
   4b348:	01400304 	movi	r5,12
   4b34c:	004a0e00 	call	4a0e0 <__mulsi3>
   4b350:	1007883a 	mov	r3,r2
   4b354:	00800174 	movhi	r2,5
   4b358:	10b80d04 	addi	r2,r2,-8140
   4b35c:	1887883a 	add	r3,r3,r2
   4b360:	e0ffff15 	stw	r3,-4(fp)
   4b364:	00000106 	br	4b36c <write+0x50>
   4b368:	e03fff15 	stw	zero,-4(fp)
   4b36c:	e0bfff17 	ldw	r2,-4(fp)
   4b370:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   4b374:	e0bffa17 	ldw	r2,-24(fp)
   4b378:	1005003a 	cmpeq	r2,r2,zero
   4b37c:	1000241e 	bne	r2,zero,4b410 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4b380:	e0bffa17 	ldw	r2,-24(fp)
   4b384:	10800217 	ldw	r2,8(r2)
   4b388:	108000cc 	andi	r2,r2,3
   4b38c:	1005003a 	cmpeq	r2,r2,zero
   4b390:	10001a1e 	bne	r2,zero,4b3fc <write+0xe0>
   4b394:	e0bffa17 	ldw	r2,-24(fp)
   4b398:	10800017 	ldw	r2,0(r2)
   4b39c:	10800617 	ldw	r2,24(r2)
   4b3a0:	1005003a 	cmpeq	r2,r2,zero
   4b3a4:	1000151e 	bne	r2,zero,4b3fc <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4b3a8:	e0bffa17 	ldw	r2,-24(fp)
   4b3ac:	10800017 	ldw	r2,0(r2)
   4b3b0:	10800617 	ldw	r2,24(r2)
   4b3b4:	e17ffc17 	ldw	r5,-16(fp)
   4b3b8:	e1bffd17 	ldw	r6,-12(fp)
   4b3bc:	e13ffa17 	ldw	r4,-24(fp)
   4b3c0:	103ee83a 	callr	r2
   4b3c4:	e0bff915 	stw	r2,-28(fp)
   4b3c8:	e0bff917 	ldw	r2,-28(fp)
   4b3cc:	1004403a 	cmpge	r2,r2,zero
   4b3d0:	1000071e 	bne	r2,zero,4b3f0 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   4b3d4:	004b4400 	call	4b440 <alt_get_errno>
   4b3d8:	e0fff917 	ldw	r3,-28(fp)
   4b3dc:	00c7c83a 	sub	r3,zero,r3
   4b3e0:	10c00015 	stw	r3,0(r2)
        return -1;
   4b3e4:	00bfffc4 	movi	r2,-1
   4b3e8:	e0bffe15 	stw	r2,-8(fp)
   4b3ec:	00000e06 	br	4b428 <write+0x10c>
      }
      return rval;
   4b3f0:	e0bff917 	ldw	r2,-28(fp)
   4b3f4:	e0bffe15 	stw	r2,-8(fp)
   4b3f8:	00000b06 	br	4b428 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4b3fc:	004b4400 	call	4b440 <alt_get_errno>
   4b400:	1007883a 	mov	r3,r2
   4b404:	00800344 	movi	r2,13
   4b408:	18800015 	stw	r2,0(r3)
   4b40c:	00000406 	br	4b420 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4b410:	004b4400 	call	4b440 <alt_get_errno>
   4b414:	1007883a 	mov	r3,r2
   4b418:	00801444 	movi	r2,81
   4b41c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4b420:	00bfffc4 	movi	r2,-1
   4b424:	e0bffe15 	stw	r2,-8(fp)
   4b428:	e0bffe17 	ldw	r2,-8(fp)
}
   4b42c:	e037883a 	mov	sp,fp
   4b430:	dfc00117 	ldw	ra,4(sp)
   4b434:	df000017 	ldw	fp,0(sp)
   4b438:	dec00204 	addi	sp,sp,8
   4b43c:	f800283a 	ret

0004b440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4b440:	defffd04 	addi	sp,sp,-12
   4b444:	dfc00215 	stw	ra,8(sp)
   4b448:	df000115 	stw	fp,4(sp)
   4b44c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4b450:	00800174 	movhi	r2,5
   4b454:	10bc9004 	addi	r2,r2,-3520
   4b458:	10800017 	ldw	r2,0(r2)
   4b45c:	1005003a 	cmpeq	r2,r2,zero
   4b460:	1000061e 	bne	r2,zero,4b47c <alt_get_errno+0x3c>
   4b464:	00800174 	movhi	r2,5
   4b468:	10bc9004 	addi	r2,r2,-3520
   4b46c:	10800017 	ldw	r2,0(r2)
   4b470:	103ee83a 	callr	r2
   4b474:	e0bfff15 	stw	r2,-4(fp)
   4b478:	00000306 	br	4b488 <alt_get_errno+0x48>
   4b47c:	00800174 	movhi	r2,5
   4b480:	10833204 	addi	r2,r2,3272
   4b484:	e0bfff15 	stw	r2,-4(fp)
   4b488:	e0bfff17 	ldw	r2,-4(fp)
}
   4b48c:	e037883a 	mov	sp,fp
   4b490:	dfc00117 	ldw	ra,4(sp)
   4b494:	df000017 	ldw	fp,0(sp)
   4b498:	dec00204 	addi	sp,sp,8
   4b49c:	f800283a 	ret

0004b4a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4b4a0:	defffd04 	addi	sp,sp,-12
   4b4a4:	dfc00215 	stw	ra,8(sp)
   4b4a8:	df000115 	stw	fp,4(sp)
   4b4ac:	df000104 	addi	fp,sp,4
   4b4b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   4b4b4:	004cd200 	call	4cd20 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4b4b8:	00800044 	movi	r2,1
   4b4bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4b4c0:	e037883a 	mov	sp,fp
   4b4c4:	dfc00117 	ldw	ra,4(sp)
   4b4c8:	df000017 	ldw	fp,0(sp)
   4b4cc:	dec00204 	addi	sp,sp,8
   4b4d0:	f800283a 	ret

0004b4d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4b4d4:	defffe04 	addi	sp,sp,-8
   4b4d8:	dfc00115 	stw	ra,4(sp)
   4b4dc:	df000015 	stw	fp,0(sp)
   4b4e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   4b4e4:	01000234 	movhi	r4,8
   4b4e8:	21044004 	addi	r4,r4,4352
   4b4ec:	000b883a 	mov	r5,zero
   4b4f0:	000d883a 	mov	r6,zero
   4b4f4:	01c0fa04 	movi	r7,1000
   4b4f8:	004c0840 	call	4c084 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4b4fc:	01000174 	movhi	r4,5
   4b500:	21387704 	addi	r4,r4,-7716
   4b504:	000b883a 	mov	r5,zero
   4b508:	01800044 	movi	r6,1
   4b50c:	004b6b00 	call	4b6b0 <altera_avalon_jtag_uart_init>
   4b510:	01000174 	movhi	r4,5
   4b514:	21386d04 	addi	r4,r4,-7756
   4b518:	004b5300 	call	4b530 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   4b51c:	e037883a 	mov	sp,fp
   4b520:	dfc00117 	ldw	ra,4(sp)
   4b524:	df000017 	ldw	fp,0(sp)
   4b528:	dec00204 	addi	sp,sp,8
   4b52c:	f800283a 	ret

0004b530 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4b530:	defffd04 	addi	sp,sp,-12
   4b534:	dfc00215 	stw	ra,8(sp)
   4b538:	df000115 	stw	fp,4(sp)
   4b53c:	df000104 	addi	fp,sp,4
   4b540:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4b544:	e13fff17 	ldw	r4,-4(fp)
   4b548:	01400174 	movhi	r5,5
   4b54c:	297c8d04 	addi	r5,r5,-3532
   4b550:	004c2840 	call	4c284 <alt_dev_llist_insert>
}
   4b554:	e037883a 	mov	sp,fp
   4b558:	dfc00117 	ldw	ra,4(sp)
   4b55c:	df000017 	ldw	fp,0(sp)
   4b560:	dec00204 	addi	sp,sp,8
   4b564:	f800283a 	ret

0004b568 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4b568:	defffa04 	addi	sp,sp,-24
   4b56c:	dfc00515 	stw	ra,20(sp)
   4b570:	df000415 	stw	fp,16(sp)
   4b574:	df000404 	addi	fp,sp,16
   4b578:	e13ffd15 	stw	r4,-12(fp)
   4b57c:	e17ffe15 	stw	r5,-8(fp)
   4b580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b584:	e0bffd17 	ldw	r2,-12(fp)
   4b588:	10800017 	ldw	r2,0(r2)
   4b58c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4b590:	e0bffc17 	ldw	r2,-16(fp)
   4b594:	11000a04 	addi	r4,r2,40
   4b598:	e0bffd17 	ldw	r2,-12(fp)
   4b59c:	11c00217 	ldw	r7,8(r2)
   4b5a0:	e17ffe17 	ldw	r5,-8(fp)
   4b5a4:	e1bfff17 	ldw	r6,-4(fp)
   4b5a8:	004bbb00 	call	4bbb0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4b5ac:	e037883a 	mov	sp,fp
   4b5b0:	dfc00117 	ldw	ra,4(sp)
   4b5b4:	df000017 	ldw	fp,0(sp)
   4b5b8:	dec00204 	addi	sp,sp,8
   4b5bc:	f800283a 	ret

0004b5c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4b5c0:	defffa04 	addi	sp,sp,-24
   4b5c4:	dfc00515 	stw	ra,20(sp)
   4b5c8:	df000415 	stw	fp,16(sp)
   4b5cc:	df000404 	addi	fp,sp,16
   4b5d0:	e13ffd15 	stw	r4,-12(fp)
   4b5d4:	e17ffe15 	stw	r5,-8(fp)
   4b5d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b5dc:	e0bffd17 	ldw	r2,-12(fp)
   4b5e0:	10800017 	ldw	r2,0(r2)
   4b5e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4b5e8:	e0bffc17 	ldw	r2,-16(fp)
   4b5ec:	11000a04 	addi	r4,r2,40
   4b5f0:	e0bffd17 	ldw	r2,-12(fp)
   4b5f4:	11c00217 	ldw	r7,8(r2)
   4b5f8:	e17ffe17 	ldw	r5,-8(fp)
   4b5fc:	e1bfff17 	ldw	r6,-4(fp)
   4b600:	004bdd40 	call	4bdd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4b604:	e037883a 	mov	sp,fp
   4b608:	dfc00117 	ldw	ra,4(sp)
   4b60c:	df000017 	ldw	fp,0(sp)
   4b610:	dec00204 	addi	sp,sp,8
   4b614:	f800283a 	ret

0004b618 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4b618:	defffc04 	addi	sp,sp,-16
   4b61c:	dfc00315 	stw	ra,12(sp)
   4b620:	df000215 	stw	fp,8(sp)
   4b624:	df000204 	addi	fp,sp,8
   4b628:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4b62c:	e0bfff17 	ldw	r2,-4(fp)
   4b630:	10800017 	ldw	r2,0(r2)
   4b634:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4b638:	e0bffe17 	ldw	r2,-8(fp)
   4b63c:	11000a04 	addi	r4,r2,40
   4b640:	e0bfff17 	ldw	r2,-4(fp)
   4b644:	11400217 	ldw	r5,8(r2)
   4b648:	004ba480 	call	4ba48 <altera_avalon_jtag_uart_close>
}
   4b64c:	e037883a 	mov	sp,fp
   4b650:	dfc00117 	ldw	ra,4(sp)
   4b654:	df000017 	ldw	fp,0(sp)
   4b658:	dec00204 	addi	sp,sp,8
   4b65c:	f800283a 	ret

0004b660 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4b660:	defffa04 	addi	sp,sp,-24
   4b664:	dfc00515 	stw	ra,20(sp)
   4b668:	df000415 	stw	fp,16(sp)
   4b66c:	df000404 	addi	fp,sp,16
   4b670:	e13ffd15 	stw	r4,-12(fp)
   4b674:	e17ffe15 	stw	r5,-8(fp)
   4b678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4b67c:	e0bffd17 	ldw	r2,-12(fp)
   4b680:	10800017 	ldw	r2,0(r2)
   4b684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4b688:	e0bffc17 	ldw	r2,-16(fp)
   4b68c:	11000a04 	addi	r4,r2,40
   4b690:	e17ffe17 	ldw	r5,-8(fp)
   4b694:	e1bfff17 	ldw	r6,-4(fp)
   4b698:	004babc0 	call	4babc <altera_avalon_jtag_uart_ioctl>
}
   4b69c:	e037883a 	mov	sp,fp
   4b6a0:	dfc00117 	ldw	ra,4(sp)
   4b6a4:	df000017 	ldw	fp,0(sp)
   4b6a8:	dec00204 	addi	sp,sp,8
   4b6ac:	f800283a 	ret

0004b6b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4b6b0:	defffa04 	addi	sp,sp,-24
   4b6b4:	dfc00515 	stw	ra,20(sp)
   4b6b8:	df000415 	stw	fp,16(sp)
   4b6bc:	df000404 	addi	fp,sp,16
   4b6c0:	e13ffd15 	stw	r4,-12(fp)
   4b6c4:	e17ffe15 	stw	r5,-8(fp)
   4b6c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b6cc:	e0fffd17 	ldw	r3,-12(fp)
   4b6d0:	00800044 	movi	r2,1
   4b6d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4b6d8:	e0bffd17 	ldw	r2,-12(fp)
   4b6dc:	10800017 	ldw	r2,0(r2)
   4b6e0:	11000104 	addi	r4,r2,4
   4b6e4:	e0bffd17 	ldw	r2,-12(fp)
   4b6e8:	10800817 	ldw	r2,32(r2)
   4b6ec:	1007883a 	mov	r3,r2
   4b6f0:	2005883a 	mov	r2,r4
   4b6f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4b6f8:	e13ffe17 	ldw	r4,-8(fp)
   4b6fc:	e17fff17 	ldw	r5,-4(fp)
   4b700:	d8000015 	stw	zero,0(sp)
   4b704:	01800174 	movhi	r6,5
   4b708:	31addc04 	addi	r6,r6,-18576
   4b70c:	e1fffd17 	ldw	r7,-12(fp)
   4b710:	004c47c0 	call	4c47c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4b714:	e0bffd17 	ldw	r2,-12(fp)
   4b718:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4b71c:	e0bffd17 	ldw	r2,-12(fp)
   4b720:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4b724:	00800174 	movhi	r2,5
   4b728:	10833704 	addi	r2,r2,3292
   4b72c:	10800017 	ldw	r2,0(r2)
   4b730:	100b883a 	mov	r5,r2
   4b734:	01800174 	movhi	r6,5
   4b738:	31ae6604 	addi	r6,r6,-18024
   4b73c:	e1fffd17 	ldw	r7,-12(fp)
   4b740:	004c1140 	call	4c114 <alt_alarm_start>
   4b744:	1004403a 	cmpge	r2,r2,zero
   4b748:	1000041e 	bne	r2,zero,4b75c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4b74c:	e0fffd17 	ldw	r3,-12(fp)
   4b750:	00a00034 	movhi	r2,32768
   4b754:	10bfffc4 	addi	r2,r2,-1
   4b758:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4b75c:	e037883a 	mov	sp,fp
   4b760:	dfc00117 	ldw	ra,4(sp)
   4b764:	df000017 	ldw	fp,0(sp)
   4b768:	dec00204 	addi	sp,sp,8
   4b76c:	f800283a 	ret

0004b770 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4b770:	defff804 	addi	sp,sp,-32
   4b774:	df000715 	stw	fp,28(sp)
   4b778:	df000704 	addi	fp,sp,28
   4b77c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4b780:	e0bfff17 	ldw	r2,-4(fp)
   4b784:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   4b788:	e0bffe17 	ldw	r2,-8(fp)
   4b78c:	10800017 	ldw	r2,0(r2)
   4b790:	e0bffd15 	stw	r2,-12(fp)
   4b794:	00000006 	br	4b798 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b798:	e0bffd17 	ldw	r2,-12(fp)
   4b79c:	10800104 	addi	r2,r2,4
   4b7a0:	10800037 	ldwio	r2,0(r2)
   4b7a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4b7a8:	e0bffc17 	ldw	r2,-16(fp)
   4b7ac:	1080c00c 	andi	r2,r2,768
   4b7b0:	1005003a 	cmpeq	r2,r2,zero
   4b7b4:	1000741e 	bne	r2,zero,4b988 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4b7b8:	e0bffc17 	ldw	r2,-16(fp)
   4b7bc:	1080400c 	andi	r2,r2,256
   4b7c0:	1005003a 	cmpeq	r2,r2,zero
   4b7c4:	1000351e 	bne	r2,zero,4b89c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4b7c8:	00800074 	movhi	r2,1
   4b7cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b7d0:	e0bffe17 	ldw	r2,-8(fp)
   4b7d4:	10800a17 	ldw	r2,40(r2)
   4b7d8:	10800044 	addi	r2,r2,1
   4b7dc:	1081ffcc 	andi	r2,r2,2047
   4b7e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   4b7e4:	e0bffe17 	ldw	r2,-8(fp)
   4b7e8:	10c00b17 	ldw	r3,44(r2)
   4b7ec:	e0bffa17 	ldw	r2,-24(fp)
   4b7f0:	18801626 	beq	r3,r2,4b84c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4b7f4:	e0bffd17 	ldw	r2,-12(fp)
   4b7f8:	10800037 	ldwio	r2,0(r2)
   4b7fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4b800:	e0bffb17 	ldw	r2,-20(fp)
   4b804:	10a0000c 	andi	r2,r2,32768
   4b808:	1005003a 	cmpeq	r2,r2,zero
   4b80c:	10000f1e 	bne	r2,zero,4b84c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4b810:	e0bffe17 	ldw	r2,-8(fp)
   4b814:	10c00a17 	ldw	r3,40(r2)
   4b818:	e0bffb17 	ldw	r2,-20(fp)
   4b81c:	1009883a 	mov	r4,r2
   4b820:	e0bffe17 	ldw	r2,-8(fp)
   4b824:	1885883a 	add	r2,r3,r2
   4b828:	10800e04 	addi	r2,r2,56
   4b82c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b830:	e0bffe17 	ldw	r2,-8(fp)
   4b834:	10800a17 	ldw	r2,40(r2)
   4b838:	10800044 	addi	r2,r2,1
   4b83c:	10c1ffcc 	andi	r3,r2,2047
   4b840:	e0bffe17 	ldw	r2,-8(fp)
   4b844:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4b848:	003fe106 	br	4b7d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4b84c:	e0bffb17 	ldw	r2,-20(fp)
   4b850:	10bfffec 	andhi	r2,r2,65535
   4b854:	1005003a 	cmpeq	r2,r2,zero
   4b858:	1000101e 	bne	r2,zero,4b89c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4b85c:	e0bffe17 	ldw	r2,-8(fp)
   4b860:	10c00817 	ldw	r3,32(r2)
   4b864:	00bfff84 	movi	r2,-2
   4b868:	1886703a 	and	r3,r3,r2
   4b86c:	e0bffe17 	ldw	r2,-8(fp)
   4b870:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4b874:	e0bffd17 	ldw	r2,-12(fp)
   4b878:	11000104 	addi	r4,r2,4
   4b87c:	e0bffe17 	ldw	r2,-8(fp)
   4b880:	10800817 	ldw	r2,32(r2)
   4b884:	1007883a 	mov	r3,r2
   4b888:	2005883a 	mov	r2,r4
   4b88c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b890:	e0bffd17 	ldw	r2,-12(fp)
   4b894:	10800104 	addi	r2,r2,4
   4b898:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4b89c:	e0bffc17 	ldw	r2,-16(fp)
   4b8a0:	1080800c 	andi	r2,r2,512
   4b8a4:	1005003a 	cmpeq	r2,r2,zero
   4b8a8:	103fbb1e 	bne	r2,zero,4b798 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4b8ac:	e0bffc17 	ldw	r2,-16(fp)
   4b8b0:	10bfffec 	andhi	r2,r2,65535
   4b8b4:	1004d43a 	srli	r2,r2,16
   4b8b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b8bc:	00001506 	br	4b914 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4b8c0:	e13ffd17 	ldw	r4,-12(fp)
   4b8c4:	e0bffe17 	ldw	r2,-8(fp)
   4b8c8:	10c00d17 	ldw	r3,52(r2)
   4b8cc:	e0bffe17 	ldw	r2,-8(fp)
   4b8d0:	1885883a 	add	r2,r3,r2
   4b8d4:	10820e04 	addi	r2,r2,2104
   4b8d8:	10800003 	ldbu	r2,0(r2)
   4b8dc:	10c03fcc 	andi	r3,r2,255
   4b8e0:	18c0201c 	xori	r3,r3,128
   4b8e4:	18ffe004 	addi	r3,r3,-128
   4b8e8:	2005883a 	mov	r2,r4
   4b8ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4b8f0:	e0bffe17 	ldw	r2,-8(fp)
   4b8f4:	10800d17 	ldw	r2,52(r2)
   4b8f8:	10800044 	addi	r2,r2,1
   4b8fc:	10c1ffcc 	andi	r3,r2,2047
   4b900:	e0bffe17 	ldw	r2,-8(fp)
   4b904:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4b908:	e0bff917 	ldw	r2,-28(fp)
   4b90c:	10bfffc4 	addi	r2,r2,-1
   4b910:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4b914:	e0bff917 	ldw	r2,-28(fp)
   4b918:	1005003a 	cmpeq	r2,r2,zero
   4b91c:	1000051e 	bne	r2,zero,4b934 <altera_avalon_jtag_uart_irq+0x1c4>
   4b920:	e0bffe17 	ldw	r2,-8(fp)
   4b924:	10c00d17 	ldw	r3,52(r2)
   4b928:	e0bffe17 	ldw	r2,-8(fp)
   4b92c:	10800c17 	ldw	r2,48(r2)
   4b930:	18bfe31e 	bne	r3,r2,4b8c0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4b934:	e0bff917 	ldw	r2,-28(fp)
   4b938:	1005003a 	cmpeq	r2,r2,zero
   4b93c:	103f961e 	bne	r2,zero,4b798 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4b940:	e0bffe17 	ldw	r2,-8(fp)
   4b944:	10c00817 	ldw	r3,32(r2)
   4b948:	00bfff44 	movi	r2,-3
   4b94c:	1886703a 	and	r3,r3,r2
   4b950:	e0bffe17 	ldw	r2,-8(fp)
   4b954:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4b958:	e0bffe17 	ldw	r2,-8(fp)
   4b95c:	10800017 	ldw	r2,0(r2)
   4b960:	11000104 	addi	r4,r2,4
   4b964:	e0bffe17 	ldw	r2,-8(fp)
   4b968:	10800817 	ldw	r2,32(r2)
   4b96c:	1007883a 	mov	r3,r2
   4b970:	2005883a 	mov	r2,r4
   4b974:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4b978:	e0bffd17 	ldw	r2,-12(fp)
   4b97c:	10800104 	addi	r2,r2,4
   4b980:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4b984:	003f8406 	br	4b798 <altera_avalon_jtag_uart_irq+0x28>
}
   4b988:	e037883a 	mov	sp,fp
   4b98c:	df000017 	ldw	fp,0(sp)
   4b990:	dec00104 	addi	sp,sp,4
   4b994:	f800283a 	ret

0004b998 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4b998:	defffc04 	addi	sp,sp,-16
   4b99c:	df000315 	stw	fp,12(sp)
   4b9a0:	df000304 	addi	fp,sp,12
   4b9a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4b9a8:	e0bfff17 	ldw	r2,-4(fp)
   4b9ac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4b9b0:	e0bffe17 	ldw	r2,-8(fp)
   4b9b4:	10800017 	ldw	r2,0(r2)
   4b9b8:	10800104 	addi	r2,r2,4
   4b9bc:	10800037 	ldwio	r2,0(r2)
   4b9c0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4b9c4:	e0bffd17 	ldw	r2,-12(fp)
   4b9c8:	1081000c 	andi	r2,r2,1024
   4b9cc:	1005003a 	cmpeq	r2,r2,zero
   4b9d0:	10000c1e 	bne	r2,zero,4ba04 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4b9d4:	e0bffe17 	ldw	r2,-8(fp)
   4b9d8:	10800017 	ldw	r2,0(r2)
   4b9dc:	11000104 	addi	r4,r2,4
   4b9e0:	e0bffe17 	ldw	r2,-8(fp)
   4b9e4:	10800817 	ldw	r2,32(r2)
   4b9e8:	10810014 	ori	r2,r2,1024
   4b9ec:	1007883a 	mov	r3,r2
   4b9f0:	2005883a 	mov	r2,r4
   4b9f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   4b9f8:	e0bffe17 	ldw	r2,-8(fp)
   4b9fc:	10000915 	stw	zero,36(r2)
   4ba00:	00000a06 	br	4ba2c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4ba04:	e0bffe17 	ldw	r2,-8(fp)
   4ba08:	10c00917 	ldw	r3,36(r2)
   4ba0c:	00a00034 	movhi	r2,32768
   4ba10:	10bfff04 	addi	r2,r2,-4
   4ba14:	10c00536 	bltu	r2,r3,4ba2c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   4ba18:	e0bffe17 	ldw	r2,-8(fp)
   4ba1c:	10800917 	ldw	r2,36(r2)
   4ba20:	10c00044 	addi	r3,r2,1
   4ba24:	e0bffe17 	ldw	r2,-8(fp)
   4ba28:	10c00915 	stw	r3,36(r2)
   4ba2c:	00800174 	movhi	r2,5
   4ba30:	10833704 	addi	r2,r2,3292
   4ba34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4ba38:	e037883a 	mov	sp,fp
   4ba3c:	df000017 	ldw	fp,0(sp)
   4ba40:	dec00104 	addi	sp,sp,4
   4ba44:	f800283a 	ret

0004ba48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4ba48:	defffc04 	addi	sp,sp,-16
   4ba4c:	df000315 	stw	fp,12(sp)
   4ba50:	df000304 	addi	fp,sp,12
   4ba54:	e13ffd15 	stw	r4,-12(fp)
   4ba58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ba5c:	00000706 	br	4ba7c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   4ba60:	e0bffe17 	ldw	r2,-8(fp)
   4ba64:	1090000c 	andi	r2,r2,16384
   4ba68:	1005003a 	cmpeq	r2,r2,zero
   4ba6c:	1000031e 	bne	r2,zero,4ba7c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   4ba70:	00bffd44 	movi	r2,-11
   4ba74:	e0bfff15 	stw	r2,-4(fp)
   4ba78:	00000b06 	br	4baa8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4ba7c:	e0bffd17 	ldw	r2,-12(fp)
   4ba80:	10c00d17 	ldw	r3,52(r2)
   4ba84:	e0bffd17 	ldw	r2,-12(fp)
   4ba88:	10800c17 	ldw	r2,48(r2)
   4ba8c:	18800526 	beq	r3,r2,4baa4 <altera_avalon_jtag_uart_close+0x5c>
   4ba90:	e0bffd17 	ldw	r2,-12(fp)
   4ba94:	10c00917 	ldw	r3,36(r2)
   4ba98:	e0bffd17 	ldw	r2,-12(fp)
   4ba9c:	10800117 	ldw	r2,4(r2)
   4baa0:	18bfef36 	bltu	r3,r2,4ba60 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4baa4:	e03fff15 	stw	zero,-4(fp)
   4baa8:	e0bfff17 	ldw	r2,-4(fp)
}
   4baac:	e037883a 	mov	sp,fp
   4bab0:	df000017 	ldw	fp,0(sp)
   4bab4:	dec00104 	addi	sp,sp,4
   4bab8:	f800283a 	ret

0004babc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4babc:	defff804 	addi	sp,sp,-32
   4bac0:	df000715 	stw	fp,28(sp)
   4bac4:	df000704 	addi	fp,sp,28
   4bac8:	e13ffb15 	stw	r4,-20(fp)
   4bacc:	e17ffc15 	stw	r5,-16(fp)
   4bad0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   4bad4:	00bff9c4 	movi	r2,-25
   4bad8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   4badc:	e0bffc17 	ldw	r2,-16(fp)
   4bae0:	e0bfff15 	stw	r2,-4(fp)
   4bae4:	e0ffff17 	ldw	r3,-4(fp)
   4bae8:	189a8060 	cmpeqi	r2,r3,27137
   4baec:	1000041e 	bne	r2,zero,4bb00 <altera_avalon_jtag_uart_ioctl+0x44>
   4baf0:	e0ffff17 	ldw	r3,-4(fp)
   4baf4:	189a80a0 	cmpeqi	r2,r3,27138
   4baf8:	10001b1e 	bne	r2,zero,4bb68 <altera_avalon_jtag_uart_ioctl+0xac>
   4bafc:	00002706 	br	4bb9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4bb00:	e0bffb17 	ldw	r2,-20(fp)
   4bb04:	10c00117 	ldw	r3,4(r2)
   4bb08:	00a00034 	movhi	r2,32768
   4bb0c:	10bfffc4 	addi	r2,r2,-1
   4bb10:	18802226 	beq	r3,r2,4bb9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   4bb14:	e0bffd17 	ldw	r2,-12(fp)
   4bb18:	10800017 	ldw	r2,0(r2)
   4bb1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4bb20:	e0bff917 	ldw	r2,-28(fp)
   4bb24:	10800090 	cmplti	r2,r2,2
   4bb28:	1000071e 	bne	r2,zero,4bb48 <altera_avalon_jtag_uart_ioctl+0x8c>
   4bb2c:	e0fff917 	ldw	r3,-28(fp)
   4bb30:	00a00034 	movhi	r2,32768
   4bb34:	10bfffc4 	addi	r2,r2,-1
   4bb38:	18800326 	beq	r3,r2,4bb48 <altera_avalon_jtag_uart_ioctl+0x8c>
   4bb3c:	e0bff917 	ldw	r2,-28(fp)
   4bb40:	e0bffe15 	stw	r2,-8(fp)
   4bb44:	00000306 	br	4bb54 <altera_avalon_jtag_uart_ioctl+0x98>
   4bb48:	00e00034 	movhi	r3,32768
   4bb4c:	18ffff84 	addi	r3,r3,-2
   4bb50:	e0fffe15 	stw	r3,-8(fp)
   4bb54:	e0bffb17 	ldw	r2,-20(fp)
   4bb58:	e0fffe17 	ldw	r3,-8(fp)
   4bb5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   4bb60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   4bb64:	00000d06 	br	4bb9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4bb68:	e0bffb17 	ldw	r2,-20(fp)
   4bb6c:	10c00117 	ldw	r3,4(r2)
   4bb70:	00a00034 	movhi	r2,32768
   4bb74:	10bfffc4 	addi	r2,r2,-1
   4bb78:	18800826 	beq	r3,r2,4bb9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4bb7c:	e13ffd17 	ldw	r4,-12(fp)
   4bb80:	e0bffb17 	ldw	r2,-20(fp)
   4bb84:	10c00917 	ldw	r3,36(r2)
   4bb88:	e0bffb17 	ldw	r2,-20(fp)
   4bb8c:	10800117 	ldw	r2,4(r2)
   4bb90:	1885803a 	cmpltu	r2,r3,r2
   4bb94:	20800015 	stw	r2,0(r4)
      rc = 0;
   4bb98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   4bb9c:	e0bffa17 	ldw	r2,-24(fp)
}
   4bba0:	e037883a 	mov	sp,fp
   4bba4:	df000017 	ldw	fp,0(sp)
   4bba8:	dec00104 	addi	sp,sp,4
   4bbac:	f800283a 	ret

0004bbb0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4bbb0:	defff204 	addi	sp,sp,-56
   4bbb4:	dfc00d15 	stw	ra,52(sp)
   4bbb8:	df000c15 	stw	fp,48(sp)
   4bbbc:	df000c04 	addi	fp,sp,48
   4bbc0:	e13ffb15 	stw	r4,-20(fp)
   4bbc4:	e17ffc15 	stw	r5,-16(fp)
   4bbc8:	e1bffd15 	stw	r6,-12(fp)
   4bbcc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   4bbd0:	e0bffc17 	ldw	r2,-16(fp)
   4bbd4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4bbd8:	00004806 	br	4bcfc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4bbdc:	e0bffb17 	ldw	r2,-20(fp)
   4bbe0:	10800a17 	ldw	r2,40(r2)
   4bbe4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4bbe8:	e0bffb17 	ldw	r2,-20(fp)
   4bbec:	10800b17 	ldw	r2,44(r2)
   4bbf0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   4bbf4:	e0fff717 	ldw	r3,-36(fp)
   4bbf8:	e0bff617 	ldw	r2,-40(fp)
   4bbfc:	18800536 	bltu	r3,r2,4bc14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4bc00:	e0bff717 	ldw	r2,-36(fp)
   4bc04:	e0fff617 	ldw	r3,-40(fp)
   4bc08:	10c5c83a 	sub	r2,r2,r3
   4bc0c:	e0bff815 	stw	r2,-32(fp)
   4bc10:	00000406 	br	4bc24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4bc14:	00820004 	movi	r2,2048
   4bc18:	e0fff617 	ldw	r3,-40(fp)
   4bc1c:	10c5c83a 	sub	r2,r2,r3
   4bc20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4bc24:	e0bff817 	ldw	r2,-32(fp)
   4bc28:	1005003a 	cmpeq	r2,r2,zero
   4bc2c:	10001f1e 	bne	r2,zero,4bcac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   4bc30:	e0fffd17 	ldw	r3,-12(fp)
   4bc34:	e0bff817 	ldw	r2,-32(fp)
   4bc38:	1880022e 	bgeu	r3,r2,4bc44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4bc3c:	e0bffd17 	ldw	r2,-12(fp)
   4bc40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4bc44:	e0bffb17 	ldw	r2,-20(fp)
   4bc48:	10c00e04 	addi	r3,r2,56
   4bc4c:	e0bff617 	ldw	r2,-40(fp)
   4bc50:	1887883a 	add	r3,r3,r2
   4bc54:	e0bffa17 	ldw	r2,-24(fp)
   4bc58:	1009883a 	mov	r4,r2
   4bc5c:	180b883a 	mov	r5,r3
   4bc60:	e1bff817 	ldw	r6,-32(fp)
   4bc64:	00461740 	call	46174 <memcpy>
      ptr   += n;
   4bc68:	e0fff817 	ldw	r3,-32(fp)
   4bc6c:	e0bffa17 	ldw	r2,-24(fp)
   4bc70:	10c5883a 	add	r2,r2,r3
   4bc74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   4bc78:	e0fffd17 	ldw	r3,-12(fp)
   4bc7c:	e0bff817 	ldw	r2,-32(fp)
   4bc80:	1885c83a 	sub	r2,r3,r2
   4bc84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4bc88:	e0fff617 	ldw	r3,-40(fp)
   4bc8c:	e0bff817 	ldw	r2,-32(fp)
   4bc90:	1885883a 	add	r2,r3,r2
   4bc94:	10c1ffcc 	andi	r3,r2,2047
   4bc98:	e0bffb17 	ldw	r2,-20(fp)
   4bc9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4bca0:	e0bffd17 	ldw	r2,-12(fp)
   4bca4:	10800048 	cmpgei	r2,r2,1
   4bca8:	103fcc1e 	bne	r2,zero,4bbdc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   4bcac:	e0fffa17 	ldw	r3,-24(fp)
   4bcb0:	e0bffc17 	ldw	r2,-16(fp)
   4bcb4:	1880141e 	bne	r3,r2,4bd08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4bcb8:	e0bffe17 	ldw	r2,-8(fp)
   4bcbc:	1090000c 	andi	r2,r2,16384
   4bcc0:	1004c03a 	cmpne	r2,r2,zero
   4bcc4:	1000101e 	bne	r2,zero,4bd08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4bcc8:	e0bffb17 	ldw	r2,-20(fp)
   4bccc:	10c00a17 	ldw	r3,40(r2)
   4bcd0:	e0bff717 	ldw	r2,-36(fp)
   4bcd4:	1880051e 	bne	r3,r2,4bcec <altera_avalon_jtag_uart_read+0x13c>
   4bcd8:	e0bffb17 	ldw	r2,-20(fp)
   4bcdc:	10c00917 	ldw	r3,36(r2)
   4bce0:	e0bffb17 	ldw	r2,-20(fp)
   4bce4:	10800117 	ldw	r2,4(r2)
   4bce8:	18bff736 	bltu	r3,r2,4bcc8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4bcec:	e0bffb17 	ldw	r2,-20(fp)
   4bcf0:	10c00a17 	ldw	r3,40(r2)
   4bcf4:	e0bff717 	ldw	r2,-36(fp)
   4bcf8:	18800326 	beq	r3,r2,4bd08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4bcfc:	e0bffd17 	ldw	r2,-12(fp)
   4bd00:	10800048 	cmpgei	r2,r2,1
   4bd04:	103fb51e 	bne	r2,zero,4bbdc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4bd08:	e0fffa17 	ldw	r3,-24(fp)
   4bd0c:	e0bffc17 	ldw	r2,-16(fp)
   4bd10:	18801926 	beq	r3,r2,4bd78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bd14:	0005303a 	rdctl	r2,status
   4bd18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bd1c:	e0fff517 	ldw	r3,-44(fp)
   4bd20:	00bfff84 	movi	r2,-2
   4bd24:	1884703a 	and	r2,r3,r2
   4bd28:	1001703a 	wrctl	status,r2
  
  return context;
   4bd2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4bd30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4bd34:	e0bffb17 	ldw	r2,-20(fp)
   4bd38:	10800817 	ldw	r2,32(r2)
   4bd3c:	10c00054 	ori	r3,r2,1
   4bd40:	e0bffb17 	ldw	r2,-20(fp)
   4bd44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4bd48:	e0bffb17 	ldw	r2,-20(fp)
   4bd4c:	10800017 	ldw	r2,0(r2)
   4bd50:	11000104 	addi	r4,r2,4
   4bd54:	e0bffb17 	ldw	r2,-20(fp)
   4bd58:	10800817 	ldw	r2,32(r2)
   4bd5c:	1007883a 	mov	r3,r2
   4bd60:	2005883a 	mov	r2,r4
   4bd64:	10c00035 	stwio	r3,0(r2)
   4bd68:	e0bff917 	ldw	r2,-28(fp)
   4bd6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bd70:	e0bff417 	ldw	r2,-48(fp)
   4bd74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4bd78:	e0fffa17 	ldw	r3,-24(fp)
   4bd7c:	e0bffc17 	ldw	r2,-16(fp)
   4bd80:	18800526 	beq	r3,r2,4bd98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   4bd84:	e0fffa17 	ldw	r3,-24(fp)
   4bd88:	e0bffc17 	ldw	r2,-16(fp)
   4bd8c:	1887c83a 	sub	r3,r3,r2
   4bd90:	e0ffff15 	stw	r3,-4(fp)
   4bd94:	00000906 	br	4bdbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   4bd98:	e0bffe17 	ldw	r2,-8(fp)
   4bd9c:	1090000c 	andi	r2,r2,16384
   4bda0:	1005003a 	cmpeq	r2,r2,zero
   4bda4:	1000031e 	bne	r2,zero,4bdb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4bda8:	00bffd44 	movi	r2,-11
   4bdac:	e0bfff15 	stw	r2,-4(fp)
   4bdb0:	00000206 	br	4bdbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   4bdb4:	00bffec4 	movi	r2,-5
   4bdb8:	e0bfff15 	stw	r2,-4(fp)
   4bdbc:	e0bfff17 	ldw	r2,-4(fp)
}
   4bdc0:	e037883a 	mov	sp,fp
   4bdc4:	dfc00117 	ldw	ra,4(sp)
   4bdc8:	df000017 	ldw	fp,0(sp)
   4bdcc:	dec00204 	addi	sp,sp,8
   4bdd0:	f800283a 	ret

0004bdd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4bdd4:	defff204 	addi	sp,sp,-56
   4bdd8:	dfc00d15 	stw	ra,52(sp)
   4bddc:	df000c15 	stw	fp,48(sp)
   4bde0:	df000c04 	addi	fp,sp,48
   4bde4:	e13ffb15 	stw	r4,-20(fp)
   4bde8:	e17ffc15 	stw	r5,-16(fp)
   4bdec:	e1bffd15 	stw	r6,-12(fp)
   4bdf0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4bdf4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4bdf8:	e0bffc17 	ldw	r2,-16(fp)
   4bdfc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4be00:	00003a06 	br	4beec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4be04:	e0bffb17 	ldw	r2,-20(fp)
   4be08:	10800c17 	ldw	r2,48(r2)
   4be0c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   4be10:	e0bffb17 	ldw	r2,-20(fp)
   4be14:	10800d17 	ldw	r2,52(r2)
   4be18:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   4be1c:	e0fffa17 	ldw	r3,-24(fp)
   4be20:	e0bff917 	ldw	r2,-28(fp)
   4be24:	1880062e 	bgeu	r3,r2,4be40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4be28:	e0fff917 	ldw	r3,-28(fp)
   4be2c:	e0bffa17 	ldw	r2,-24(fp)
   4be30:	1885c83a 	sub	r2,r3,r2
   4be34:	10bfffc4 	addi	r2,r2,-1
   4be38:	e0bff815 	stw	r2,-32(fp)
   4be3c:	00000c06 	br	4be70 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   4be40:	e0bff917 	ldw	r2,-28(fp)
   4be44:	1005003a 	cmpeq	r2,r2,zero
   4be48:	1000051e 	bne	r2,zero,4be60 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4be4c:	00820004 	movi	r2,2048
   4be50:	e0fffa17 	ldw	r3,-24(fp)
   4be54:	10c5c83a 	sub	r2,r2,r3
   4be58:	e0bff815 	stw	r2,-32(fp)
   4be5c:	00000406 	br	4be70 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4be60:	0081ffc4 	movi	r2,2047
   4be64:	e0fffa17 	ldw	r3,-24(fp)
   4be68:	10c5c83a 	sub	r2,r2,r3
   4be6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   4be70:	e0bff817 	ldw	r2,-32(fp)
   4be74:	1005003a 	cmpeq	r2,r2,zero
   4be78:	10001f1e 	bne	r2,zero,4bef8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   4be7c:	e0fffd17 	ldw	r3,-12(fp)
   4be80:	e0bff817 	ldw	r2,-32(fp)
   4be84:	1880022e 	bgeu	r3,r2,4be90 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   4be88:	e0bffd17 	ldw	r2,-12(fp)
   4be8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4be90:	e0bffb17 	ldw	r2,-20(fp)
   4be94:	10c20e04 	addi	r3,r2,2104
   4be98:	e0bffa17 	ldw	r2,-24(fp)
   4be9c:	1885883a 	add	r2,r3,r2
   4bea0:	e0fffc17 	ldw	r3,-16(fp)
   4bea4:	1009883a 	mov	r4,r2
   4bea8:	180b883a 	mov	r5,r3
   4beac:	e1bff817 	ldw	r6,-32(fp)
   4beb0:	00461740 	call	46174 <memcpy>
      ptr   += n;
   4beb4:	e0fff817 	ldw	r3,-32(fp)
   4beb8:	e0bffc17 	ldw	r2,-16(fp)
   4bebc:	10c5883a 	add	r2,r2,r3
   4bec0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   4bec4:	e0fffd17 	ldw	r3,-12(fp)
   4bec8:	e0bff817 	ldw	r2,-32(fp)
   4becc:	1885c83a 	sub	r2,r3,r2
   4bed0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4bed4:	e0fffa17 	ldw	r3,-24(fp)
   4bed8:	e0bff817 	ldw	r2,-32(fp)
   4bedc:	1885883a 	add	r2,r3,r2
   4bee0:	10c1ffcc 	andi	r3,r2,2047
   4bee4:	e0bffb17 	ldw	r2,-20(fp)
   4bee8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4beec:	e0bffd17 	ldw	r2,-12(fp)
   4bef0:	10800048 	cmpgei	r2,r2,1
   4bef4:	103fc31e 	bne	r2,zero,4be04 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4bef8:	0005303a 	rdctl	r2,status
   4befc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4bf00:	e0fff517 	ldw	r3,-44(fp)
   4bf04:	00bfff84 	movi	r2,-2
   4bf08:	1884703a 	and	r2,r3,r2
   4bf0c:	1001703a 	wrctl	status,r2
  
  return context;
   4bf10:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   4bf14:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4bf18:	e0bffb17 	ldw	r2,-20(fp)
   4bf1c:	10800817 	ldw	r2,32(r2)
   4bf20:	10c00094 	ori	r3,r2,2
   4bf24:	e0bffb17 	ldw	r2,-20(fp)
   4bf28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4bf2c:	e0bffb17 	ldw	r2,-20(fp)
   4bf30:	10800017 	ldw	r2,0(r2)
   4bf34:	11000104 	addi	r4,r2,4
   4bf38:	e0bffb17 	ldw	r2,-20(fp)
   4bf3c:	10800817 	ldw	r2,32(r2)
   4bf40:	1007883a 	mov	r3,r2
   4bf44:	2005883a 	mov	r2,r4
   4bf48:	10c00035 	stwio	r3,0(r2)
   4bf4c:	e0bff717 	ldw	r2,-36(fp)
   4bf50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4bf54:	e0bff417 	ldw	r2,-48(fp)
   4bf58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   4bf5c:	e0bffd17 	ldw	r2,-12(fp)
   4bf60:	10800050 	cmplti	r2,r2,1
   4bf64:	1000111e 	bne	r2,zero,4bfac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   4bf68:	e0bffe17 	ldw	r2,-8(fp)
   4bf6c:	1090000c 	andi	r2,r2,16384
   4bf70:	1004c03a 	cmpne	r2,r2,zero
   4bf74:	1000101e 	bne	r2,zero,4bfb8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4bf78:	e0bffb17 	ldw	r2,-20(fp)
   4bf7c:	10c00d17 	ldw	r3,52(r2)
   4bf80:	e0bff917 	ldw	r2,-28(fp)
   4bf84:	1880051e 	bne	r3,r2,4bf9c <altera_avalon_jtag_uart_write+0x1c8>
   4bf88:	e0bffb17 	ldw	r2,-20(fp)
   4bf8c:	10c00917 	ldw	r3,36(r2)
   4bf90:	e0bffb17 	ldw	r2,-20(fp)
   4bf94:	10800117 	ldw	r2,4(r2)
   4bf98:	18bff736 	bltu	r3,r2,4bf78 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   4bf9c:	e0bffb17 	ldw	r2,-20(fp)
   4bfa0:	10c00d17 	ldw	r3,52(r2)
   4bfa4:	e0bff917 	ldw	r2,-28(fp)
   4bfa8:	18800326 	beq	r3,r2,4bfb8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   4bfac:	e0bffd17 	ldw	r2,-12(fp)
   4bfb0:	10800048 	cmpgei	r2,r2,1
   4bfb4:	103fcd1e 	bne	r2,zero,4beec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   4bfb8:	e0fffc17 	ldw	r3,-16(fp)
   4bfbc:	e0bff617 	ldw	r2,-40(fp)
   4bfc0:	18800526 	beq	r3,r2,4bfd8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   4bfc4:	e0fffc17 	ldw	r3,-16(fp)
   4bfc8:	e0bff617 	ldw	r2,-40(fp)
   4bfcc:	1887c83a 	sub	r3,r3,r2
   4bfd0:	e0ffff15 	stw	r3,-4(fp)
   4bfd4:	00000906 	br	4bffc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   4bfd8:	e0bffe17 	ldw	r2,-8(fp)
   4bfdc:	1090000c 	andi	r2,r2,16384
   4bfe0:	1005003a 	cmpeq	r2,r2,zero
   4bfe4:	1000031e 	bne	r2,zero,4bff4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   4bfe8:	00bffd44 	movi	r2,-11
   4bfec:	e0bfff15 	stw	r2,-4(fp)
   4bff0:	00000206 	br	4bffc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   4bff4:	00bffec4 	movi	r2,-5
   4bff8:	e0bfff15 	stw	r2,-4(fp)
   4bffc:	e0bfff17 	ldw	r2,-4(fp)
}
   4c000:	e037883a 	mov	sp,fp
   4c004:	dfc00117 	ldw	ra,4(sp)
   4c008:	df000017 	ldw	fp,0(sp)
   4c00c:	dec00204 	addi	sp,sp,8
   4c010:	f800283a 	ret

0004c014 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4c014:	defffa04 	addi	sp,sp,-24
   4c018:	dfc00515 	stw	ra,20(sp)
   4c01c:	df000415 	stw	fp,16(sp)
   4c020:	df000404 	addi	fp,sp,16
   4c024:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4c028:	e0bfff17 	ldw	r2,-4(fp)
   4c02c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4c030:	e0bfff17 	ldw	r2,-4(fp)
   4c034:	10800104 	addi	r2,r2,4
   4c038:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c03c:	0005303a 	rdctl	r2,status
   4c040:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c044:	e0fffd17 	ldw	r3,-12(fp)
   4c048:	00bfff84 	movi	r2,-2
   4c04c:	1884703a 	and	r2,r3,r2
   4c050:	1001703a 	wrctl	status,r2
  
  return context;
   4c054:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   4c058:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   4c05c:	004cc140 	call	4cc14 <alt_tick>
   4c060:	e0bffe17 	ldw	r2,-8(fp)
   4c064:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c068:	e0bffc17 	ldw	r2,-16(fp)
   4c06c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   4c070:	e037883a 	mov	sp,fp
   4c074:	dfc00117 	ldw	ra,4(sp)
   4c078:	df000017 	ldw	fp,0(sp)
   4c07c:	dec00204 	addi	sp,sp,8
   4c080:	f800283a 	ret

0004c084 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4c084:	defff804 	addi	sp,sp,-32
   4c088:	dfc00715 	stw	ra,28(sp)
   4c08c:	df000615 	stw	fp,24(sp)
   4c090:	df000604 	addi	fp,sp,24
   4c094:	e13ffc15 	stw	r4,-16(fp)
   4c098:	e17ffd15 	stw	r5,-12(fp)
   4c09c:	e1bffe15 	stw	r6,-8(fp)
   4c0a0:	e1ffff15 	stw	r7,-4(fp)
   4c0a4:	e0bfff17 	ldw	r2,-4(fp)
   4c0a8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4c0ac:	00800174 	movhi	r2,5
   4c0b0:	10833704 	addi	r2,r2,3292
   4c0b4:	10800017 	ldw	r2,0(r2)
   4c0b8:	1004c03a 	cmpne	r2,r2,zero
   4c0bc:	1000041e 	bne	r2,zero,4c0d0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   4c0c0:	00c00174 	movhi	r3,5
   4c0c4:	18c33704 	addi	r3,r3,3292
   4c0c8:	e0bffb17 	ldw	r2,-20(fp)
   4c0cc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4c0d0:	e0bffc17 	ldw	r2,-16(fp)
   4c0d4:	10800104 	addi	r2,r2,4
   4c0d8:	1007883a 	mov	r3,r2
   4c0dc:	008001c4 	movi	r2,7
   4c0e0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4c0e4:	d8000015 	stw	zero,0(sp)
   4c0e8:	e13ffd17 	ldw	r4,-12(fp)
   4c0ec:	e17ffe17 	ldw	r5,-8(fp)
   4c0f0:	01800174 	movhi	r6,5
   4c0f4:	31b00504 	addi	r6,r6,-16364
   4c0f8:	e1fffc17 	ldw	r7,-16(fp)
   4c0fc:	004c47c0 	call	4c47c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4c100:	e037883a 	mov	sp,fp
   4c104:	dfc00117 	ldw	ra,4(sp)
   4c108:	df000017 	ldw	fp,0(sp)
   4c10c:	dec00204 	addi	sp,sp,8
   4c110:	f800283a 	ret

0004c114 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   4c114:	defff404 	addi	sp,sp,-48
   4c118:	df000b15 	stw	fp,44(sp)
   4c11c:	df000b04 	addi	fp,sp,44
   4c120:	e13ffb15 	stw	r4,-20(fp)
   4c124:	e17ffc15 	stw	r5,-16(fp)
   4c128:	e1bffd15 	stw	r6,-12(fp)
   4c12c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   4c130:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4c134:	00800174 	movhi	r2,5
   4c138:	10833704 	addi	r2,r2,3292
   4c13c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   4c140:	1005003a 	cmpeq	r2,r2,zero
   4c144:	1000411e 	bne	r2,zero,4c24c <alt_alarm_start+0x138>
  {
    if (alarm)
   4c148:	e0bffb17 	ldw	r2,-20(fp)
   4c14c:	1005003a 	cmpeq	r2,r2,zero
   4c150:	10003b1e 	bne	r2,zero,4c240 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   4c154:	e0fffb17 	ldw	r3,-20(fp)
   4c158:	e0bffd17 	ldw	r2,-12(fp)
   4c15c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   4c160:	e0fffb17 	ldw	r3,-20(fp)
   4c164:	e0bffe17 	ldw	r2,-8(fp)
   4c168:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c16c:	0005303a 	rdctl	r2,status
   4c170:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c174:	e0fff817 	ldw	r3,-32(fp)
   4c178:	00bfff84 	movi	r2,-2
   4c17c:	1884703a 	and	r2,r3,r2
   4c180:	1001703a 	wrctl	status,r2
  
  return context;
   4c184:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   4c188:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4c18c:	00800174 	movhi	r2,5
   4c190:	10833804 	addi	r2,r2,3296
   4c194:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   4c198:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   4c19c:	e0fffc17 	ldw	r3,-16(fp)
   4c1a0:	e0bff917 	ldw	r2,-28(fp)
   4c1a4:	1885883a 	add	r2,r3,r2
   4c1a8:	10c00044 	addi	r3,r2,1
   4c1ac:	e0bffb17 	ldw	r2,-20(fp)
   4c1b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   4c1b4:	e0bffb17 	ldw	r2,-20(fp)
   4c1b8:	10c00217 	ldw	r3,8(r2)
   4c1bc:	e0bff917 	ldw	r2,-28(fp)
   4c1c0:	1880042e 	bgeu	r3,r2,4c1d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   4c1c4:	e0fffb17 	ldw	r3,-20(fp)
   4c1c8:	00800044 	movi	r2,1
   4c1cc:	18800405 	stb	r2,16(r3)
   4c1d0:	00000206 	br	4c1dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   4c1d4:	e0bffb17 	ldw	r2,-20(fp)
   4c1d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   4c1dc:	e0fffb17 	ldw	r3,-20(fp)
   4c1e0:	00800174 	movhi	r2,5
   4c1e4:	10bc9304 	addi	r2,r2,-3508
   4c1e8:	e0bff615 	stw	r2,-40(fp)
   4c1ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4c1f0:	e0fff717 	ldw	r3,-36(fp)
   4c1f4:	e0bff617 	ldw	r2,-40(fp)
   4c1f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4c1fc:	e0bff617 	ldw	r2,-40(fp)
   4c200:	10c00017 	ldw	r3,0(r2)
   4c204:	e0bff717 	ldw	r2,-36(fp)
   4c208:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c20c:	e0bff617 	ldw	r2,-40(fp)
   4c210:	10c00017 	ldw	r3,0(r2)
   4c214:	e0bff717 	ldw	r2,-36(fp)
   4c218:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4c21c:	e0fff617 	ldw	r3,-40(fp)
   4c220:	e0bff717 	ldw	r2,-36(fp)
   4c224:	18800015 	stw	r2,0(r3)
   4c228:	e0bffa17 	ldw	r2,-24(fp)
   4c22c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c230:	e0bff517 	ldw	r2,-44(fp)
   4c234:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   4c238:	e03fff15 	stw	zero,-4(fp)
   4c23c:	00000506 	br	4c254 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   4c240:	00bffa84 	movi	r2,-22
   4c244:	e0bfff15 	stw	r2,-4(fp)
   4c248:	00000206 	br	4c254 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   4c24c:	00bfde84 	movi	r2,-134
   4c250:	e0bfff15 	stw	r2,-4(fp)
   4c254:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   4c258:	e037883a 	mov	sp,fp
   4c25c:	df000017 	ldw	fp,0(sp)
   4c260:	dec00104 	addi	sp,sp,4
   4c264:	f800283a 	ret

0004c268 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4c268:	deffff04 	addi	sp,sp,-4
   4c26c:	df000015 	stw	fp,0(sp)
   4c270:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4c274:	e037883a 	mov	sp,fp
   4c278:	df000017 	ldw	fp,0(sp)
   4c27c:	dec00104 	addi	sp,sp,4
   4c280:	f800283a 	ret

0004c284 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4c284:	defff904 	addi	sp,sp,-28
   4c288:	dfc00615 	stw	ra,24(sp)
   4c28c:	df000515 	stw	fp,20(sp)
   4c290:	df000504 	addi	fp,sp,20
   4c294:	e13ffd15 	stw	r4,-12(fp)
   4c298:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4c29c:	e0bffd17 	ldw	r2,-12(fp)
   4c2a0:	1005003a 	cmpeq	r2,r2,zero
   4c2a4:	1000041e 	bne	r2,zero,4c2b8 <alt_dev_llist_insert+0x34>
   4c2a8:	e0bffd17 	ldw	r2,-12(fp)
   4c2ac:	10800217 	ldw	r2,8(r2)
   4c2b0:	1004c03a 	cmpne	r2,r2,zero
   4c2b4:	1000071e 	bne	r2,zero,4c2d4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   4c2b8:	004c3380 	call	4c338 <alt_get_errno>
   4c2bc:	1007883a 	mov	r3,r2
   4c2c0:	00800584 	movi	r2,22
   4c2c4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4c2c8:	00bffa84 	movi	r2,-22
   4c2cc:	e0bfff15 	stw	r2,-4(fp)
   4c2d0:	00001306 	br	4c320 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   4c2d4:	e0fffd17 	ldw	r3,-12(fp)
   4c2d8:	e0bffe17 	ldw	r2,-8(fp)
   4c2dc:	e0bffb15 	stw	r2,-20(fp)
   4c2e0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4c2e4:	e0fffc17 	ldw	r3,-16(fp)
   4c2e8:	e0bffb17 	ldw	r2,-20(fp)
   4c2ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   4c2f0:	e0bffb17 	ldw	r2,-20(fp)
   4c2f4:	10c00017 	ldw	r3,0(r2)
   4c2f8:	e0bffc17 	ldw	r2,-16(fp)
   4c2fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4c300:	e0bffb17 	ldw	r2,-20(fp)
   4c304:	10c00017 	ldw	r3,0(r2)
   4c308:	e0bffc17 	ldw	r2,-16(fp)
   4c30c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   4c310:	e0fffb17 	ldw	r3,-20(fp)
   4c314:	e0bffc17 	ldw	r2,-16(fp)
   4c318:	18800015 	stw	r2,0(r3)

  return 0;  
   4c31c:	e03fff15 	stw	zero,-4(fp)
   4c320:	e0bfff17 	ldw	r2,-4(fp)
}
   4c324:	e037883a 	mov	sp,fp
   4c328:	dfc00117 	ldw	ra,4(sp)
   4c32c:	df000017 	ldw	fp,0(sp)
   4c330:	dec00204 	addi	sp,sp,8
   4c334:	f800283a 	ret

0004c338 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4c338:	defffd04 	addi	sp,sp,-12
   4c33c:	dfc00215 	stw	ra,8(sp)
   4c340:	df000115 	stw	fp,4(sp)
   4c344:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4c348:	00800174 	movhi	r2,5
   4c34c:	10bc9004 	addi	r2,r2,-3520
   4c350:	10800017 	ldw	r2,0(r2)
   4c354:	1005003a 	cmpeq	r2,r2,zero
   4c358:	1000061e 	bne	r2,zero,4c374 <alt_get_errno+0x3c>
   4c35c:	00800174 	movhi	r2,5
   4c360:	10bc9004 	addi	r2,r2,-3520
   4c364:	10800017 	ldw	r2,0(r2)
   4c368:	103ee83a 	callr	r2
   4c36c:	e0bfff15 	stw	r2,-4(fp)
   4c370:	00000306 	br	4c380 <alt_get_errno+0x48>
   4c374:	00800174 	movhi	r2,5
   4c378:	10833204 	addi	r2,r2,3272
   4c37c:	e0bfff15 	stw	r2,-4(fp)
   4c380:	e0bfff17 	ldw	r2,-4(fp)
}
   4c384:	e037883a 	mov	sp,fp
   4c388:	dfc00117 	ldw	ra,4(sp)
   4c38c:	df000017 	ldw	fp,0(sp)
   4c390:	dec00204 	addi	sp,sp,8
   4c394:	f800283a 	ret

0004c398 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   4c398:	defffd04 	addi	sp,sp,-12
   4c39c:	dfc00215 	stw	ra,8(sp)
   4c3a0:	df000115 	stw	fp,4(sp)
   4c3a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c3a8:	00bfff04 	movi	r2,-4
   4c3ac:	00c00174 	movhi	r3,5
   4c3b0:	18f4f404 	addi	r3,r3,-11312
   4c3b4:	1885883a 	add	r2,r3,r2
   4c3b8:	e0bfff15 	stw	r2,-4(fp)
   4c3bc:	00000606 	br	4c3d8 <_do_ctors+0x40>
        (*ctor) (); 
   4c3c0:	e0bfff17 	ldw	r2,-4(fp)
   4c3c4:	10800017 	ldw	r2,0(r2)
   4c3c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   4c3cc:	e0bfff17 	ldw	r2,-4(fp)
   4c3d0:	10bfff04 	addi	r2,r2,-4
   4c3d4:	e0bfff15 	stw	r2,-4(fp)
   4c3d8:	e0ffff17 	ldw	r3,-4(fp)
   4c3dc:	00800174 	movhi	r2,5
   4c3e0:	10b4f304 	addi	r2,r2,-11316
   4c3e4:	18bff62e 	bgeu	r3,r2,4c3c0 <_do_ctors+0x28>
        (*ctor) (); 
}
   4c3e8:	e037883a 	mov	sp,fp
   4c3ec:	dfc00117 	ldw	ra,4(sp)
   4c3f0:	df000017 	ldw	fp,0(sp)
   4c3f4:	dec00204 	addi	sp,sp,8
   4c3f8:	f800283a 	ret

0004c3fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   4c3fc:	defffd04 	addi	sp,sp,-12
   4c400:	dfc00215 	stw	ra,8(sp)
   4c404:	df000115 	stw	fp,4(sp)
   4c408:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c40c:	00bfff04 	movi	r2,-4
   4c410:	00c00174 	movhi	r3,5
   4c414:	18f4f404 	addi	r3,r3,-11312
   4c418:	1885883a 	add	r2,r3,r2
   4c41c:	e0bfff15 	stw	r2,-4(fp)
   4c420:	00000606 	br	4c43c <_do_dtors+0x40>
        (*dtor) (); 
   4c424:	e0bfff17 	ldw	r2,-4(fp)
   4c428:	10800017 	ldw	r2,0(r2)
   4c42c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   4c430:	e0bfff17 	ldw	r2,-4(fp)
   4c434:	10bfff04 	addi	r2,r2,-4
   4c438:	e0bfff15 	stw	r2,-4(fp)
   4c43c:	e0ffff17 	ldw	r3,-4(fp)
   4c440:	00800174 	movhi	r2,5
   4c444:	10b4f404 	addi	r2,r2,-11312
   4c448:	18bff62e 	bgeu	r3,r2,4c424 <_do_dtors+0x28>
        (*dtor) (); 
}
   4c44c:	e037883a 	mov	sp,fp
   4c450:	dfc00117 	ldw	ra,4(sp)
   4c454:	df000017 	ldw	fp,0(sp)
   4c458:	dec00204 	addi	sp,sp,8
   4c45c:	f800283a 	ret

0004c460 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   4c460:	deffff04 	addi	sp,sp,-4
   4c464:	df000015 	stw	fp,0(sp)
   4c468:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   4c46c:	e037883a 	mov	sp,fp
   4c470:	df000017 	ldw	fp,0(sp)
   4c474:	dec00104 	addi	sp,sp,4
   4c478:	f800283a 	ret

0004c47c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c47c:	defff904 	addi	sp,sp,-28
   4c480:	dfc00615 	stw	ra,24(sp)
   4c484:	df000515 	stw	fp,20(sp)
   4c488:	df000504 	addi	fp,sp,20
   4c48c:	e13ffc15 	stw	r4,-16(fp)
   4c490:	e17ffd15 	stw	r5,-12(fp)
   4c494:	e1bffe15 	stw	r6,-8(fp)
   4c498:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4c49c:	e0800217 	ldw	r2,8(fp)
   4c4a0:	d8800015 	stw	r2,0(sp)
   4c4a4:	e13ffc17 	ldw	r4,-16(fp)
   4c4a8:	e17ffd17 	ldw	r5,-12(fp)
   4c4ac:	e1bffe17 	ldw	r6,-8(fp)
   4c4b0:	e1ffff17 	ldw	r7,-4(fp)
   4c4b4:	004c6500 	call	4c650 <alt_iic_isr_register>
}  
   4c4b8:	e037883a 	mov	sp,fp
   4c4bc:	dfc00117 	ldw	ra,4(sp)
   4c4c0:	df000017 	ldw	fp,0(sp)
   4c4c4:	dec00204 	addi	sp,sp,8
   4c4c8:	f800283a 	ret

0004c4cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   4c4cc:	defff904 	addi	sp,sp,-28
   4c4d0:	df000615 	stw	fp,24(sp)
   4c4d4:	df000604 	addi	fp,sp,24
   4c4d8:	e13ffe15 	stw	r4,-8(fp)
   4c4dc:	e17fff15 	stw	r5,-4(fp)
   4c4e0:	e0bfff17 	ldw	r2,-4(fp)
   4c4e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c4e8:	0005303a 	rdctl	r2,status
   4c4ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c4f0:	e0fffb17 	ldw	r3,-20(fp)
   4c4f4:	00bfff84 	movi	r2,-2
   4c4f8:	1884703a 	and	r2,r3,r2
   4c4fc:	1001703a 	wrctl	status,r2
  
  return context;
   4c500:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c504:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   4c508:	e0fffc17 	ldw	r3,-16(fp)
   4c50c:	00800044 	movi	r2,1
   4c510:	10c4983a 	sll	r2,r2,r3
   4c514:	1007883a 	mov	r3,r2
   4c518:	00800174 	movhi	r2,5
   4c51c:	10833304 	addi	r2,r2,3276
   4c520:	10800017 	ldw	r2,0(r2)
   4c524:	1886b03a 	or	r3,r3,r2
   4c528:	00800174 	movhi	r2,5
   4c52c:	10833304 	addi	r2,r2,3276
   4c530:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c534:	00800174 	movhi	r2,5
   4c538:	10833304 	addi	r2,r2,3276
   4c53c:	10800017 	ldw	r2,0(r2)
   4c540:	100170fa 	wrctl	ienable,r2
   4c544:	e0bffd17 	ldw	r2,-12(fp)
   4c548:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c54c:	e0bffa17 	ldw	r2,-24(fp)
   4c550:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c554:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   4c558:	e037883a 	mov	sp,fp
   4c55c:	df000017 	ldw	fp,0(sp)
   4c560:	dec00104 	addi	sp,sp,4
   4c564:	f800283a 	ret

0004c568 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   4c568:	defff904 	addi	sp,sp,-28
   4c56c:	df000615 	stw	fp,24(sp)
   4c570:	df000604 	addi	fp,sp,24
   4c574:	e13ffe15 	stw	r4,-8(fp)
   4c578:	e17fff15 	stw	r5,-4(fp)
   4c57c:	e0bfff17 	ldw	r2,-4(fp)
   4c580:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c584:	0005303a 	rdctl	r2,status
   4c588:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c58c:	e0fffb17 	ldw	r3,-20(fp)
   4c590:	00bfff84 	movi	r2,-2
   4c594:	1884703a 	and	r2,r3,r2
   4c598:	1001703a 	wrctl	status,r2
  
  return context;
   4c59c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4c5a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   4c5a4:	e0fffc17 	ldw	r3,-16(fp)
   4c5a8:	00800044 	movi	r2,1
   4c5ac:	10c4983a 	sll	r2,r2,r3
   4c5b0:	0084303a 	nor	r2,zero,r2
   4c5b4:	1007883a 	mov	r3,r2
   4c5b8:	00800174 	movhi	r2,5
   4c5bc:	10833304 	addi	r2,r2,3276
   4c5c0:	10800017 	ldw	r2,0(r2)
   4c5c4:	1886703a 	and	r3,r3,r2
   4c5c8:	00800174 	movhi	r2,5
   4c5cc:	10833304 	addi	r2,r2,3276
   4c5d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4c5d4:	00800174 	movhi	r2,5
   4c5d8:	10833304 	addi	r2,r2,3276
   4c5dc:	10800017 	ldw	r2,0(r2)
   4c5e0:	100170fa 	wrctl	ienable,r2
   4c5e4:	e0bffd17 	ldw	r2,-12(fp)
   4c5e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c5ec:	e0bffa17 	ldw	r2,-24(fp)
   4c5f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4c5f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   4c5f8:	e037883a 	mov	sp,fp
   4c5fc:	df000017 	ldw	fp,0(sp)
   4c600:	dec00104 	addi	sp,sp,4
   4c604:	f800283a 	ret

0004c608 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4c608:	defffc04 	addi	sp,sp,-16
   4c60c:	df000315 	stw	fp,12(sp)
   4c610:	df000304 	addi	fp,sp,12
   4c614:	e13ffe15 	stw	r4,-8(fp)
   4c618:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4c61c:	000530fa 	rdctl	r2,ienable
   4c620:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4c624:	e0ffff17 	ldw	r3,-4(fp)
   4c628:	00800044 	movi	r2,1
   4c62c:	10c4983a 	sll	r2,r2,r3
   4c630:	1007883a 	mov	r3,r2
   4c634:	e0bffd17 	ldw	r2,-12(fp)
   4c638:	1884703a 	and	r2,r3,r2
   4c63c:	1004c03a 	cmpne	r2,r2,zero
}
   4c640:	e037883a 	mov	sp,fp
   4c644:	df000017 	ldw	fp,0(sp)
   4c648:	dec00104 	addi	sp,sp,4
   4c64c:	f800283a 	ret

0004c650 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4c650:	defff404 	addi	sp,sp,-48
   4c654:	dfc00b15 	stw	ra,44(sp)
   4c658:	df000a15 	stw	fp,40(sp)
   4c65c:	df000a04 	addi	fp,sp,40
   4c660:	e13ffb15 	stw	r4,-20(fp)
   4c664:	e17ffc15 	stw	r5,-16(fp)
   4c668:	e1bffd15 	stw	r6,-12(fp)
   4c66c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   4c670:	00bffa84 	movi	r2,-22
   4c674:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   4c678:	e0bffc17 	ldw	r2,-16(fp)
   4c67c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4c680:	e0bff917 	ldw	r2,-28(fp)
   4c684:	10800808 	cmpgei	r2,r2,32
   4c688:	1000291e 	bne	r2,zero,4c730 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4c68c:	0005303a 	rdctl	r2,status
   4c690:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4c694:	e0fff717 	ldw	r3,-36(fp)
   4c698:	00bfff84 	movi	r2,-2
   4c69c:	1884703a 	and	r2,r3,r2
   4c6a0:	1001703a 	wrctl	status,r2
  
  return context;
   4c6a4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   4c6a8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   4c6ac:	e0bff917 	ldw	r2,-28(fp)
   4c6b0:	00c00174 	movhi	r3,5
   4c6b4:	18c34304 	addi	r3,r3,3340
   4c6b8:	100490fa 	slli	r2,r2,3
   4c6bc:	10c7883a 	add	r3,r2,r3
   4c6c0:	e0bffd17 	ldw	r2,-12(fp)
   4c6c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   4c6c8:	e0bff917 	ldw	r2,-28(fp)
   4c6cc:	00c00174 	movhi	r3,5
   4c6d0:	18c34304 	addi	r3,r3,3340
   4c6d4:	100490fa 	slli	r2,r2,3
   4c6d8:	10c5883a 	add	r2,r2,r3
   4c6dc:	10c00104 	addi	r3,r2,4
   4c6e0:	e0bffe17 	ldw	r2,-8(fp)
   4c6e4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4c6e8:	e0bffd17 	ldw	r2,-12(fp)
   4c6ec:	1005003a 	cmpeq	r2,r2,zero
   4c6f0:	1000051e 	bne	r2,zero,4c708 <alt_iic_isr_register+0xb8>
   4c6f4:	e17ff917 	ldw	r5,-28(fp)
   4c6f8:	e13ffb17 	ldw	r4,-20(fp)
   4c6fc:	004c4cc0 	call	4c4cc <alt_ic_irq_enable>
   4c700:	e0bfff15 	stw	r2,-4(fp)
   4c704:	00000406 	br	4c718 <alt_iic_isr_register+0xc8>
   4c708:	e17ff917 	ldw	r5,-28(fp)
   4c70c:	e13ffb17 	ldw	r4,-20(fp)
   4c710:	004c5680 	call	4c568 <alt_ic_irq_disable>
   4c714:	e0bfff15 	stw	r2,-4(fp)
   4c718:	e0bfff17 	ldw	r2,-4(fp)
   4c71c:	e0bffa15 	stw	r2,-24(fp)
   4c720:	e0bff817 	ldw	r2,-32(fp)
   4c724:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4c728:	e0bff617 	ldw	r2,-40(fp)
   4c72c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4c730:	e0bffa17 	ldw	r2,-24(fp)
}
   4c734:	e037883a 	mov	sp,fp
   4c738:	dfc00117 	ldw	ra,4(sp)
   4c73c:	df000017 	ldw	fp,0(sp)
   4c740:	dec00204 	addi	sp,sp,8
   4c744:	f800283a 	ret

0004c748 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   4c748:	defff804 	addi	sp,sp,-32
   4c74c:	dfc00715 	stw	ra,28(sp)
   4c750:	df000615 	stw	fp,24(sp)
   4c754:	dc000515 	stw	r16,20(sp)
   4c758:	df000504 	addi	fp,sp,20
   4c75c:	e13ffc15 	stw	r4,-16(fp)
   4c760:	e17ffd15 	stw	r5,-12(fp)
   4c764:	e1bffe15 	stw	r6,-8(fp)
   4c768:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   4c76c:	e13ffd17 	ldw	r4,-12(fp)
   4c770:	e17ffe17 	ldw	r5,-8(fp)
   4c774:	e1bfff17 	ldw	r6,-4(fp)
   4c778:	004c9900 	call	4c990 <open>
   4c77c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   4c780:	e0bffb17 	ldw	r2,-20(fp)
   4c784:	1004803a 	cmplt	r2,r2,zero
   4c788:	10001f1e 	bne	r2,zero,4c808 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   4c78c:	e13ffb17 	ldw	r4,-20(fp)
   4c790:	04000174 	movhi	r16,5
   4c794:	84380d04 	addi	r16,r16,-8140
   4c798:	01400304 	movi	r5,12
   4c79c:	004a0e00 	call	4a0e0 <__mulsi3>
   4c7a0:	1405883a 	add	r2,r2,r16
   4c7a4:	10c00017 	ldw	r3,0(r2)
   4c7a8:	e0bffc17 	ldw	r2,-16(fp)
   4c7ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4c7b0:	e13ffb17 	ldw	r4,-20(fp)
   4c7b4:	04000174 	movhi	r16,5
   4c7b8:	84380d04 	addi	r16,r16,-8140
   4c7bc:	01400304 	movi	r5,12
   4c7c0:	004a0e00 	call	4a0e0 <__mulsi3>
   4c7c4:	1405883a 	add	r2,r2,r16
   4c7c8:	10800104 	addi	r2,r2,4
   4c7cc:	10c00017 	ldw	r3,0(r2)
   4c7d0:	e0bffc17 	ldw	r2,-16(fp)
   4c7d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4c7d8:	e13ffb17 	ldw	r4,-20(fp)
   4c7dc:	04000174 	movhi	r16,5
   4c7e0:	84380d04 	addi	r16,r16,-8140
   4c7e4:	01400304 	movi	r5,12
   4c7e8:	004a0e00 	call	4a0e0 <__mulsi3>
   4c7ec:	1405883a 	add	r2,r2,r16
   4c7f0:	10800204 	addi	r2,r2,8
   4c7f4:	10c00017 	ldw	r3,0(r2)
   4c7f8:	e0bffc17 	ldw	r2,-16(fp)
   4c7fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4c800:	e13ffb17 	ldw	r4,-20(fp)
   4c804:	004b1e80 	call	4b1e8 <alt_release_fd>
  }
} 
   4c808:	e037883a 	mov	sp,fp
   4c80c:	dfc00217 	ldw	ra,8(sp)
   4c810:	df000117 	ldw	fp,4(sp)
   4c814:	dc000017 	ldw	r16,0(sp)
   4c818:	dec00304 	addi	sp,sp,12
   4c81c:	f800283a 	ret

0004c820 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4c820:	defffb04 	addi	sp,sp,-20
   4c824:	dfc00415 	stw	ra,16(sp)
   4c828:	df000315 	stw	fp,12(sp)
   4c82c:	df000304 	addi	fp,sp,12
   4c830:	e13ffd15 	stw	r4,-12(fp)
   4c834:	e17ffe15 	stw	r5,-8(fp)
   4c838:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4c83c:	01000174 	movhi	r4,5
   4c840:	21381004 	addi	r4,r4,-8128
   4c844:	e17ffd17 	ldw	r5,-12(fp)
   4c848:	01800044 	movi	r6,1
   4c84c:	01c07fc4 	movi	r7,511
   4c850:	004c7480 	call	4c748 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4c854:	01000174 	movhi	r4,5
   4c858:	21380d04 	addi	r4,r4,-8140
   4c85c:	e17ffe17 	ldw	r5,-8(fp)
   4c860:	000d883a 	mov	r6,zero
   4c864:	01c07fc4 	movi	r7,511
   4c868:	004c7480 	call	4c748 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4c86c:	01000174 	movhi	r4,5
   4c870:	21381304 	addi	r4,r4,-8116
   4c874:	e17fff17 	ldw	r5,-4(fp)
   4c878:	01800044 	movi	r6,1
   4c87c:	01c07fc4 	movi	r7,511
   4c880:	004c7480 	call	4c748 <alt_open_fd>
}  
   4c884:	e037883a 	mov	sp,fp
   4c888:	dfc00117 	ldw	ra,4(sp)
   4c88c:	df000017 	ldw	fp,0(sp)
   4c890:	dec00204 	addi	sp,sp,8
   4c894:	f800283a 	ret

0004c898 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   4c898:	defffa04 	addi	sp,sp,-24
   4c89c:	dfc00515 	stw	ra,20(sp)
   4c8a0:	df000415 	stw	fp,16(sp)
   4c8a4:	dc000315 	stw	r16,12(sp)
   4c8a8:	df000304 	addi	fp,sp,12
   4c8ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4c8b0:	e0bffe17 	ldw	r2,-8(fp)
   4c8b4:	10800217 	ldw	r2,8(r2)
   4c8b8:	10d00034 	orhi	r3,r2,16384
   4c8bc:	e0bffe17 	ldw	r2,-8(fp)
   4c8c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c8c4:	e03ffd15 	stw	zero,-12(fp)
   4c8c8:	00002306 	br	4c958 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4c8cc:	e13ffd17 	ldw	r4,-12(fp)
   4c8d0:	04000174 	movhi	r16,5
   4c8d4:	84380d04 	addi	r16,r16,-8140
   4c8d8:	01400304 	movi	r5,12
   4c8dc:	004a0e00 	call	4a0e0 <__mulsi3>
   4c8e0:	1405883a 	add	r2,r2,r16
   4c8e4:	10c00017 	ldw	r3,0(r2)
   4c8e8:	e0bffe17 	ldw	r2,-8(fp)
   4c8ec:	10800017 	ldw	r2,0(r2)
   4c8f0:	1880161e 	bne	r3,r2,4c94c <alt_file_locked+0xb4>
   4c8f4:	e13ffd17 	ldw	r4,-12(fp)
   4c8f8:	04000174 	movhi	r16,5
   4c8fc:	84380d04 	addi	r16,r16,-8140
   4c900:	01400304 	movi	r5,12
   4c904:	004a0e00 	call	4a0e0 <__mulsi3>
   4c908:	1405883a 	add	r2,r2,r16
   4c90c:	10800204 	addi	r2,r2,8
   4c910:	10800017 	ldw	r2,0(r2)
   4c914:	1004403a 	cmpge	r2,r2,zero
   4c918:	10000c1e 	bne	r2,zero,4c94c <alt_file_locked+0xb4>
   4c91c:	e13ffd17 	ldw	r4,-12(fp)
   4c920:	01400304 	movi	r5,12
   4c924:	004a0e00 	call	4a0e0 <__mulsi3>
   4c928:	1007883a 	mov	r3,r2
   4c92c:	00800174 	movhi	r2,5
   4c930:	10b80d04 	addi	r2,r2,-8140
   4c934:	1887883a 	add	r3,r3,r2
   4c938:	e0bffe17 	ldw	r2,-8(fp)
   4c93c:	18800326 	beq	r3,r2,4c94c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   4c940:	00bffcc4 	movi	r2,-13
   4c944:	e0bfff15 	stw	r2,-4(fp)
   4c948:	00000a06 	br	4c974 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4c94c:	e0bffd17 	ldw	r2,-12(fp)
   4c950:	10800044 	addi	r2,r2,1
   4c954:	e0bffd15 	stw	r2,-12(fp)
   4c958:	00800174 	movhi	r2,5
   4c95c:	10bc8f04 	addi	r2,r2,-3524
   4c960:	10800017 	ldw	r2,0(r2)
   4c964:	1007883a 	mov	r3,r2
   4c968:	e0bffd17 	ldw	r2,-12(fp)
   4c96c:	18bfd72e 	bgeu	r3,r2,4c8cc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   4c970:	e03fff15 	stw	zero,-4(fp)
   4c974:	e0bfff17 	ldw	r2,-4(fp)
}
   4c978:	e037883a 	mov	sp,fp
   4c97c:	dfc00217 	ldw	ra,8(sp)
   4c980:	df000117 	ldw	fp,4(sp)
   4c984:	dc000017 	ldw	r16,0(sp)
   4c988:	dec00304 	addi	sp,sp,12
   4c98c:	f800283a 	ret

0004c990 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4c990:	defff404 	addi	sp,sp,-48
   4c994:	dfc00b15 	stw	ra,44(sp)
   4c998:	df000a15 	stw	fp,40(sp)
   4c99c:	df000a04 	addi	fp,sp,40
   4c9a0:	e13ffb15 	stw	r4,-20(fp)
   4c9a4:	e17ffc15 	stw	r5,-16(fp)
   4c9a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4c9ac:	00bfffc4 	movi	r2,-1
   4c9b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   4c9b4:	00bffb44 	movi	r2,-19
   4c9b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   4c9bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4c9c0:	e13ffb17 	ldw	r4,-20(fp)
   4c9c4:	01400174 	movhi	r5,5
   4c9c8:	297c8d04 	addi	r5,r5,-3532
   4c9cc:	004cd400 	call	4cd40 <alt_find_dev>
   4c9d0:	e0bffa15 	stw	r2,-24(fp)
   4c9d4:	e0bffa17 	ldw	r2,-24(fp)
   4c9d8:	1004c03a 	cmpne	r2,r2,zero
   4c9dc:	1000051e 	bne	r2,zero,4c9f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4c9e0:	e13ffb17 	ldw	r4,-20(fp)
   4c9e4:	004cdd40 	call	4cdd4 <alt_find_file>
   4c9e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   4c9ec:	00800044 	movi	r2,1
   4c9f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4c9f4:	e0bffa17 	ldw	r2,-24(fp)
   4c9f8:	1005003a 	cmpeq	r2,r2,zero
   4c9fc:	1000311e 	bne	r2,zero,4cac4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4ca00:	e13ffa17 	ldw	r4,-24(fp)
   4ca04:	004cef40 	call	4cef4 <alt_get_fd>
   4ca08:	e0bff815 	stw	r2,-32(fp)
   4ca0c:	e0bff817 	ldw	r2,-32(fp)
   4ca10:	1004403a 	cmpge	r2,r2,zero
   4ca14:	1000031e 	bne	r2,zero,4ca24 <open+0x94>
    {
      status = index;
   4ca18:	e0bff817 	ldw	r2,-32(fp)
   4ca1c:	e0bff715 	stw	r2,-36(fp)
   4ca20:	00002a06 	br	4cacc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   4ca24:	e13ff817 	ldw	r4,-32(fp)
   4ca28:	01400304 	movi	r5,12
   4ca2c:	004a0e00 	call	4a0e0 <__mulsi3>
   4ca30:	1007883a 	mov	r3,r2
   4ca34:	00800174 	movhi	r2,5
   4ca38:	10b80d04 	addi	r2,r2,-8140
   4ca3c:	1885883a 	add	r2,r3,r2
   4ca40:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4ca44:	e0fffc17 	ldw	r3,-16(fp)
   4ca48:	00900034 	movhi	r2,16384
   4ca4c:	10bfffc4 	addi	r2,r2,-1
   4ca50:	1886703a 	and	r3,r3,r2
   4ca54:	e0bff917 	ldw	r2,-28(fp)
   4ca58:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4ca5c:	e0bff617 	ldw	r2,-40(fp)
   4ca60:	1004c03a 	cmpne	r2,r2,zero
   4ca64:	1000061e 	bne	r2,zero,4ca80 <open+0xf0>
   4ca68:	e13ff917 	ldw	r4,-28(fp)
   4ca6c:	004c8980 	call	4c898 <alt_file_locked>
   4ca70:	e0bff715 	stw	r2,-36(fp)
   4ca74:	e0bff717 	ldw	r2,-36(fp)
   4ca78:	1004803a 	cmplt	r2,r2,zero
   4ca7c:	1000131e 	bne	r2,zero,4cacc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4ca80:	e0bffa17 	ldw	r2,-24(fp)
   4ca84:	10800317 	ldw	r2,12(r2)
   4ca88:	1005003a 	cmpeq	r2,r2,zero
   4ca8c:	1000091e 	bne	r2,zero,4cab4 <open+0x124>
   4ca90:	e0bffa17 	ldw	r2,-24(fp)
   4ca94:	10800317 	ldw	r2,12(r2)
   4ca98:	e13ff917 	ldw	r4,-28(fp)
   4ca9c:	e17ffb17 	ldw	r5,-20(fp)
   4caa0:	e1bffc17 	ldw	r6,-16(fp)
   4caa4:	e1fffd17 	ldw	r7,-12(fp)
   4caa8:	103ee83a 	callr	r2
   4caac:	e0bfff15 	stw	r2,-4(fp)
   4cab0:	00000106 	br	4cab8 <open+0x128>
   4cab4:	e03fff15 	stw	zero,-4(fp)
   4cab8:	e0bfff17 	ldw	r2,-4(fp)
   4cabc:	e0bff715 	stw	r2,-36(fp)
   4cac0:	00000206 	br	4cacc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   4cac4:	00bffb44 	movi	r2,-19
   4cac8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4cacc:	e0bff717 	ldw	r2,-36(fp)
   4cad0:	1004403a 	cmpge	r2,r2,zero
   4cad4:	1000091e 	bne	r2,zero,4cafc <open+0x16c>
  {
    alt_release_fd (index);  
   4cad8:	e13ff817 	ldw	r4,-32(fp)
   4cadc:	004b1e80 	call	4b1e8 <alt_release_fd>
    ALT_ERRNO = -status;
   4cae0:	004cb1c0 	call	4cb1c <alt_get_errno>
   4cae4:	e0fff717 	ldw	r3,-36(fp)
   4cae8:	00c7c83a 	sub	r3,zero,r3
   4caec:	10c00015 	stw	r3,0(r2)
    return -1;
   4caf0:	00bfffc4 	movi	r2,-1
   4caf4:	e0bffe15 	stw	r2,-8(fp)
   4caf8:	00000206 	br	4cb04 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   4cafc:	e0bff817 	ldw	r2,-32(fp)
   4cb00:	e0bffe15 	stw	r2,-8(fp)
   4cb04:	e0bffe17 	ldw	r2,-8(fp)
}
   4cb08:	e037883a 	mov	sp,fp
   4cb0c:	dfc00117 	ldw	ra,4(sp)
   4cb10:	df000017 	ldw	fp,0(sp)
   4cb14:	dec00204 	addi	sp,sp,8
   4cb18:	f800283a 	ret

0004cb1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4cb1c:	defffd04 	addi	sp,sp,-12
   4cb20:	dfc00215 	stw	ra,8(sp)
   4cb24:	df000115 	stw	fp,4(sp)
   4cb28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   4cb2c:	00800174 	movhi	r2,5
   4cb30:	10bc9004 	addi	r2,r2,-3520
   4cb34:	10800017 	ldw	r2,0(r2)
   4cb38:	1005003a 	cmpeq	r2,r2,zero
   4cb3c:	1000061e 	bne	r2,zero,4cb58 <alt_get_errno+0x3c>
   4cb40:	00800174 	movhi	r2,5
   4cb44:	10bc9004 	addi	r2,r2,-3520
   4cb48:	10800017 	ldw	r2,0(r2)
   4cb4c:	103ee83a 	callr	r2
   4cb50:	e0bfff15 	stw	r2,-4(fp)
   4cb54:	00000306 	br	4cb64 <alt_get_errno+0x48>
   4cb58:	00800174 	movhi	r2,5
   4cb5c:	10833204 	addi	r2,r2,3272
   4cb60:	e0bfff15 	stw	r2,-4(fp)
   4cb64:	e0bfff17 	ldw	r2,-4(fp)
}
   4cb68:	e037883a 	mov	sp,fp
   4cb6c:	dfc00117 	ldw	ra,4(sp)
   4cb70:	df000017 	ldw	fp,0(sp)
   4cb74:	dec00204 	addi	sp,sp,8
   4cb78:	f800283a 	ret

0004cb7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   4cb7c:	defffa04 	addi	sp,sp,-24
   4cb80:	df000515 	stw	fp,20(sp)
   4cb84:	df000504 	addi	fp,sp,20
   4cb88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4cb8c:	0005303a 	rdctl	r2,status
   4cb90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4cb94:	e0fffd17 	ldw	r3,-12(fp)
   4cb98:	00bfff84 	movi	r2,-2
   4cb9c:	1884703a 	and	r2,r3,r2
   4cba0:	1001703a 	wrctl	status,r2
  
  return context;
   4cba4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   4cba8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   4cbac:	e0bfff17 	ldw	r2,-4(fp)
   4cbb0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4cbb4:	e0bffc17 	ldw	r2,-16(fp)
   4cbb8:	10c00017 	ldw	r3,0(r2)
   4cbbc:	e0bffc17 	ldw	r2,-16(fp)
   4cbc0:	10800117 	ldw	r2,4(r2)
   4cbc4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   4cbc8:	e0bffc17 	ldw	r2,-16(fp)
   4cbcc:	10c00117 	ldw	r3,4(r2)
   4cbd0:	e0bffc17 	ldw	r2,-16(fp)
   4cbd4:	10800017 	ldw	r2,0(r2)
   4cbd8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4cbdc:	e0fffc17 	ldw	r3,-16(fp)
   4cbe0:	e0bffc17 	ldw	r2,-16(fp)
   4cbe4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   4cbe8:	e0fffc17 	ldw	r3,-16(fp)
   4cbec:	e0bffc17 	ldw	r2,-16(fp)
   4cbf0:	18800015 	stw	r2,0(r3)
   4cbf4:	e0bffe17 	ldw	r2,-8(fp)
   4cbf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4cbfc:	e0bffb17 	ldw	r2,-20(fp)
   4cc00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   4cc04:	e037883a 	mov	sp,fp
   4cc08:	df000017 	ldw	fp,0(sp)
   4cc0c:	dec00104 	addi	sp,sp,4
   4cc10:	f800283a 	ret

0004cc14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4cc14:	defffb04 	addi	sp,sp,-20
   4cc18:	dfc00415 	stw	ra,16(sp)
   4cc1c:	df000315 	stw	fp,12(sp)
   4cc20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4cc24:	d0a00e17 	ldw	r2,-32712(gp)
   4cc28:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4cc2c:	d0a6b317 	ldw	r2,-25908(gp)
   4cc30:	10800044 	addi	r2,r2,1
   4cc34:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4cc38:	00003106 	br	4cd00 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   4cc3c:	e0bffe17 	ldw	r2,-8(fp)
   4cc40:	10800017 	ldw	r2,0(r2)
   4cc44:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4cc48:	e0bffe17 	ldw	r2,-8(fp)
   4cc4c:	10800403 	ldbu	r2,16(r2)
   4cc50:	10803fcc 	andi	r2,r2,255
   4cc54:	1005003a 	cmpeq	r2,r2,zero
   4cc58:	1000051e 	bne	r2,zero,4cc70 <alt_tick+0x5c>
   4cc5c:	d0a6b317 	ldw	r2,-25908(gp)
   4cc60:	1004c03a 	cmpne	r2,r2,zero
   4cc64:	1000021e 	bne	r2,zero,4cc70 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   4cc68:	e0bffe17 	ldw	r2,-8(fp)
   4cc6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4cc70:	e0bffe17 	ldw	r2,-8(fp)
   4cc74:	10c00217 	ldw	r3,8(r2)
   4cc78:	d0a6b317 	ldw	r2,-25908(gp)
   4cc7c:	10c01e36 	bltu	r2,r3,4ccf8 <alt_tick+0xe4>
   4cc80:	e0bffe17 	ldw	r2,-8(fp)
   4cc84:	10800403 	ldbu	r2,16(r2)
   4cc88:	10803fcc 	andi	r2,r2,255
   4cc8c:	1004c03a 	cmpne	r2,r2,zero
   4cc90:	1000191e 	bne	r2,zero,4ccf8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   4cc94:	e0bffe17 	ldw	r2,-8(fp)
   4cc98:	10c00317 	ldw	r3,12(r2)
   4cc9c:	e0bffe17 	ldw	r2,-8(fp)
   4cca0:	11000517 	ldw	r4,20(r2)
   4cca4:	183ee83a 	callr	r3
   4cca8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4ccac:	e0bffd17 	ldw	r2,-12(fp)
   4ccb0:	1004c03a 	cmpne	r2,r2,zero
   4ccb4:	1000031e 	bne	r2,zero,4ccc4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   4ccb8:	e13ffe17 	ldw	r4,-8(fp)
   4ccbc:	004cb7c0 	call	4cb7c <alt_alarm_stop>
   4ccc0:	00000d06 	br	4ccf8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   4ccc4:	e0bffe17 	ldw	r2,-8(fp)
   4ccc8:	10c00217 	ldw	r3,8(r2)
   4cccc:	e0bffd17 	ldw	r2,-12(fp)
   4ccd0:	1887883a 	add	r3,r3,r2
   4ccd4:	e0bffe17 	ldw	r2,-8(fp)
   4ccd8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4ccdc:	e0bffe17 	ldw	r2,-8(fp)
   4cce0:	10c00217 	ldw	r3,8(r2)
   4cce4:	d0a6b317 	ldw	r2,-25908(gp)
   4cce8:	1880032e 	bgeu	r3,r2,4ccf8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   4ccec:	e0fffe17 	ldw	r3,-8(fp)
   4ccf0:	00800044 	movi	r2,1
   4ccf4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   4ccf8:	e0bfff17 	ldw	r2,-4(fp)
   4ccfc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4cd00:	d0e00e04 	addi	r3,gp,-32712
   4cd04:	e0bffe17 	ldw	r2,-8(fp)
   4cd08:	10ffcc1e 	bne	r2,r3,4cc3c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4cd0c:	e037883a 	mov	sp,fp
   4cd10:	dfc00117 	ldw	ra,4(sp)
   4cd14:	df000017 	ldw	fp,0(sp)
   4cd18:	dec00204 	addi	sp,sp,8
   4cd1c:	f800283a 	ret

0004cd20 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   4cd20:	deffff04 	addi	sp,sp,-4
   4cd24:	df000015 	stw	fp,0(sp)
   4cd28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   4cd2c:	000170fa 	wrctl	ienable,zero
}
   4cd30:	e037883a 	mov	sp,fp
   4cd34:	df000017 	ldw	fp,0(sp)
   4cd38:	dec00104 	addi	sp,sp,4
   4cd3c:	f800283a 	ret

0004cd40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4cd40:	defff904 	addi	sp,sp,-28
   4cd44:	dfc00615 	stw	ra,24(sp)
   4cd48:	df000515 	stw	fp,20(sp)
   4cd4c:	df000504 	addi	fp,sp,20
   4cd50:	e13ffd15 	stw	r4,-12(fp)
   4cd54:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   4cd58:	e0bffe17 	ldw	r2,-8(fp)
   4cd5c:	10800017 	ldw	r2,0(r2)
   4cd60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4cd64:	e13ffd17 	ldw	r4,-12(fp)
   4cd68:	0040e900 	call	40e90 <strlen>
   4cd6c:	10800044 	addi	r2,r2,1
   4cd70:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cd74:	00000d06 	br	4cdac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4cd78:	e0bffc17 	ldw	r2,-16(fp)
   4cd7c:	11000217 	ldw	r4,8(r2)
   4cd80:	e1bffb17 	ldw	r6,-20(fp)
   4cd84:	e17ffd17 	ldw	r5,-12(fp)
   4cd88:	004d0100 	call	4d010 <memcmp>
   4cd8c:	1004c03a 	cmpne	r2,r2,zero
   4cd90:	1000031e 	bne	r2,zero,4cda0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   4cd94:	e0bffc17 	ldw	r2,-16(fp)
   4cd98:	e0bfff15 	stw	r2,-4(fp)
   4cd9c:	00000706 	br	4cdbc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   4cda0:	e0bffc17 	ldw	r2,-16(fp)
   4cda4:	10800017 	ldw	r2,0(r2)
   4cda8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4cdac:	e0fffe17 	ldw	r3,-8(fp)
   4cdb0:	e0bffc17 	ldw	r2,-16(fp)
   4cdb4:	10fff01e 	bne	r2,r3,4cd78 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4cdb8:	e03fff15 	stw	zero,-4(fp)
   4cdbc:	e0bfff17 	ldw	r2,-4(fp)
}
   4cdc0:	e037883a 	mov	sp,fp
   4cdc4:	dfc00117 	ldw	ra,4(sp)
   4cdc8:	df000017 	ldw	fp,0(sp)
   4cdcc:	dec00204 	addi	sp,sp,8
   4cdd0:	f800283a 	ret

0004cdd4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4cdd4:	defffa04 	addi	sp,sp,-24
   4cdd8:	dfc00515 	stw	ra,20(sp)
   4cddc:	df000415 	stw	fp,16(sp)
   4cde0:	df000404 	addi	fp,sp,16
   4cde4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4cde8:	00800174 	movhi	r2,5
   4cdec:	10bc8b04 	addi	r2,r2,-3540
   4cdf0:	10800017 	ldw	r2,0(r2)
   4cdf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4cdf8:	00003306 	br	4cec8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   4cdfc:	e0bffd17 	ldw	r2,-12(fp)
   4ce00:	11000217 	ldw	r4,8(r2)
   4ce04:	0040e900 	call	40e90 <strlen>
   4ce08:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   4ce0c:	e0bffd17 	ldw	r2,-12(fp)
   4ce10:	10c00217 	ldw	r3,8(r2)
   4ce14:	e0bffc17 	ldw	r2,-16(fp)
   4ce18:	1885883a 	add	r2,r3,r2
   4ce1c:	10bfffc4 	addi	r2,r2,-1
   4ce20:	10800003 	ldbu	r2,0(r2)
   4ce24:	10803fcc 	andi	r2,r2,255
   4ce28:	1080201c 	xori	r2,r2,128
   4ce2c:	10bfe004 	addi	r2,r2,-128
   4ce30:	10800bd8 	cmpnei	r2,r2,47
   4ce34:	1000031e 	bne	r2,zero,4ce44 <alt_find_file+0x70>
    {
      len -= 1;
   4ce38:	e0bffc17 	ldw	r2,-16(fp)
   4ce3c:	10bfffc4 	addi	r2,r2,-1
   4ce40:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ce44:	e0bffc17 	ldw	r2,-16(fp)
   4ce48:	1007883a 	mov	r3,r2
   4ce4c:	e0bffe17 	ldw	r2,-8(fp)
   4ce50:	1885883a 	add	r2,r3,r2
   4ce54:	10800003 	ldbu	r2,0(r2)
   4ce58:	10803fcc 	andi	r2,r2,255
   4ce5c:	1080201c 	xori	r2,r2,128
   4ce60:	10bfe004 	addi	r2,r2,-128
   4ce64:	10800be0 	cmpeqi	r2,r2,47
   4ce68:	10000a1e 	bne	r2,zero,4ce94 <alt_find_file+0xc0>
   4ce6c:	e0bffc17 	ldw	r2,-16(fp)
   4ce70:	1007883a 	mov	r3,r2
   4ce74:	e0bffe17 	ldw	r2,-8(fp)
   4ce78:	1885883a 	add	r2,r3,r2
   4ce7c:	10800003 	ldbu	r2,0(r2)
   4ce80:	10803fcc 	andi	r2,r2,255
   4ce84:	1080201c 	xori	r2,r2,128
   4ce88:	10bfe004 	addi	r2,r2,-128
   4ce8c:	1004c03a 	cmpne	r2,r2,zero
   4ce90:	10000a1e 	bne	r2,zero,4cebc <alt_find_file+0xe8>
   4ce94:	e0bffd17 	ldw	r2,-12(fp)
   4ce98:	11000217 	ldw	r4,8(r2)
   4ce9c:	e1bffc17 	ldw	r6,-16(fp)
   4cea0:	e17ffe17 	ldw	r5,-8(fp)
   4cea4:	004d0100 	call	4d010 <memcmp>
   4cea8:	1004c03a 	cmpne	r2,r2,zero
   4ceac:	1000031e 	bne	r2,zero,4cebc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   4ceb0:	e0bffd17 	ldw	r2,-12(fp)
   4ceb4:	e0bfff15 	stw	r2,-4(fp)
   4ceb8:	00000806 	br	4cedc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   4cebc:	e0bffd17 	ldw	r2,-12(fp)
   4cec0:	10800017 	ldw	r2,0(r2)
   4cec4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4cec8:	00c00174 	movhi	r3,5
   4cecc:	18fc8b04 	addi	r3,r3,-3540
   4ced0:	e0bffd17 	ldw	r2,-12(fp)
   4ced4:	10ffc91e 	bne	r2,r3,4cdfc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4ced8:	e03fff15 	stw	zero,-4(fp)
   4cedc:	e0bfff17 	ldw	r2,-4(fp)
}
   4cee0:	e037883a 	mov	sp,fp
   4cee4:	dfc00117 	ldw	ra,4(sp)
   4cee8:	df000017 	ldw	fp,0(sp)
   4ceec:	dec00204 	addi	sp,sp,8
   4cef0:	f800283a 	ret

0004cef4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4cef4:	defffa04 	addi	sp,sp,-24
   4cef8:	dfc00515 	stw	ra,20(sp)
   4cefc:	df000415 	stw	fp,16(sp)
   4cf00:	dc000315 	stw	r16,12(sp)
   4cf04:	df000304 	addi	fp,sp,12
   4cf08:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   4cf0c:	00bffa04 	movi	r2,-24
   4cf10:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cf14:	e03ffe15 	stw	zero,-8(fp)
   4cf18:	00002006 	br	4cf9c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   4cf1c:	e13ffe17 	ldw	r4,-8(fp)
   4cf20:	04000174 	movhi	r16,5
   4cf24:	84380d04 	addi	r16,r16,-8140
   4cf28:	01400304 	movi	r5,12
   4cf2c:	004a0e00 	call	4a0e0 <__mulsi3>
   4cf30:	1405883a 	add	r2,r2,r16
   4cf34:	10800017 	ldw	r2,0(r2)
   4cf38:	1004c03a 	cmpne	r2,r2,zero
   4cf3c:	1000141e 	bne	r2,zero,4cf90 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   4cf40:	e13ffe17 	ldw	r4,-8(fp)
   4cf44:	04000174 	movhi	r16,5
   4cf48:	84380d04 	addi	r16,r16,-8140
   4cf4c:	01400304 	movi	r5,12
   4cf50:	004a0e00 	call	4a0e0 <__mulsi3>
   4cf54:	1407883a 	add	r3,r2,r16
   4cf58:	e0bfff17 	ldw	r2,-4(fp)
   4cf5c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   4cf60:	00800174 	movhi	r2,5
   4cf64:	10bc8f04 	addi	r2,r2,-3524
   4cf68:	10c00017 	ldw	r3,0(r2)
   4cf6c:	e0bffe17 	ldw	r2,-8(fp)
   4cf70:	1880040e 	bge	r3,r2,4cf84 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   4cf74:	00c00174 	movhi	r3,5
   4cf78:	18fc8f04 	addi	r3,r3,-3524
   4cf7c:	e0bffe17 	ldw	r2,-8(fp)
   4cf80:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   4cf84:	e0bffe17 	ldw	r2,-8(fp)
   4cf88:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   4cf8c:	00000606 	br	4cfa8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4cf90:	e0bffe17 	ldw	r2,-8(fp)
   4cf94:	10800044 	addi	r2,r2,1
   4cf98:	e0bffe15 	stw	r2,-8(fp)
   4cf9c:	e0bffe17 	ldw	r2,-8(fp)
   4cfa0:	10800810 	cmplti	r2,r2,32
   4cfa4:	103fdd1e 	bne	r2,zero,4cf1c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   4cfa8:	e0bffd17 	ldw	r2,-12(fp)
}
   4cfac:	e037883a 	mov	sp,fp
   4cfb0:	dfc00217 	ldw	ra,8(sp)
   4cfb4:	df000117 	ldw	fp,4(sp)
   4cfb8:	dc000017 	ldw	r16,0(sp)
   4cfbc:	dec00304 	addi	sp,sp,12
   4cfc0:	f800283a 	ret

0004cfc4 <atexit>:
   4cfc4:	200b883a 	mov	r5,r4
   4cfc8:	000d883a 	mov	r6,zero
   4cfcc:	0009883a 	mov	r4,zero
   4cfd0:	000f883a 	mov	r7,zero
   4cfd4:	004d0841 	jmpi	4d084 <__register_exitproc>

0004cfd8 <exit>:
   4cfd8:	defffe04 	addi	sp,sp,-8
   4cfdc:	000b883a 	mov	r5,zero
   4cfe0:	dc000015 	stw	r16,0(sp)
   4cfe4:	dfc00115 	stw	ra,4(sp)
   4cfe8:	2021883a 	mov	r16,r4
   4cfec:	004d1bc0 	call	4d1bc <__call_exitprocs>
   4cff0:	00800174 	movhi	r2,5
   4cff4:	10bc8604 	addi	r2,r2,-3560
   4cff8:	11000017 	ldw	r4,0(r2)
   4cffc:	20800f17 	ldw	r2,60(r4)
   4d000:	10000126 	beq	r2,zero,4d008 <exit+0x30>
   4d004:	103ee83a 	callr	r2
   4d008:	8009883a 	mov	r4,r16
   4d00c:	004d3ac0 	call	4d3ac <_exit>

0004d010 <memcmp>:
   4d010:	00c000c4 	movi	r3,3
   4d014:	1980032e 	bgeu	r3,r6,4d024 <memcmp+0x14>
   4d018:	2144b03a 	or	r2,r4,r5
   4d01c:	10c4703a 	and	r2,r2,r3
   4d020:	10000f26 	beq	r2,zero,4d060 <memcmp+0x50>
   4d024:	31ffffc4 	addi	r7,r6,-1
   4d028:	3000061e 	bne	r6,zero,4d044 <memcmp+0x34>
   4d02c:	00000a06 	br	4d058 <memcmp+0x48>
   4d030:	39ffffc4 	addi	r7,r7,-1
   4d034:	00bfffc4 	movi	r2,-1
   4d038:	21000044 	addi	r4,r4,1
   4d03c:	29400044 	addi	r5,r5,1
   4d040:	38800526 	beq	r7,r2,4d058 <memcmp+0x48>
   4d044:	20c00003 	ldbu	r3,0(r4)
   4d048:	28800003 	ldbu	r2,0(r5)
   4d04c:	18bff826 	beq	r3,r2,4d030 <memcmp+0x20>
   4d050:	1885c83a 	sub	r2,r3,r2
   4d054:	f800283a 	ret
   4d058:	0005883a 	mov	r2,zero
   4d05c:	f800283a 	ret
   4d060:	180f883a 	mov	r7,r3
   4d064:	20c00017 	ldw	r3,0(r4)
   4d068:	28800017 	ldw	r2,0(r5)
   4d06c:	18bfed1e 	bne	r3,r2,4d024 <memcmp+0x14>
   4d070:	31bfff04 	addi	r6,r6,-4
   4d074:	21000104 	addi	r4,r4,4
   4d078:	29400104 	addi	r5,r5,4
   4d07c:	39bff936 	bltu	r7,r6,4d064 <memcmp+0x54>
   4d080:	003fe806 	br	4d024 <memcmp+0x14>

0004d084 <__register_exitproc>:
   4d084:	defffa04 	addi	sp,sp,-24
   4d088:	00800174 	movhi	r2,5
   4d08c:	10bc8604 	addi	r2,r2,-3560
   4d090:	dc000015 	stw	r16,0(sp)
   4d094:	14000017 	ldw	r16,0(r2)
   4d098:	dd000415 	stw	r20,16(sp)
   4d09c:	2829883a 	mov	r20,r5
   4d0a0:	81405217 	ldw	r5,328(r16)
   4d0a4:	dcc00315 	stw	r19,12(sp)
   4d0a8:	dc800215 	stw	r18,8(sp)
   4d0ac:	dc400115 	stw	r17,4(sp)
   4d0b0:	dfc00515 	stw	ra,20(sp)
   4d0b4:	2023883a 	mov	r17,r4
   4d0b8:	3027883a 	mov	r19,r6
   4d0bc:	3825883a 	mov	r18,r7
   4d0c0:	28002526 	beq	r5,zero,4d158 <__register_exitproc+0xd4>
   4d0c4:	29000117 	ldw	r4,4(r5)
   4d0c8:	008007c4 	movi	r2,31
   4d0cc:	11002716 	blt	r2,r4,4d16c <__register_exitproc+0xe8>
   4d0d0:	8800101e 	bne	r17,zero,4d114 <__register_exitproc+0x90>
   4d0d4:	2105883a 	add	r2,r4,r4
   4d0d8:	1085883a 	add	r2,r2,r2
   4d0dc:	20c00044 	addi	r3,r4,1
   4d0e0:	1145883a 	add	r2,r2,r5
   4d0e4:	0009883a 	mov	r4,zero
   4d0e8:	15000215 	stw	r20,8(r2)
   4d0ec:	28c00115 	stw	r3,4(r5)
   4d0f0:	2005883a 	mov	r2,r4
   4d0f4:	dfc00517 	ldw	ra,20(sp)
   4d0f8:	dd000417 	ldw	r20,16(sp)
   4d0fc:	dcc00317 	ldw	r19,12(sp)
   4d100:	dc800217 	ldw	r18,8(sp)
   4d104:	dc400117 	ldw	r17,4(sp)
   4d108:	dc000017 	ldw	r16,0(sp)
   4d10c:	dec00604 	addi	sp,sp,24
   4d110:	f800283a 	ret
   4d114:	29802204 	addi	r6,r5,136
   4d118:	00800044 	movi	r2,1
   4d11c:	110e983a 	sll	r7,r2,r4
   4d120:	30c04017 	ldw	r3,256(r6)
   4d124:	2105883a 	add	r2,r4,r4
   4d128:	1085883a 	add	r2,r2,r2
   4d12c:	1185883a 	add	r2,r2,r6
   4d130:	19c6b03a 	or	r3,r3,r7
   4d134:	14802015 	stw	r18,128(r2)
   4d138:	14c00015 	stw	r19,0(r2)
   4d13c:	00800084 	movi	r2,2
   4d140:	30c04015 	stw	r3,256(r6)
   4d144:	88bfe31e 	bne	r17,r2,4d0d4 <__register_exitproc+0x50>
   4d148:	30804117 	ldw	r2,260(r6)
   4d14c:	11c4b03a 	or	r2,r2,r7
   4d150:	30804115 	stw	r2,260(r6)
   4d154:	003fdf06 	br	4d0d4 <__register_exitproc+0x50>
   4d158:	00800174 	movhi	r2,5
   4d15c:	10838304 	addi	r2,r2,3596
   4d160:	100b883a 	mov	r5,r2
   4d164:	80805215 	stw	r2,328(r16)
   4d168:	003fd606 	br	4d0c4 <__register_exitproc+0x40>
   4d16c:	00800034 	movhi	r2,0
   4d170:	10800004 	addi	r2,r2,0
   4d174:	1000021e 	bne	r2,zero,4d180 <__register_exitproc+0xfc>
   4d178:	013fffc4 	movi	r4,-1
   4d17c:	003fdc06 	br	4d0f0 <__register_exitproc+0x6c>
   4d180:	01006404 	movi	r4,400
   4d184:	103ee83a 	callr	r2
   4d188:	1007883a 	mov	r3,r2
   4d18c:	103ffa26 	beq	r2,zero,4d178 <__register_exitproc+0xf4>
   4d190:	80805217 	ldw	r2,328(r16)
   4d194:	180b883a 	mov	r5,r3
   4d198:	18000115 	stw	zero,4(r3)
   4d19c:	18800015 	stw	r2,0(r3)
   4d1a0:	80c05215 	stw	r3,328(r16)
   4d1a4:	18006215 	stw	zero,392(r3)
   4d1a8:	18006315 	stw	zero,396(r3)
   4d1ac:	0009883a 	mov	r4,zero
   4d1b0:	883fc826 	beq	r17,zero,4d0d4 <__register_exitproc+0x50>
   4d1b4:	003fd706 	br	4d114 <__register_exitproc+0x90>

0004d1b8 <register_fini>:
   4d1b8:	f800283a 	ret

0004d1bc <__call_exitprocs>:
   4d1bc:	00800174 	movhi	r2,5
   4d1c0:	10bc8604 	addi	r2,r2,-3560
   4d1c4:	10800017 	ldw	r2,0(r2)
   4d1c8:	defff304 	addi	sp,sp,-52
   4d1cc:	df000b15 	stw	fp,44(sp)
   4d1d0:	d8800115 	stw	r2,4(sp)
   4d1d4:	00800034 	movhi	r2,0
   4d1d8:	10800004 	addi	r2,r2,0
   4d1dc:	1005003a 	cmpeq	r2,r2,zero
   4d1e0:	d8800215 	stw	r2,8(sp)
   4d1e4:	d8800117 	ldw	r2,4(sp)
   4d1e8:	dd400815 	stw	r21,32(sp)
   4d1ec:	dd000715 	stw	r20,28(sp)
   4d1f0:	10805204 	addi	r2,r2,328
   4d1f4:	dfc00c15 	stw	ra,48(sp)
   4d1f8:	ddc00a15 	stw	r23,40(sp)
   4d1fc:	dd800915 	stw	r22,36(sp)
   4d200:	dcc00615 	stw	r19,24(sp)
   4d204:	dc800515 	stw	r18,20(sp)
   4d208:	dc400415 	stw	r17,16(sp)
   4d20c:	dc000315 	stw	r16,12(sp)
   4d210:	282b883a 	mov	r21,r5
   4d214:	2039883a 	mov	fp,r4
   4d218:	d8800015 	stw	r2,0(sp)
   4d21c:	2829003a 	cmpeq	r20,r5,zero
   4d220:	d8800117 	ldw	r2,4(sp)
   4d224:	14405217 	ldw	r17,328(r2)
   4d228:	88001026 	beq	r17,zero,4d26c <__call_exitprocs+0xb0>
   4d22c:	ddc00017 	ldw	r23,0(sp)
   4d230:	88800117 	ldw	r2,4(r17)
   4d234:	8c802204 	addi	r18,r17,136
   4d238:	143fffc4 	addi	r16,r2,-1
   4d23c:	80000916 	blt	r16,zero,4d264 <__call_exitprocs+0xa8>
   4d240:	05bfffc4 	movi	r22,-1
   4d244:	a000151e 	bne	r20,zero,4d29c <__call_exitprocs+0xe0>
   4d248:	8409883a 	add	r4,r16,r16
   4d24c:	2105883a 	add	r2,r4,r4
   4d250:	1485883a 	add	r2,r2,r18
   4d254:	10c02017 	ldw	r3,128(r2)
   4d258:	a8c01126 	beq	r21,r3,4d2a0 <__call_exitprocs+0xe4>
   4d25c:	843fffc4 	addi	r16,r16,-1
   4d260:	85bff81e 	bne	r16,r22,4d244 <__call_exitprocs+0x88>
   4d264:	d8800217 	ldw	r2,8(sp)
   4d268:	10003126 	beq	r2,zero,4d330 <__call_exitprocs+0x174>
   4d26c:	dfc00c17 	ldw	ra,48(sp)
   4d270:	df000b17 	ldw	fp,44(sp)
   4d274:	ddc00a17 	ldw	r23,40(sp)
   4d278:	dd800917 	ldw	r22,36(sp)
   4d27c:	dd400817 	ldw	r21,32(sp)
   4d280:	dd000717 	ldw	r20,28(sp)
   4d284:	dcc00617 	ldw	r19,24(sp)
   4d288:	dc800517 	ldw	r18,20(sp)
   4d28c:	dc400417 	ldw	r17,16(sp)
   4d290:	dc000317 	ldw	r16,12(sp)
   4d294:	dec00d04 	addi	sp,sp,52
   4d298:	f800283a 	ret
   4d29c:	8409883a 	add	r4,r16,r16
   4d2a0:	88c00117 	ldw	r3,4(r17)
   4d2a4:	2105883a 	add	r2,r4,r4
   4d2a8:	1445883a 	add	r2,r2,r17
   4d2ac:	18ffffc4 	addi	r3,r3,-1
   4d2b0:	11800217 	ldw	r6,8(r2)
   4d2b4:	1c001526 	beq	r3,r16,4d30c <__call_exitprocs+0x150>
   4d2b8:	10000215 	stw	zero,8(r2)
   4d2bc:	303fe726 	beq	r6,zero,4d25c <__call_exitprocs+0xa0>
   4d2c0:	00c00044 	movi	r3,1
   4d2c4:	1c06983a 	sll	r3,r3,r16
   4d2c8:	90804017 	ldw	r2,256(r18)
   4d2cc:	8cc00117 	ldw	r19,4(r17)
   4d2d0:	1884703a 	and	r2,r3,r2
   4d2d4:	10001426 	beq	r2,zero,4d328 <__call_exitprocs+0x16c>
   4d2d8:	90804117 	ldw	r2,260(r18)
   4d2dc:	1884703a 	and	r2,r3,r2
   4d2e0:	10000c1e 	bne	r2,zero,4d314 <__call_exitprocs+0x158>
   4d2e4:	2105883a 	add	r2,r4,r4
   4d2e8:	1485883a 	add	r2,r2,r18
   4d2ec:	11400017 	ldw	r5,0(r2)
   4d2f0:	e009883a 	mov	r4,fp
   4d2f4:	303ee83a 	callr	r6
   4d2f8:	88800117 	ldw	r2,4(r17)
   4d2fc:	98bfc81e 	bne	r19,r2,4d220 <__call_exitprocs+0x64>
   4d300:	b8800017 	ldw	r2,0(r23)
   4d304:	147fd526 	beq	r2,r17,4d25c <__call_exitprocs+0xa0>
   4d308:	003fc506 	br	4d220 <__call_exitprocs+0x64>
   4d30c:	8c000115 	stw	r16,4(r17)
   4d310:	003fea06 	br	4d2bc <__call_exitprocs+0x100>
   4d314:	2105883a 	add	r2,r4,r4
   4d318:	1485883a 	add	r2,r2,r18
   4d31c:	11000017 	ldw	r4,0(r2)
   4d320:	303ee83a 	callr	r6
   4d324:	003ff406 	br	4d2f8 <__call_exitprocs+0x13c>
   4d328:	303ee83a 	callr	r6
   4d32c:	003ff206 	br	4d2f8 <__call_exitprocs+0x13c>
   4d330:	88800117 	ldw	r2,4(r17)
   4d334:	1000081e 	bne	r2,zero,4d358 <__call_exitprocs+0x19c>
   4d338:	89000017 	ldw	r4,0(r17)
   4d33c:	20000726 	beq	r4,zero,4d35c <__call_exitprocs+0x1a0>
   4d340:	b9000015 	stw	r4,0(r23)
   4d344:	8809883a 	mov	r4,r17
   4d348:	00000000 	call	0 <__reset-0x40000>
   4d34c:	bc400017 	ldw	r17,0(r23)
   4d350:	883fb71e 	bne	r17,zero,4d230 <__call_exitprocs+0x74>
   4d354:	003fc506 	br	4d26c <__call_exitprocs+0xb0>
   4d358:	89000017 	ldw	r4,0(r17)
   4d35c:	882f883a 	mov	r23,r17
   4d360:	2023883a 	mov	r17,r4
   4d364:	883fb21e 	bne	r17,zero,4d230 <__call_exitprocs+0x74>
   4d368:	003fc006 	br	4d26c <__call_exitprocs+0xb0>

0004d36c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   4d36c:	defffd04 	addi	sp,sp,-12
   4d370:	df000215 	stw	fp,8(sp)
   4d374:	df000204 	addi	fp,sp,8
   4d378:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   4d37c:	e0bfff17 	ldw	r2,-4(fp)
   4d380:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4d384:	e0bffe17 	ldw	r2,-8(fp)
   4d388:	1005003a 	cmpeq	r2,r2,zero
   4d38c:	1000021e 	bne	r2,zero,4d398 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   4d390:	002af070 	cmpltui	zero,zero,43969
   4d394:	00000106 	br	4d39c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   4d398:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   4d39c:	e037883a 	mov	sp,fp
   4d3a0:	df000017 	ldw	fp,0(sp)
   4d3a4:	dec00104 	addi	sp,sp,4
   4d3a8:	f800283a 	ret

0004d3ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4d3ac:	defffd04 	addi	sp,sp,-12
   4d3b0:	dfc00215 	stw	ra,8(sp)
   4d3b4:	df000115 	stw	fp,4(sp)
   4d3b8:	df000104 	addi	fp,sp,4
   4d3bc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   4d3c0:	e13fff17 	ldw	r4,-4(fp)
   4d3c4:	004d36c0 	call	4d36c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4d3c8:	003fff06 	br	4d3c8 <_exit+0x1c>
   4d3cc:	0004d1b8 	rdprs	zero,zero,4934
